
F401_ITI_GP_SensorsFilters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a68  08001a68  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001a68  08001a68  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  08001a68  08001a68  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a68  08001a68  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a6c  08001a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08001a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000260  08001cd0  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08001cd0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002028a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002912  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aa6  00000000  00000000  00022bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  00023688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ca  00000000  00000000  00023910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016ae  00000000  00000000  00023ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000340d  00000000  00000000  00025188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005d99  00000000  00000000  00028595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000904  00000000  00000000  0002e330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0002ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000260 	.word	0x20000260
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a50 	.word	0x08001a50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000264 	.word	0x20000264
 80001d0:	08001a50 	.word	0x08001a50

080001d4 <__aeabi_frsub>:
 80001d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__addsf3>
 80001da:	bf00      	nop

080001dc <__aeabi_fsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e0 <__addsf3>:
 80001e0:	0042      	lsls	r2, r0, #1
 80001e2:	bf1f      	itttt	ne
 80001e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e8:	ea92 0f03 	teqne	r2, r3
 80001ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f4:	d06a      	beq.n	80002cc <__addsf3+0xec>
 80001f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fe:	bfc1      	itttt	gt
 8000200:	18d2      	addgt	r2, r2, r3
 8000202:	4041      	eorgt	r1, r0
 8000204:	4048      	eorgt	r0, r1
 8000206:	4041      	eorgt	r1, r0
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	2b19      	cmp	r3, #25
 800020e:	bf88      	it	hi
 8000210:	4770      	bxhi	lr
 8000212:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000216:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4240      	negne	r0, r0
 8000222:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000226:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022e:	bf18      	it	ne
 8000230:	4249      	negne	r1, r1
 8000232:	ea92 0f03 	teq	r2, r3
 8000236:	d03f      	beq.n	80002b8 <__addsf3+0xd8>
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	fa41 fc03 	asr.w	ip, r1, r3
 8000240:	eb10 000c 	adds.w	r0, r0, ip
 8000244:	f1c3 0320 	rsb	r3, r3, #32
 8000248:	fa01 f103 	lsl.w	r1, r1, r3
 800024c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000250:	d502      	bpl.n	8000258 <__addsf3+0x78>
 8000252:	4249      	negs	r1, r1
 8000254:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000258:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800025c:	d313      	bcc.n	8000286 <__addsf3+0xa6>
 800025e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000262:	d306      	bcc.n	8000272 <__addsf3+0x92>
 8000264:	0840      	lsrs	r0, r0, #1
 8000266:	ea4f 0131 	mov.w	r1, r1, rrx
 800026a:	f102 0201 	add.w	r2, r2, #1
 800026e:	2afe      	cmp	r2, #254	; 0xfe
 8000270:	d251      	bcs.n	8000316 <__addsf3+0x136>
 8000272:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000276:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027a:	bf08      	it	eq
 800027c:	f020 0001 	biceq.w	r0, r0, #1
 8000280:	ea40 0003 	orr.w	r0, r0, r3
 8000284:	4770      	bx	lr
 8000286:	0049      	lsls	r1, r1, #1
 8000288:	eb40 0000 	adc.w	r0, r0, r0
 800028c:	3a01      	subs	r2, #1
 800028e:	bf28      	it	cs
 8000290:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000294:	d2ed      	bcs.n	8000272 <__addsf3+0x92>
 8000296:	fab0 fc80 	clz	ip, r0
 800029a:	f1ac 0c08 	sub.w	ip, ip, #8
 800029e:	ebb2 020c 	subs.w	r2, r2, ip
 80002a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a6:	bfaa      	itet	ge
 80002a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002ac:	4252      	neglt	r2, r2
 80002ae:	4318      	orrge	r0, r3
 80002b0:	bfbc      	itt	lt
 80002b2:	40d0      	lsrlt	r0, r2
 80002b4:	4318      	orrlt	r0, r3
 80002b6:	4770      	bx	lr
 80002b8:	f092 0f00 	teq	r2, #0
 80002bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c0:	bf06      	itte	eq
 80002c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c6:	3201      	addeq	r2, #1
 80002c8:	3b01      	subne	r3, #1
 80002ca:	e7b5      	b.n	8000238 <__addsf3+0x58>
 80002cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002da:	d021      	beq.n	8000320 <__addsf3+0x140>
 80002dc:	ea92 0f03 	teq	r2, r3
 80002e0:	d004      	beq.n	80002ec <__addsf3+0x10c>
 80002e2:	f092 0f00 	teq	r2, #0
 80002e6:	bf08      	it	eq
 80002e8:	4608      	moveq	r0, r1
 80002ea:	4770      	bx	lr
 80002ec:	ea90 0f01 	teq	r0, r1
 80002f0:	bf1c      	itt	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	4770      	bxne	lr
 80002f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fa:	d104      	bne.n	8000306 <__addsf3+0x126>
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	bf28      	it	cs
 8000300:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000304:	4770      	bx	lr
 8000306:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030a:	bf3c      	itt	cc
 800030c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000310:	4770      	bxcc	lr
 8000312:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000316:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	4770      	bx	lr
 8000320:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000324:	bf16      	itet	ne
 8000326:	4608      	movne	r0, r1
 8000328:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800032c:	4601      	movne	r1, r0
 800032e:	0242      	lsls	r2, r0, #9
 8000330:	bf06      	itte	eq
 8000332:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000336:	ea90 0f01 	teqeq	r0, r1
 800033a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033e:	4770      	bx	lr

08000340 <__aeabi_ui2f>:
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	e004      	b.n	8000350 <__aeabi_i2f+0x8>
 8000346:	bf00      	nop

08000348 <__aeabi_i2f>:
 8000348:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800034c:	bf48      	it	mi
 800034e:	4240      	negmi	r0, r0
 8000350:	ea5f 0c00 	movs.w	ip, r0
 8000354:	bf08      	it	eq
 8000356:	4770      	bxeq	lr
 8000358:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800035c:	4601      	mov	r1, r0
 800035e:	f04f 0000 	mov.w	r0, #0
 8000362:	e01c      	b.n	800039e <__aeabi_l2f+0x2a>

08000364 <__aeabi_ul2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e00a      	b.n	8000388 <__aeabi_l2f+0x14>
 8000372:	bf00      	nop

08000374 <__aeabi_l2f>:
 8000374:	ea50 0201 	orrs.w	r2, r0, r1
 8000378:	bf08      	it	eq
 800037a:	4770      	bxeq	lr
 800037c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000380:	d502      	bpl.n	8000388 <__aeabi_l2f+0x14>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	ea5f 0c01 	movs.w	ip, r1
 800038c:	bf02      	ittt	eq
 800038e:	4684      	moveq	ip, r0
 8000390:	4601      	moveq	r1, r0
 8000392:	2000      	moveq	r0, #0
 8000394:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000398:	bf08      	it	eq
 800039a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a2:	fabc f28c 	clz	r2, ip
 80003a6:	3a08      	subs	r2, #8
 80003a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003ac:	db10      	blt.n	80003d0 <__aeabi_l2f+0x5c>
 80003ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b2:	4463      	add	r3, ip
 80003b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b8:	f1c2 0220 	rsb	r2, r2, #32
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	fa20 f202 	lsr.w	r2, r0, r2
 80003c4:	eb43 0002 	adc.w	r0, r3, r2
 80003c8:	bf08      	it	eq
 80003ca:	f020 0001 	biceq.w	r0, r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	f102 0220 	add.w	r2, r2, #32
 80003d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d8:	f1c2 0220 	rsb	r2, r2, #32
 80003dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e0:	fa21 f202 	lsr.w	r2, r1, r2
 80003e4:	eb43 0002 	adc.w	r0, r3, r2
 80003e8:	bf08      	it	eq
 80003ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_fmul>:
 80003f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003f8:	bf1e      	ittt	ne
 80003fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003fe:	ea92 0f0c 	teqne	r2, ip
 8000402:	ea93 0f0c 	teqne	r3, ip
 8000406:	d06f      	beq.n	80004e8 <__aeabi_fmul+0xf8>
 8000408:	441a      	add	r2, r3
 800040a:	ea80 0c01 	eor.w	ip, r0, r1
 800040e:	0240      	lsls	r0, r0, #9
 8000410:	bf18      	it	ne
 8000412:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000416:	d01e      	beq.n	8000456 <__aeabi_fmul+0x66>
 8000418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800041c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000420:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000424:	fba0 3101 	umull	r3, r1, r0, r1
 8000428:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800042c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000430:	bf3e      	ittt	cc
 8000432:	0049      	lslcc	r1, r1, #1
 8000434:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000438:	005b      	lslcc	r3, r3, #1
 800043a:	ea40 0001 	orr.w	r0, r0, r1
 800043e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000442:	2afd      	cmp	r2, #253	; 0xfd
 8000444:	d81d      	bhi.n	8000482 <__aeabi_fmul+0x92>
 8000446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800044a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800044e:	bf08      	it	eq
 8000450:	f020 0001 	biceq.w	r0, r0, #1
 8000454:	4770      	bx	lr
 8000456:	f090 0f00 	teq	r0, #0
 800045a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800045e:	bf08      	it	eq
 8000460:	0249      	lsleq	r1, r1, #9
 8000462:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000466:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800046a:	3a7f      	subs	r2, #127	; 0x7f
 800046c:	bfc2      	ittt	gt
 800046e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000472:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000476:	4770      	bxgt	lr
 8000478:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	3a01      	subs	r2, #1
 8000482:	dc5d      	bgt.n	8000540 <__aeabi_fmul+0x150>
 8000484:	f112 0f19 	cmn.w	r2, #25
 8000488:	bfdc      	itt	le
 800048a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800048e:	4770      	bxle	lr
 8000490:	f1c2 0200 	rsb	r2, r2, #0
 8000494:	0041      	lsls	r1, r0, #1
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	f1c2 0220 	rsb	r2, r2, #32
 800049e:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004a6:	f140 0000 	adc.w	r0, r0, #0
 80004aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ae:	bf08      	it	eq
 80004b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b4:	4770      	bx	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004be:	bf02      	ittt	eq
 80004c0:	0040      	lsleq	r0, r0, #1
 80004c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004c6:	3a01      	subeq	r2, #1
 80004c8:	d0f9      	beq.n	80004be <__aeabi_fmul+0xce>
 80004ca:	ea40 000c 	orr.w	r0, r0, ip
 80004ce:	f093 0f00 	teq	r3, #0
 80004d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004d6:	bf02      	ittt	eq
 80004d8:	0049      	lsleq	r1, r1, #1
 80004da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004de:	3b01      	subeq	r3, #1
 80004e0:	d0f9      	beq.n	80004d6 <__aeabi_fmul+0xe6>
 80004e2:	ea41 010c 	orr.w	r1, r1, ip
 80004e6:	e78f      	b.n	8000408 <__aeabi_fmul+0x18>
 80004e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004ec:	ea92 0f0c 	teq	r2, ip
 80004f0:	bf18      	it	ne
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d00a      	beq.n	800050e <__aeabi_fmul+0x11e>
 80004f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004fc:	bf18      	it	ne
 80004fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000502:	d1d8      	bne.n	80004b6 <__aeabi_fmul+0xc6>
 8000504:	ea80 0001 	eor.w	r0, r0, r1
 8000508:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800050c:	4770      	bx	lr
 800050e:	f090 0f00 	teq	r0, #0
 8000512:	bf17      	itett	ne
 8000514:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000518:	4608      	moveq	r0, r1
 800051a:	f091 0f00 	teqne	r1, #0
 800051e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000522:	d014      	beq.n	800054e <__aeabi_fmul+0x15e>
 8000524:	ea92 0f0c 	teq	r2, ip
 8000528:	d101      	bne.n	800052e <__aeabi_fmul+0x13e>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d10f      	bne.n	800054e <__aeabi_fmul+0x15e>
 800052e:	ea93 0f0c 	teq	r3, ip
 8000532:	d103      	bne.n	800053c <__aeabi_fmul+0x14c>
 8000534:	024b      	lsls	r3, r1, #9
 8000536:	bf18      	it	ne
 8000538:	4608      	movne	r0, r1
 800053a:	d108      	bne.n	800054e <__aeabi_fmul+0x15e>
 800053c:	ea80 0001 	eor.w	r0, r0, r1
 8000540:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000544:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000548:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800054c:	4770      	bx	lr
 800054e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bx	lr

08000558 <__aeabi_fdiv>:
 8000558:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000560:	bf1e      	ittt	ne
 8000562:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000566:	ea92 0f0c 	teqne	r2, ip
 800056a:	ea93 0f0c 	teqne	r3, ip
 800056e:	d069      	beq.n	8000644 <__aeabi_fdiv+0xec>
 8000570:	eba2 0203 	sub.w	r2, r2, r3
 8000574:	ea80 0c01 	eor.w	ip, r0, r1
 8000578:	0249      	lsls	r1, r1, #9
 800057a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800057e:	d037      	beq.n	80005f0 <__aeabi_fdiv+0x98>
 8000580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000584:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000588:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800058c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000590:	428b      	cmp	r3, r1
 8000592:	bf38      	it	cc
 8000594:	005b      	lslcc	r3, r3, #1
 8000596:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800059a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800059e:	428b      	cmp	r3, r1
 80005a0:	bf24      	itt	cs
 80005a2:	1a5b      	subcs	r3, r3, r1
 80005a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005ac:	bf24      	itt	cs
 80005ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ba:	bf24      	itt	cs
 80005bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005c8:	bf24      	itt	cs
 80005ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	bf18      	it	ne
 80005d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005da:	d1e0      	bne.n	800059e <__aeabi_fdiv+0x46>
 80005dc:	2afd      	cmp	r2, #253	; 0xfd
 80005de:	f63f af50 	bhi.w	8000482 <__aeabi_fmul+0x92>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005e8:	bf08      	it	eq
 80005ea:	f020 0001 	biceq.w	r0, r0, #1
 80005ee:	4770      	bx	lr
 80005f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005f8:	327f      	adds	r2, #127	; 0x7f
 80005fa:	bfc2      	ittt	gt
 80005fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000600:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000604:	4770      	bxgt	lr
 8000606:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	3a01      	subs	r2, #1
 8000610:	e737      	b.n	8000482 <__aeabi_fmul+0x92>
 8000612:	f092 0f00 	teq	r2, #0
 8000616:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800061a:	bf02      	ittt	eq
 800061c:	0040      	lsleq	r0, r0, #1
 800061e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000622:	3a01      	subeq	r2, #1
 8000624:	d0f9      	beq.n	800061a <__aeabi_fdiv+0xc2>
 8000626:	ea40 000c 	orr.w	r0, r0, ip
 800062a:	f093 0f00 	teq	r3, #0
 800062e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000632:	bf02      	ittt	eq
 8000634:	0049      	lsleq	r1, r1, #1
 8000636:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800063a:	3b01      	subeq	r3, #1
 800063c:	d0f9      	beq.n	8000632 <__aeabi_fdiv+0xda>
 800063e:	ea41 010c 	orr.w	r1, r1, ip
 8000642:	e795      	b.n	8000570 <__aeabi_fdiv+0x18>
 8000644:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000648:	ea92 0f0c 	teq	r2, ip
 800064c:	d108      	bne.n	8000660 <__aeabi_fdiv+0x108>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	f47f af7d 	bne.w	800054e <__aeabi_fmul+0x15e>
 8000654:	ea93 0f0c 	teq	r3, ip
 8000658:	f47f af70 	bne.w	800053c <__aeabi_fmul+0x14c>
 800065c:	4608      	mov	r0, r1
 800065e:	e776      	b.n	800054e <__aeabi_fmul+0x15e>
 8000660:	ea93 0f0c 	teq	r3, ip
 8000664:	d104      	bne.n	8000670 <__aeabi_fdiv+0x118>
 8000666:	024b      	lsls	r3, r1, #9
 8000668:	f43f af4c 	beq.w	8000504 <__aeabi_fmul+0x114>
 800066c:	4608      	mov	r0, r1
 800066e:	e76e      	b.n	800054e <__aeabi_fmul+0x15e>
 8000670:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000674:	bf18      	it	ne
 8000676:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800067a:	d1ca      	bne.n	8000612 <__aeabi_fdiv+0xba>
 800067c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000680:	f47f af5c 	bne.w	800053c <__aeabi_fmul+0x14c>
 8000684:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000688:	f47f af3c 	bne.w	8000504 <__aeabi_fmul+0x114>
 800068c:	e75f      	b.n	800054e <__aeabi_fmul+0x15e>
 800068e:	bf00      	nop

08000690 <__aeabi_f2iz>:
 8000690:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000694:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000698:	d30f      	bcc.n	80006ba <__aeabi_f2iz+0x2a>
 800069a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800069e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a2:	d90d      	bls.n	80006c0 <__aeabi_f2iz+0x30>
 80006a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006b0:	fa23 f002 	lsr.w	r0, r3, r2
 80006b4:	bf18      	it	ne
 80006b6:	4240      	negne	r0, r0
 80006b8:	4770      	bx	lr
 80006ba:	f04f 0000 	mov.w	r0, #0
 80006be:	4770      	bx	lr
 80006c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006c4:	d101      	bne.n	80006ca <__aeabi_f2iz+0x3a>
 80006c6:	0242      	lsls	r2, r0, #9
 80006c8:	d105      	bne.n	80006d6 <__aeabi_f2iz+0x46>
 80006ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80006ce:	bf08      	it	eq
 80006d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006d4:	4770      	bx	lr
 80006d6:	f04f 0000 	mov.w	r0, #0
 80006da:	4770      	bx	lr

080006dc <__aeabi_f2uiz>:
 80006dc:	0042      	lsls	r2, r0, #1
 80006de:	d20e      	bcs.n	80006fe <__aeabi_f2uiz+0x22>
 80006e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e4:	d30b      	bcc.n	80006fe <__aeabi_f2uiz+0x22>
 80006e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006ee:	d409      	bmi.n	8000704 <__aeabi_f2uiz+0x28>
 80006f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006f8:	fa23 f002 	lsr.w	r0, r3, r2
 80006fc:	4770      	bx	lr
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	4770      	bx	lr
 8000704:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000708:	d101      	bne.n	800070e <__aeabi_f2uiz+0x32>
 800070a:	0242      	lsls	r2, r0, #9
 800070c:	d102      	bne.n	8000714 <__aeabi_f2uiz+0x38>
 800070e:	f04f 30ff 	mov.w	r0, #4294967295
 8000712:	4770      	bx	lr
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <FIR_voidFilterInit>:
//#include <util/delay.h>

#define PI 3.14159265359

void FIR_voidFilterInit(FIR_Filter_t *Copy_pstFilter)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
	/*Define a counter*/
	uint8_t Local_u8Counter;

	Queue_voidCircularArrayQueueInit(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3384      	adds	r3, #132	; 0x84
 800072e:	4619      	mov	r1, r3
 8000730:	4610      	mov	r0, r2
 8000732:	f001 f84b 	bl	80017cc <Queue_voidCircularArrayQueueInit>

	/*Clear filter buffer*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e00f      	b.n	800075c <FIR_voidFilterInit+0x40>
	{
		Queue_voidCircularArrayQueueEnqueue(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear), FIR_FILTER_LENGTH, Copy_pstFilter -> QueueBuffer, 0);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	2210      	movs	r2, #16
 8000752:	f001 f87e 	bl	8001852 <Queue_voidCircularArrayQueueEnqueue>
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	3301      	adds	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b0f      	cmp	r3, #15
 8000760:	d9ec      	bls.n	800073c <FIR_voidFilterInit+0x20>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <FIR_f32FilterUpdate>:

float FIR_f32FilterUpdate(FIR_Filter_t *Copy_pstFilter, float Copy_f32Input)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8Counter;
	/*Define an indicator to handle the buffer*/
	uint8_t Local_u8Indicator;

	/*Enqueue the latest sample in the buffer queue*/
	Queue_voidCircularArrayQueueDequeueEnqueue(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear), FIR_FILTER_LENGTH, Copy_pstFilter -> QueueBuffer, Copy_f32Input);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	2210      	movs	r2, #16
 800078c:	f001 f896 	bl	80018bc <Queue_voidCircularArrayQueueDequeueEnqueue>

	/*Initialize the indicator to handle the buffer*/
	Local_u8Indicator = Copy_pstFilter -> Rear;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000796:	72bb      	strb	r3, [r7, #10]

	/*Compute the output sample (via convolution)*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
 8000798:	2300      	movs	r3, #0
 800079a:	72fb      	strb	r3, [r7, #11]
 800079c:	e01e      	b.n	80007dc <FIR_f32FilterUpdate+0x70>
	{
		/*Multiply impulse response with shifted input samples and add to output*/
		Local_f32OutputSample += Copy_pstFilter -> ImpulseRespone[Local_u8Counter] * Copy_pstFilter -> QueueBuffer[Local_u8Indicator];
 800079e:	7afa      	ldrb	r2, [r7, #11]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3210      	adds	r2, #16
 80007a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80007a8:	7aba      	ldrb	r2, [r7, #10]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f7ff fe1d 	bl	80003f0 <__aeabi_fmul>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4619      	mov	r1, r3
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f7ff fd10 	bl	80001e0 <__addsf3>
 80007c0:	4603      	mov	r3, r0
 80007c2:	60fb      	str	r3, [r7, #12]

		/*Move to the previous reading*/
		if(Local_u8Indicator > 0)
 80007c4:	7abb      	ldrb	r3, [r7, #10]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <FIR_f32FilterUpdate+0x66>
		{
			Local_u8Indicator--;
 80007ca:	7abb      	ldrb	r3, [r7, #10]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	72bb      	strb	r3, [r7, #10]
 80007d0:	e001      	b.n	80007d6 <FIR_f32FilterUpdate+0x6a>
		}
		else
		{
			Local_u8Indicator = FIR_FILTER_LENGTH - 1;
 80007d2:	230f      	movs	r3, #15
 80007d4:	72bb      	strb	r3, [r7, #10]
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	3301      	adds	r3, #1
 80007da:	72fb      	strb	r3, [r7, #11]
 80007dc:	7afb      	ldrb	r3, [r7, #11]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	d9dd      	bls.n	800079e <FIR_f32FilterUpdate+0x32>
		}

	}

	/*Put the output into the filter struct*/
	Copy_pstFilter -> Output = Local_f32OutputSample;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	/*Return the filter output*/
	return Local_f32OutputSample;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <GPIO_enPinInit>:

#include "../Inc/GPIO_interface.h"
#include "../Inc/GPIO_private.h"

Error_t GPIO_enPinInit(const GPIO_PinConfig_t *Copy_pstPinConfig)
{
 80007f4:	b490      	push	{r4, r7}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	Error_t Local_enErrorState = OK;
 80007fc:	2301      	movs	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstPinConfig != NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	f000 821e 	beq.w	8000c44 <GPIO_enPinInit+0x450>
	{
		switch(Copy_pstPinConfig -> Port)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b02      	cmp	r3, #2
 800080e:	f000 817b 	beq.w	8000b08 <GPIO_enPinInit+0x314>
 8000812:	2b02      	cmp	r3, #2
 8000814:	f300 820f 	bgt.w	8000c36 <GPIO_enPinInit+0x442>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <GPIO_enPinInit+0x30>
 800081c:	2b01      	cmp	r3, #1
 800081e:	f000 80bb 	beq.w	8000998 <GPIO_enPinInit+0x1a4>
 8000822:	e208      	b.n	8000c36 <GPIO_enPinInit+0x442>
		{
		case GPIO_PORTA:
			if((Copy_pstPinConfig -> PinNum) <= 15)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	f200 80b0 	bhi.w	800098e <GPIO_enPinInit+0x19a>
			{
				/* Set the pin mode */
				GPIOA -> MODER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 800082e:	4b59      	ldr	r3, [pc, #356]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7852      	ldrb	r2, [r2, #1]
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	2103      	movs	r1, #3
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	43d2      	mvns	r2, r2
 8000840:	4611      	mov	r1, r2
 8000842:	4a54      	ldr	r2, [pc, #336]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000844:	400b      	ands	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
				GPIOA -> MODER |= ((Copy_pstPinConfig -> PinMode) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000848:	4b52      	ldr	r3, [pc, #328]	; (8000994 <GPIO_enPinInit+0x1a0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	7892      	ldrb	r2, [r2, #2]
 8000850:	4611      	mov	r1, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	7852      	ldrb	r2, [r2, #1]
 8000856:	0052      	lsls	r2, r2, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	4611      	mov	r1, r2
 800085e:	4a4d      	ldr	r2, [pc, #308]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000860:	430b      	orrs	r3, r1
 8000862:	6013      	str	r3, [r2, #0]

				if(((Copy_pstPinConfig -> PinMode) == GPIO_OUTPUT) || ((Copy_pstPinConfig -> PinMode) == GPIO_ALTERNATE_FUNCTION))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <GPIO_enPinInit+0x80>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	789b      	ldrb	r3, [r3, #2]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d170      	bne.n	8000956 <GPIO_enPinInit+0x162>
				{
					/* Set the pin output type */
					GPIOA -> OTYPER &= ~(1 << Copy_pstPinConfig -> PinNum);
 8000874:	4b47      	ldr	r3, [pc, #284]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	7852      	ldrb	r2, [r2, #1]
 800087c:	4611      	mov	r1, r2
 800087e:	2201      	movs	r2, #1
 8000880:	408a      	lsls	r2, r1
 8000882:	43d2      	mvns	r2, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a43      	ldr	r2, [pc, #268]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000888:	400b      	ands	r3, r1
 800088a:	6053      	str	r3, [r2, #4]
					GPIOA -> OTYPER |= ((Copy_pstPinConfig -> OutputType) << (Copy_pstPinConfig -> PinNum));
 800088c:	4b41      	ldr	r3, [pc, #260]	; (8000994 <GPIO_enPinInit+0x1a0>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	78d2      	ldrb	r2, [r2, #3]
 8000894:	4611      	mov	r1, r2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	7852      	ldrb	r2, [r2, #1]
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008a2:	430b      	orrs	r3, r1
 80008a4:	6053      	str	r3, [r2, #4]

					/* Set the pin output speed*/
					GPIOA -> OSPEEDER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 80008a6:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	7852      	ldrb	r2, [r2, #1]
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	2103      	movs	r1, #3
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a36      	ldr	r2, [pc, #216]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008bc:	400b      	ands	r3, r1
 80008be:	6093      	str	r3, [r2, #8]
					GPIOA -> OSPEEDER |= ((Copy_pstPinConfig -> OutputSpeed) << (2 * (Copy_pstPinConfig -> PinNum)));
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	7912      	ldrb	r2, [r2, #4]
 80008c8:	4611      	mov	r1, r2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	7852      	ldrb	r2, [r2, #1]
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6093      	str	r3, [r2, #8]

					/* Set the pin alternate function*/
					GPIOA -> AFR[(Copy_pstPinConfig -> PinNum) / 8] &= ~(0b1111 << (4 * ((Copy_pstPinConfig -> PinNum) % 8)));
 80008dc:	4a2d      	ldr	r2, [pc, #180]	; (8000994 <GPIO_enPinInit+0x1a0>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3308      	adds	r3, #8
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	7852      	ldrb	r2, [r2, #1]
 80008f0:	f002 0207 	and.w	r2, r2, #7
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	210f      	movs	r1, #15
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	43d2      	mvns	r2, r2
 80008fe:	4614      	mov	r4, r2
 8000900:	4924      	ldr	r1, [pc, #144]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	7852      	ldrb	r2, [r2, #1]
 8000906:	08d2      	lsrs	r2, r2, #3
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	4610      	mov	r0, r2
 800090c:	ea03 0204 	and.w	r2, r3, r4
 8000910:	f100 0308 	add.w	r3, r0, #8
 8000914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					GPIOA -> AFR[(Copy_pstPinConfig -> PinNum) / 8] |= ((Copy_pstPinConfig -> AltFunc) << (4 * ((Copy_pstPinConfig -> PinNum) % 8)));
 8000918:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <GPIO_enPinInit+0x1a0>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3308      	adds	r3, #8
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	7992      	ldrb	r2, [r2, #6]
 800092c:	4611      	mov	r1, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7852      	ldrb	r2, [r2, #1]
 8000932:	f002 0207 	and.w	r2, r2, #7
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4614      	mov	r4, r2
 800093e:	4915      	ldr	r1, [pc, #84]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7852      	ldrb	r2, [r2, #1]
 8000944:	08d2      	lsrs	r2, r2, #3
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	4610      	mov	r0, r2
 800094a:	ea43 0204 	orr.w	r2, r3, r4
 800094e:	f100 0308 	add.w	r3, r0, #8
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}

				/* Set the pin pull type */
				GPIOA -> PUPDR &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	7852      	ldrb	r2, [r2, #1]
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	2103      	movs	r1, #3
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	43d2      	mvns	r2, r2
 8000968:	4611      	mov	r1, r2
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <GPIO_enPinInit+0x1a0>)
 800096c:	400b      	ands	r3, r1
 800096e:	60d3      	str	r3, [r2, #12]
				GPIOA -> PUPDR |= ((Copy_pstPinConfig -> PullType) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7952      	ldrb	r2, [r2, #5]
 8000978:	4611      	mov	r1, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7852      	ldrb	r2, [r2, #1]
 800097e:	0052      	lsls	r2, r2, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a03      	ldr	r2, [pc, #12]	; (8000994 <GPIO_enPinInit+0x1a0>)
 8000988:	430b      	orrs	r3, r1
 800098a:	60d3      	str	r3, [r2, #12]
			}
			else
			{
				Local_enErrorState = NOK;
			}
			break;
 800098c:	e15c      	b.n	8000c48 <GPIO_enPinInit+0x454>
				Local_enErrorState = NOK;
 800098e:	2302      	movs	r3, #2
 8000990:	73fb      	strb	r3, [r7, #15]
			break;
 8000992:	e159      	b.n	8000c48 <GPIO_enPinInit+0x454>
 8000994:	40020000 	.word	0x40020000

		case GPIO_PORTB:
			if((Copy_pstPinConfig -> PinNum) <= 15)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	f200 80b0 	bhi.w	8000b02 <GPIO_enPinInit+0x30e>
			{
				/* Set the pin mode */
				GPIOB -> MODER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 80009a2:	4ba6      	ldr	r3, [pc, #664]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	7852      	ldrb	r2, [r2, #1]
 80009aa:	0052      	lsls	r2, r2, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	43d2      	mvns	r2, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4aa1      	ldr	r2, [pc, #644]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009b8:	400b      	ands	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
				GPIOB -> MODER |= ((Copy_pstPinConfig -> PinMode) << (2 * (Copy_pstPinConfig -> PinNum)));
 80009bc:	4b9f      	ldr	r3, [pc, #636]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	7892      	ldrb	r2, [r2, #2]
 80009c4:	4611      	mov	r1, r2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	7852      	ldrb	r2, [r2, #1]
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a9a      	ldr	r2, [pc, #616]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]

				if(((Copy_pstPinConfig -> PinMode) == GPIO_OUTPUT) || ((Copy_pstPinConfig -> PinMode) == GPIO_ALTERNATE_FUNCTION))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	789b      	ldrb	r3, [r3, #2]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d003      	beq.n	80009e8 <GPIO_enPinInit+0x1f4>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d170      	bne.n	8000aca <GPIO_enPinInit+0x2d6>
				{
					/* Set the pin output type */
					GPIOB -> OTYPER &= ~(1 << Copy_pstPinConfig -> PinNum);
 80009e8:	4b94      	ldr	r3, [pc, #592]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	7852      	ldrb	r2, [r2, #1]
 80009f0:	4611      	mov	r1, r2
 80009f2:	2201      	movs	r2, #1
 80009f4:	408a      	lsls	r2, r1
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a90      	ldr	r2, [pc, #576]	; (8000c3c <GPIO_enPinInit+0x448>)
 80009fc:	400b      	ands	r3, r1
 80009fe:	6053      	str	r3, [r2, #4]
					GPIOB -> OTYPER |= ((Copy_pstPinConfig -> OutputType) << (Copy_pstPinConfig -> PinNum));
 8000a00:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	78d2      	ldrb	r2, [r2, #3]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	7852      	ldrb	r2, [r2, #1]
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a89      	ldr	r2, [pc, #548]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6053      	str	r3, [r2, #4]

					/* Set the pin output speed*/
					GPIOB -> OSPEEDER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000a1a:	4b88      	ldr	r3, [pc, #544]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	7852      	ldrb	r2, [r2, #1]
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	2103      	movs	r1, #3
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	43d2      	mvns	r2, r2
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4a83      	ldr	r2, [pc, #524]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a30:	400b      	ands	r3, r1
 8000a32:	6093      	str	r3, [r2, #8]
					GPIOB -> OSPEEDER |= ((Copy_pstPinConfig -> OutputSpeed) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000a34:	4b81      	ldr	r3, [pc, #516]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	7912      	ldrb	r2, [r2, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	7852      	ldrb	r2, [r2, #1]
 8000a42:	0052      	lsls	r2, r2, #1
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4a7c      	ldr	r2, [pc, #496]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6093      	str	r3, [r2, #8]

					/* Set the pin alternate function*/
					GPIOB -> AFR[(Copy_pstPinConfig -> PinNum) / 8] &= ~(0b1111 << (4 * ((Copy_pstPinConfig -> PinNum) % 8)));
 8000a50:	4a7a      	ldr	r2, [pc, #488]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7852      	ldrb	r2, [r2, #1]
 8000a64:	f002 0207 	and.w	r2, r2, #7
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	4614      	mov	r4, r2
 8000a74:	4971      	ldr	r1, [pc, #452]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	7852      	ldrb	r2, [r2, #1]
 8000a7a:	08d2      	lsrs	r2, r2, #3
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	4610      	mov	r0, r2
 8000a80:	ea03 0204 	and.w	r2, r3, r4
 8000a84:	f100 0308 	add.w	r3, r0, #8
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					GPIOB -> AFR[(Copy_pstPinConfig -> PinNum) / 8] |= ((Copy_pstPinConfig -> AltFunc) << (4 * ((Copy_pstPinConfig -> PinNum) % 8)));
 8000a8c:	4a6b      	ldr	r2, [pc, #428]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3308      	adds	r3, #8
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	7992      	ldrb	r2, [r2, #6]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	7852      	ldrb	r2, [r2, #1]
 8000aa6:	f002 0207 	and.w	r2, r2, #7
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	4962      	ldr	r1, [pc, #392]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	7852      	ldrb	r2, [r2, #1]
 8000ab8:	08d2      	lsrs	r2, r2, #3
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	4610      	mov	r0, r2
 8000abe:	ea43 0204 	orr.w	r2, r3, r4
 8000ac2:	f100 0308 	add.w	r3, r0, #8
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}

				/* Set the pin pull type */
				GPIOB -> PUPDR &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000aca:	4b5c      	ldr	r3, [pc, #368]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	7852      	ldrb	r2, [r2, #1]
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	43d2      	mvns	r2, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a57      	ldr	r2, [pc, #348]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	60d3      	str	r3, [r2, #12]
				GPIOB -> PUPDR |= ((Copy_pstPinConfig -> PullType) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000ae4:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	7952      	ldrb	r2, [r2, #5]
 8000aec:	4611      	mov	r1, r2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	7852      	ldrb	r2, [r2, #1]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <GPIO_enPinInit+0x448>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	60d3      	str	r3, [r2, #12]
			}
			else
			{
				Local_enErrorState = NOK;
			}
			break;
 8000b00:	e0a2      	b.n	8000c48 <GPIO_enPinInit+0x454>
				Local_enErrorState = NOK;
 8000b02:	2302      	movs	r3, #2
 8000b04:	73fb      	strb	r3, [r7, #15]
			break;
 8000b06:	e09f      	b.n	8000c48 <GPIO_enPinInit+0x454>

		case GPIO_PORTC:
			if(((Copy_pstPinConfig -> PinNum) >= 13) && ((Copy_pstPinConfig -> PinNum) <= 15))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b0c      	cmp	r3, #12
 8000b0e:	f240 808f 	bls.w	8000c30 <GPIO_enPinInit+0x43c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	785b      	ldrb	r3, [r3, #1]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	f200 808a 	bhi.w	8000c30 <GPIO_enPinInit+0x43c>
			{
				/* Set the pin mode */
				GPIOC -> MODER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000b1c:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	7852      	ldrb	r2, [r2, #1]
 8000b24:	0052      	lsls	r2, r2, #1
 8000b26:	2103      	movs	r1, #3
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b32:	400b      	ands	r3, r1
 8000b34:	6013      	str	r3, [r2, #0]
				GPIOC -> MODER |= ((Copy_pstPinConfig -> PinMode) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000b36:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	7892      	ldrb	r2, [r2, #2]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	7852      	ldrb	r2, [r2, #1]
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a3c      	ldr	r2, [pc, #240]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6013      	str	r3, [r2, #0]

				if((Copy_pstPinConfig -> PinMode) == GPIO_OUTPUT)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	789b      	ldrb	r3, [r3, #2]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d14e      	bne.n	8000bf8 <GPIO_enPinInit+0x404>
				{
					/* Set the pin output type */
					GPIOC -> OTYPER &= ~(1 << Copy_pstPinConfig -> PinNum);
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	7852      	ldrb	r2, [r2, #1]
 8000b62:	4611      	mov	r1, r2
 8000b64:	2201      	movs	r2, #1
 8000b66:	408a      	lsls	r2, r1
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4a34      	ldr	r2, [pc, #208]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b6e:	400b      	ands	r3, r1
 8000b70:	6053      	str	r3, [r2, #4]
					GPIOC -> OTYPER |= ((Copy_pstPinConfig -> OutputType) << (Copy_pstPinConfig -> PinNum));
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	78d2      	ldrb	r2, [r2, #3]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	7852      	ldrb	r2, [r2, #1]
 8000b80:	fa01 f202 	lsl.w	r2, r1, r2
 8000b84:	4611      	mov	r1, r2
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6053      	str	r3, [r2, #4]

					/* Set the pin output speed*/
					GPIOC -> OSPEEDER &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	7852      	ldrb	r2, [r2, #1]
 8000b94:	0052      	lsls	r2, r2, #1
 8000b96:	2103      	movs	r1, #3
 8000b98:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	6093      	str	r3, [r2, #8]
					GPIOC -> OSPEEDER |= ((Copy_pstPinConfig -> OutputSpeed) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	7912      	ldrb	r2, [r2, #4]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	7852      	ldrb	r2, [r2, #1]
 8000bb4:	0052      	lsls	r2, r2, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6093      	str	r3, [r2, #8]

					/* Set the pin Alternate Function */
					GPIOC -> AFR[0] &= ~(0b1111 << (4 * (Copy_pstPinConfig -> PinNum)));
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	7852      	ldrb	r2, [r2, #1]
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	210f      	movs	r1, #15
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	43d2      	mvns	r2, r2
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bd8:	400b      	ands	r3, r1
 8000bda:	6213      	str	r3, [r2, #32]
					GPIOC -> AFR[0] |= ((Copy_pstPinConfig -> AltFunc) << (4 * (Copy_pstPinConfig -> PinNum)));
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	7992      	ldrb	r2, [r2, #6]
 8000be4:	4611      	mov	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7852      	ldrb	r2, [r2, #1]
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6213      	str	r3, [r2, #32]
				}

				/* Set the pin pull type */
				GPIOC -> PUPDR &= ~(0b11 << (2 * (Copy_pstPinConfig -> PinNum)));
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	7852      	ldrb	r2, [r2, #1]
 8000c00:	0052      	lsls	r2, r2, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000c0e:	400b      	ands	r3, r1
 8000c10:	60d3      	str	r3, [r2, #12]
				GPIOC -> PUPDR |= ((Copy_pstPinConfig -> PullType) << (2 * (Copy_pstPinConfig -> PinNum)));
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	7952      	ldrb	r2, [r2, #5]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	7852      	ldrb	r2, [r2, #1]
 8000c20:	0052      	lsls	r2, r2, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	4611      	mov	r1, r2
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <GPIO_enPinInit+0x44c>)
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	60d3      	str	r3, [r2, #12]
			}
			else
			{
				Local_enErrorState = NOK;
			}
			break;
 8000c2e:	e00b      	b.n	8000c48 <GPIO_enPinInit+0x454>
				Local_enErrorState = NOK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	73fb      	strb	r3, [r7, #15]
			break;
 8000c34:	e008      	b.n	8000c48 <GPIO_enPinInit+0x454>

		default:
			Local_enErrorState = NOK;
 8000c36:	2302      	movs	r3, #2
 8000c38:	73fb      	strb	r3, [r7, #15]
			break;
 8000c3a:	e005      	b.n	8000c48 <GPIO_enPinInit+0x454>
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40020800 	.word	0x40020800
		}
	}
	else
	{
		Local_enErrorState = NULL_PTR_ERROR;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enErrorState;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc90      	pop	{r4, r7}
 8000c52:	4770      	bx	lr

08000c54 <GPIO_enSetPinValue>:

Error_t GPIO_enSetPinValue(const GPIO_PinConfig_t *Copy_pstPinConfig, GPIO_PinValue_t Copy_enPinValue)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
	Error_t Local_enErrorState = OK;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstPinConfig != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d052      	beq.n	8000d10 <GPIO_enSetPinValue+0xbc>
	{
		switch(Copy_pstPinConfig -> Port)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d034      	beq.n	8000cdc <GPIO_enSetPinValue+0x88>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc49      	bgt.n	8000d0a <GPIO_enSetPinValue+0xb6>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <GPIO_enSetPinValue+0x2c>
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d017      	beq.n	8000cae <GPIO_enSetPinValue+0x5a>
 8000c7e:	e044      	b.n	8000d0a <GPIO_enSetPinValue+0xb6>
		{
		case GPIO_PORTA:
			GPIOA -> ODR &= ~(1 << Copy_pstPinConfig -> PinNum);
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <GPIO_enSetPinValue+0xcc>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	7852      	ldrb	r2, [r2, #1]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	408a      	lsls	r2, r1
 8000c8e:	43d2      	mvns	r2, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <GPIO_enSetPinValue+0xcc>)
 8000c94:	400b      	ands	r3, r1
 8000c96:	6153      	str	r3, [r2, #20]
			GPIOA -> ODR |= (Copy_enPinValue << (Copy_pstPinConfig -> PinNum));
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <GPIO_enSetPinValue+0xcc>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	7849      	ldrb	r1, [r1, #1]
 8000ca2:	408a      	lsls	r2, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <GPIO_enSetPinValue+0xcc>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6153      	str	r3, [r2, #20]
			break;
 8000cac:	e032      	b.n	8000d14 <GPIO_enSetPinValue+0xc0>

		case GPIO_PORTB:
			GPIOB -> ODR &= ~(1 << Copy_pstPinConfig -> PinNum);
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <GPIO_enSetPinValue+0xd0>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	7852      	ldrb	r2, [r2, #1]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	2201      	movs	r2, #1
 8000cba:	408a      	lsls	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <GPIO_enSetPinValue+0xd0>)
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	6153      	str	r3, [r2, #20]
			GPIOB -> ODR |= (Copy_enPinValue << (Copy_pstPinConfig -> PinNum));
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <GPIO_enSetPinValue+0xd0>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	78fa      	ldrb	r2, [r7, #3]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	7849      	ldrb	r1, [r1, #1]
 8000cd0:	408a      	lsls	r2, r1
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <GPIO_enSetPinValue+0xd0>)
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6153      	str	r3, [r2, #20]
			break;
 8000cda:	e01b      	b.n	8000d14 <GPIO_enSetPinValue+0xc0>

		case GPIO_PORTC:
			GPIOC -> ODR &= ~(1 << Copy_pstPinConfig -> PinNum);
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <GPIO_enSetPinValue+0xd4>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7852      	ldrb	r2, [r2, #1]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	408a      	lsls	r2, r1
 8000cea:	43d2      	mvns	r2, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <GPIO_enSetPinValue+0xd4>)
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	6153      	str	r3, [r2, #20]
			GPIOC -> ODR |= (Copy_enPinValue << (Copy_pstPinConfig -> PinNum));
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <GPIO_enSetPinValue+0xd4>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	7849      	ldrb	r1, [r1, #1]
 8000cfe:	408a      	lsls	r2, r1
 8000d00:	4611      	mov	r1, r2
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <GPIO_enSetPinValue+0xd4>)
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6153      	str	r3, [r2, #20]
			break;
 8000d08:	e004      	b.n	8000d14 <GPIO_enSetPinValue+0xc0>

		default:
			Local_enErrorState = NOK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	73fb      	strb	r3, [r7, #15]
			break;
 8000d0e:	e001      	b.n	8000d14 <GPIO_enSetPinValue+0xc0>
		}
	}
	else
	{
		Local_enErrorState = NULL_PTR_ERROR;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enErrorState;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020800 	.word	0x40020800

08000d2c <GPIO_enReadPinValue>:


Error_t GPIO_enReadPinValue(const GPIO_PinConfig_t *Copy_pstPinConfig, GPIO_PinValue_t *Copy_penPinValue)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]

	Error_t Local_enErrorState = OK;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]

	if((Copy_pstPinConfig != NULL) || (Copy_penPinValue != NULL))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <GPIO_enReadPinValue+0x1a>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d032      	beq.n	8000dac <GPIO_enReadPinValue+0x80>
	{
		switch(Copy_pstPinConfig -> Port)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d01e      	beq.n	8000d8c <GPIO_enReadPinValue+0x60>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	dc28      	bgt.n	8000da4 <GPIO_enReadPinValue+0x78>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <GPIO_enReadPinValue+0x30>
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00c      	beq.n	8000d74 <GPIO_enReadPinValue+0x48>
 8000d5a:	e023      	b.n	8000da4 <GPIO_enReadPinValue+0x78>
		{
		case GPIO_PORTA:	*Copy_penPinValue = (((GPIOA -> IDR) >> (Copy_pstPinConfig -> PinNum)) & 0b1);	break;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <GPIO_enReadPinValue+0x90>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	7852      	ldrb	r2, [r2, #1]
 8000d64:	40d3      	lsrs	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e01a      	b.n	8000daa <GPIO_enReadPinValue+0x7e>

		case GPIO_PORTB:	*Copy_penPinValue = (((GPIOB -> IDR) >> (Copy_pstPinConfig -> PinNum)) & 0b1);	break;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <GPIO_enReadPinValue+0x94>)
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	7852      	ldrb	r2, [r2, #1]
 8000d7c:	40d3      	lsrs	r3, r2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e00e      	b.n	8000daa <GPIO_enReadPinValue+0x7e>

		case GPIO_PORTC:	*Copy_penPinValue = (((GPIOC -> IDR) >> (Copy_pstPinConfig -> PinNum)) & 0b1);	break;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <GPIO_enReadPinValue+0x98>)
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	7852      	ldrb	r2, [r2, #1]
 8000d94:	40d3      	lsrs	r3, r2
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e002      	b.n	8000daa <GPIO_enReadPinValue+0x7e>

		default:	Local_enErrorState = NOK;														break;
 8000da4:	2302      	movs	r3, #2
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	bf00      	nop
		switch(Copy_pstPinConfig -> Port)
 8000daa:	e001      	b.n	8000db0 <GPIO_enReadPinValue+0x84>
		}
	}
	else
	{
		Local_enErrorState = NULL_PTR_ERROR;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enErrorState;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <MCP2515_voidChipSelect>:
		.Port = GPIO_PORTA,
		.PullType = GPIO_NO_PULL
};

static void MCP2515_voidChipSelect(uint8_t Copy_u8State)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8State == SLAVE_CHOOSE)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d104      	bne.n	8000de2 <MCP2515_voidChipSelect+0x1a>
	{
		GPIO_enSetPinValue(&Main_stSS, GPIO_PIN_LOW);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MCP2515_voidChipSelect+0x30>)
 8000ddc:	f7ff ff3a 	bl	8000c54 <GPIO_enSetPinValue>
	}
	else if(Copy_u8State == SLAVE_RELEASE)
	{
		GPIO_enSetPinValue(&Main_stSS, GPIO_PIN_HIGH);
	}
}
 8000de0:	e006      	b.n	8000df0 <MCP2515_voidChipSelect+0x28>
	else if(Copy_u8State == SLAVE_RELEASE)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <MCP2515_voidChipSelect+0x28>
		GPIO_enSetPinValue(&Main_stSS, GPIO_PIN_HIGH);
 8000de8:	2101      	movs	r1, #1
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MCP2515_voidChipSelect+0x30>)
 8000dec:	f7ff ff32 	bl	8000c54 <GPIO_enSetPinValue>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000

08000dfc <MCP2515_u8ReadRegister>:

uint8_t MCP2515_u8ReadRegister(uint8_t Copy_u8Address)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ReadValue;

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff ffde 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_READ);
	MSPI_voidSendRecieveDataSync(INST_READ, &MCP2515_u8ReceiveData);
 8000e0c:	490b      	ldr	r1, [pc, #44]	; (8000e3c <MCP2515_u8ReadRegister+0x40>)
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 fa9c 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8Address);
	MSPI_voidSendRecieveDataSync(Copy_u8Address, &MCP2515_u8ReceiveData);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <MCP2515_u8ReadRegister+0x40>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fa97 	bl	800134c <MSPI_voidSendRecieveDataSync>

//	Local_u8ReadValue = SPI_u8Transceive(0);
	MSPI_voidSendRecieveDataSync(0, &Local_u8ReadValue);
 8000e1e:	f107 030f 	add.w	r3, r7, #15
 8000e22:	4619      	mov	r1, r3
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fa91 	bl	800134c <MSPI_voidSendRecieveDataSync>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ffcc 	bl	8000dc8 <MCP2515_voidChipSelect>

	return Local_u8ReadValue;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000027c 	.word	0x2000027c

08000e40 <MCP2515_voidWriteRegister>:

void MCP2515_voidWriteRegister(uint8_t Copy_u8Address, uint8_t Copy_u8Value)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ffb9 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_WRITE);
	MSPI_voidSendRecieveDataSync(INST_WRITE, &MCP2515_u8ReceiveData);
 8000e56:	490a      	ldr	r1, [pc, #40]	; (8000e80 <MCP2515_voidWriteRegister+0x40>)
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f000 fa77 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8Address);
	MSPI_voidSendRecieveDataSync(Copy_u8Address, &MCP2515_u8ReceiveData);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <MCP2515_voidWriteRegister+0x40>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fa72 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8Value);
	MSPI_voidSendRecieveDataSync(Copy_u8Value, &MCP2515_u8ReceiveData);
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	4905      	ldr	r1, [pc, #20]	; (8000e80 <MCP2515_voidWriteRegister+0x40>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fa6d 	bl	800134c <MSPI_voidSendRecieveDataSync>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff ffa8 	bl	8000dc8 <MCP2515_voidChipSelect>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000027c 	.word	0x2000027c

08000e84 <MCP2515_voidSetBitTiming>:

void MCP2515_voidSetBitTiming(uint8_t Copy_u8CNF1Value, uint8_t Copy_u8CNF2Value, uint8_t Copy_u8CNF3Value)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	4613      	mov	r3, r2
 8000e94:	717b      	strb	r3, [r7, #5]
	MCP2515_voidWriteRegister(CNF1, Copy_u8CNF1Value);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	202a      	movs	r0, #42	; 0x2a
 8000e9c:	f7ff ffd0 	bl	8000e40 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF2, Copy_u8CNF2Value);
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2029      	movs	r0, #41	; 0x29
 8000ea6:	f7ff ffcb 	bl	8000e40 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF3, Copy_u8CNF3Value);
 8000eaa:	797b      	ldrb	r3, [r7, #5]
 8000eac:	4619      	mov	r1, r3
 8000eae:	2028      	movs	r0, #40	; 0x28
 8000eb0:	f7ff ffc6 	bl	8000e40 <MCP2515_voidWriteRegister>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <MCP2515_voidReset>:

void MCP2515_voidReset(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ff81 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_RESET);
	MSPI_voidSendRecieveDataSync(INST_RESET, &MCP2515_u8ReceiveData);
 8000ec6:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <MCP2515_voidReset+0x1c>)
 8000ec8:	20c0      	movs	r0, #192	; 0xc0
 8000eca:	f000 fa3f 	bl	800134c <MSPI_voidSendRecieveDataSync>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff ff7a 	bl	8000dc8 <MCP2515_voidChipSelect>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000027c 	.word	0x2000027c

08000edc <MCP2515_voidChangeBits>:

void MCP2515_voidChangeBits(uint8_t Copy_u8RegAddress, uint8_t Copy_u8Mask, uint8_t Copy_u8Value)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	717b      	strb	r3, [r7, #5]
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff ff6a 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_BIT_MODIFY);
	MSPI_voidSendRecieveDataSync(INST_BIT_MODIFY, &MCP2515_u8ReceiveData);
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <MCP2515_voidChangeBits+0x4c>)
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f000 fa28 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8RegAddress);
	MSPI_voidSendRecieveDataSync(Copy_u8RegAddress, &MCP2515_u8ReceiveData);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	490a      	ldr	r1, [pc, #40]	; (8000f28 <MCP2515_voidChangeBits+0x4c>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fa23 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8Mask);
	MSPI_voidSendRecieveDataSync(Copy_u8Mask, &MCP2515_u8ReceiveData);
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <MCP2515_voidChangeBits+0x4c>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fa1e 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8Value);
	MSPI_voidSendRecieveDataSync(Copy_u8Value, &MCP2515_u8ReceiveData);
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	4905      	ldr	r1, [pc, #20]	; (8000f28 <MCP2515_voidChangeBits+0x4c>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fa19 	bl	800134c <MSPI_voidSendRecieveDataSync>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ff54 	bl	8000dc8 <MCP2515_voidChipSelect>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000027c 	.word	0x2000027c

08000f2c <MCP2515_voidSetMode>:

void MCP2515_voidSetMode(uint8_t Copy_u8Mode)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	MCP2515_voidChangeBits(CANCTRL, 0xE0, Copy_u8Mode << 5);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	21e0      	movs	r1, #224	; 0xe0
 8000f40:	200f      	movs	r0, #15
 8000f42:	f7ff ffcb 	bl	8000edc <MCP2515_voidChangeBits>
	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != Copy_u8Mode);
 8000f46:	bf00      	nop
 8000f48:	200e      	movs	r0, #14
 8000f4a:	f7ff ff57 	bl	8000dfc <MCP2515_u8ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d1f6      	bne.n	8000f48 <MCP2515_voidSetMode+0x1c>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MCP2515_voidInit>:

void MCP2515_voidInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	MSPI_voidInitMaster();
 8000f68:	f000 f9e4 	bl	8001334 <MSPI_voidInitMaster>
//	MSPI_voidSendRecieveDataSync(0, &MCP2515_u8ReceiveData);
//	MSPI_voidSendRecieveDataSync(0, &MCP2515_u8ReceiveData);
//	SPI_VidMasterInit();

	MCP2515_voidReset();
 8000f6c:	f7ff ffa6 	bl	8000ebc <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
 8000f70:	2184      	movs	r1, #132	; 0x84
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff ff64 	bl	8000e40 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
 8000f78:	bf00      	nop
 8000f7a:	200e      	movs	r0, #14
 8000f7c:	f7ff ff3e 	bl	8000dfc <MCP2515_u8ReadRegister>
 8000f80:	4603      	mov	r3, r0
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d1f7      	bne.n	8000f7a <MCP2515_voidInit+0x16>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), ((1 << 7) | (6 << 3) | (1)), 5);
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	21b1      	movs	r1, #177	; 0xb1
 8000f8e:	2080      	movs	r0, #128	; 0x80
 8000f90:	f7ff ff78 	bl	8000e84 <MCP2515_voidSetBitTiming>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ffc9 	bl	8000f2c <MCP2515_voidSetMode>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MCP2515_voidSendCANmsg>:



void MCP2515_voidSendCANmsg(MCP2515_CanMessage_t Copy_stMessage)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	463c      	mov	r4, r7
 8000fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff ff0b 	bl	8000dc8 <MCP2515_voidChipSelect>

	uint8_t Local_u8Counter;

	/*Send header and address*/
//	SPI_u8Transceive(INST_WRITE);
	MSPI_voidSendRecieveDataSync(INST_WRITE, &MCP2515_u8ReceiveData);
 8000fb2:	4929      	ldr	r1, [pc, #164]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f000 f9c9 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(TXB0CTRL);
	MSPI_voidSendRecieveDataSync(TXB0CTRL, &MCP2515_u8ReceiveData);
 8000fba:	4927      	ldr	r1, [pc, #156]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fbc:	2030      	movs	r0, #48	; 0x30
 8000fbe:	f000 f9c5 	bl	800134c <MSPI_voidSendRecieveDataSync>

	/*Setup message priority*/
//	SPI_u8Transceive(3);
	MSPI_voidSendRecieveDataSync(3, &MCP2515_u8ReceiveData);
 8000fc2:	4925      	ldr	r1, [pc, #148]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f9c1 	bl	800134c <MSPI_voidSendRecieveDataSync>

	/* Setup standard or extended identifier */
//	SPI_u8Transceive((uint8_t)(Copy_stMessage.id >> 3));
	MSPI_voidSendRecieveDataSync((uint8_t)(Copy_stMessage.id >> 3), &MCP2515_u8ReceiveData);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4921      	ldr	r1, [pc, #132]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f9ba 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive((uint8_t)(Copy_stMessage.id << 5));
	MSPI_voidSendRecieveDataSync((uint8_t)(Copy_stMessage.id << 5), &MCP2515_u8ReceiveData);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	491d      	ldr	r1, [pc, #116]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f9b2 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(0);
	MSPI_voidSendRecieveDataSync(0, &MCP2515_u8ReceiveData);
 8000fe8:	491b      	ldr	r1, [pc, #108]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f9ae 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(0);
	MSPI_voidSendRecieveDataSync(0, &MCP2515_u8ReceiveData);
 8000ff0:	4919      	ldr	r1, [pc, #100]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f9aa 	bl	800134c <MSPI_voidSendRecieveDataSync>

	/* Setup message length and RTR bit */
//	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));
	MSPI_voidSendRecieveDataSync((Copy_stMessage.length) | (Copy_stMessage.properties << 6), &MCP2515_u8ReceiveData);
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	b25a      	sxtb	r2, r3
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b25b      	sxtb	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4913      	ldr	r1, [pc, #76]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f99e 	bl	800134c <MSPI_voidSendRecieveDataSync>

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
 8001014:	e00b      	b.n	800102e <MCP2515_voidSendCANmsg+0x8e>
	{
//		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
		MSPI_voidSendRecieveDataSync(Copy_stMessage.data[Local_u8Counter], &MCP2515_u8ReceiveData);
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	3318      	adds	r3, #24
 800101a:	443b      	add	r3, r7
 800101c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f992 	bl	800134c <MSPI_voidSendRecieveDataSync>
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	3301      	adds	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	7dfa      	ldrb	r2, [r7, #23]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3ef      	bcc.n	8001016 <MCP2515_voidSendCANmsg+0x76>
	}

	/*Release the bus*/
	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fec6 	bl	8000dc8 <MCP2515_voidChipSelect>

	/*Send request to send*/
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fec3 	bl	8000dc8 <MCP2515_voidChipSelect>
//	SPI_u8Transceive(INST_RTS_TXB0);
	MSPI_voidSendRecieveDataSync(INST_RTS_TXB0, &MCP2515_u8ReceiveData);
 8001042:	4905      	ldr	r1, [pc, #20]	; (8001058 <MCP2515_voidSendCANmsg+0xb8>)
 8001044:	2081      	movs	r0, #129	; 0x81
 8001046:	f000 f981 	bl	800134c <MSPI_voidSendRecieveDataSync>
	MCP2515_voidChipSelect(SLAVE_RELEASE);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff febc 	bl	8000dc8 <MCP2515_voidChipSelect>
}
 8001050:	bf00      	nop
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	2000027c 	.word	0x2000027c

0800105c <MCP2515_voidSetRollover>:


void MCP2515_voidSetRollover(uint8_t Copy_u8Value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	MCP2515_voidChangeBits(RXB0CTRL, 1 << BUKT, Copy_u8Value << BUKT);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	2104      	movs	r1, #4
 8001070:	2060      	movs	r0, #96	; 0x60
 8001072:	f7ff ff33 	bl	8000edc <MCP2515_voidChangeBits>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MCP2515_voidSetMask>:

void MCP2515_voidSetMask(uint8_t Copy_u8MaskAddress, uint32_t Copy_u32MaskValue, uint8_t Copy_u8Extended)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fe99 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_WRITE);
	MSPI_voidSendRecieveDataSync(INST_WRITE, &MCP2515_u8ReceiveData);
 8001096:	4924      	ldr	r1, [pc, #144]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 8001098:	2002      	movs	r0, #2
 800109a:	f000 f957 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(Copy_u8MaskAddress);
	MSPI_voidSendRecieveDataSync(Copy_u8MaskAddress, &MCP2515_u8ReceiveData);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4921      	ldr	r1, [pc, #132]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f952 	bl	800134c <MSPI_voidSendRecieveDataSync>

	if(Copy_u8Extended)
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d025      	beq.n	80010fa <MCP2515_voidSetMask+0x7a>
	{
		/*Extended Address*/
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue >> 3));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue >> 3), &MCP2515_u8ReceiveData);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	491c      	ldr	r1, [pc, #112]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f948 	bl	800134c <MSPI_voidSendRecieveDataSync>
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue << 5) | (1<<3) | (uint32_t) (Copy_u32MaskValue >> 27));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue << 5) | (1<<3) | (uint32_t) (Copy_u32MaskValue >> 27), &MCP2515_u8ReceiveData);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	015b      	lsls	r3, r3, #5
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	0edb      	lsrs	r3, r3, #27
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4914      	ldr	r1, [pc, #80]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f938 	bl	800134c <MSPI_voidSendRecieveDataSync>
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue >> 19));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue >> 19), &MCP2515_u8ReceiveData);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	0cdb      	lsrs	r3, r3, #19
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4911      	ldr	r1, [pc, #68]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f931 	bl	800134c <MSPI_voidSendRecieveDataSync>
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue >> 11));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue >> 11), &MCP2515_u8ReceiveData);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	0adb      	lsrs	r3, r3, #11
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	490d      	ldr	r1, [pc, #52]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f92a 	bl	800134c <MSPI_voidSendRecieveDataSync>
 80010f8:	e00e      	b.n	8001118 <MCP2515_voidSetMask+0x98>
	}
	else
	{
		/*Standard Address*/
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue >> 3));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue >> 3), &MCP2515_u8ReceiveData);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4909      	ldr	r1, [pc, #36]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f922 	bl	800134c <MSPI_voidSendRecieveDataSync>
//		SPI_u8Transceive((uint8_t) (Copy_u32MaskValue << 5));
		MSPI_voidSendRecieveDataSync((uint8_t) (Copy_u32MaskValue << 5), &MCP2515_u8ReceiveData);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4905      	ldr	r1, [pc, #20]	; (8001128 <MCP2515_voidSetMask+0xa8>)
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f91a 	bl	800134c <MSPI_voidSendRecieveDataSync>
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fe55 	bl	8000dc8 <MCP2515_voidChipSelect>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000027c 	.word	0x2000027c

0800112c <MCP2515_voidReceiveInit>:



void MCP2515_voidReceiveInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	MSPI_voidInitMaster();
 8001130:	f000 f900 	bl	8001334 <MSPI_voidInitMaster>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
 8001134:	f7ff fec2 	bl	8000ebc <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
 8001138:	2184      	movs	r1, #132	; 0x84
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff fe80 	bl	8000e40 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != MCP2515_MODE_CONFG);
 8001140:	bf00      	nop
 8001142:	200e      	movs	r0, #14
 8001144:	f7ff fe5a 	bl	8000dfc <MCP2515_u8ReadRegister>
 8001148:	4603      	mov	r3, r0
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b04      	cmp	r3, #4
 8001150:	d1f7      	bne.n	8001142 <MCP2515_voidReceiveInit+0x16>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), (1 << 7) | (6 << 3) | (1), (5));
 8001152:	2205      	movs	r2, #5
 8001154:	21b1      	movs	r1, #177	; 0xb1
 8001156:	2080      	movs	r0, #128	; 0x80
 8001158:	f7ff fe94 	bl	8000e84 <MCP2515_voidSetBitTiming>

	//	MCP2515_VidSetBitTiming(0, 0xAC, 0x03);
	/*Accept all messages*/
	MCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1);
 800115c:	2201      	movs	r2, #1
 800115e:	2100      	movs	r1, #0
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff ff8d 	bl	8001080 <MCP2515_voidSetMask>
	MCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1);
 8001166:	2201      	movs	r2, #1
 8001168:	2100      	movs	r1, #0
 800116a:	2024      	movs	r0, #36	; 0x24
 800116c:	f7ff ff88 	bl	8001080 <MCP2515_voidSetMask>
	MCP2515_voidSetRollover(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff ff73 	bl	800105c <MCP2515_voidSetRollover>

	MCP2515_voidWriteRegister(CANINTE, 1<<RX0IE);
 8001176:	2101      	movs	r1, #1
 8001178:	202b      	movs	r0, #43	; 0x2b
 800117a:	f7ff fe61 	bl	8000e40 <MCP2515_voidWriteRegister>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fed4 	bl	8000f2c <MCP2515_voidSetMode>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <MCP2515_stReceiveCANmsg>:

uint8_t MCP2515_u8ReadBuffer[14];

MCP2515_CanMessage_t MCP2515_stReceiveCANmsg(void)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	MCP2515_CanMessage_t Local_stReceive = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
	uint8_t Local_u8Counter = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	77fb      	strb	r3, [r7, #31]

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fe10 	bl	8000dc8 <MCP2515_voidChipSelect>

//	SPI_u8Transceive(INST_READ);
	MSPI_voidSendRecieveDataSync(INST_READ, &MCP2515_u8ReceiveData);
 80011a8:	492c      	ldr	r1, [pc, #176]	; (800125c <MCP2515_stReceiveCANmsg+0xd4>)
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f8ce 	bl	800134c <MSPI_voidSendRecieveDataSync>
//	SPI_u8Transceive(RXB0CTRL);
	MSPI_voidSendRecieveDataSync(RXB0CTRL, &MCP2515_u8ReceiveData);
 80011b0:	492a      	ldr	r1, [pc, #168]	; (800125c <MCP2515_stReceiveCANmsg+0xd4>)
 80011b2:	2060      	movs	r0, #96	; 0x60
 80011b4:	f000 f8ca 	bl	800134c <MSPI_voidSendRecieveDataSync>


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	77fb      	strb	r3, [r7, #31]
 80011bc:	e009      	b.n	80011d2 <MCP2515_stReceiveCANmsg+0x4a>
	{
//		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
		MSPI_voidSendRecieveDataSync(0, &MCP2515_u8ReadBuffer[Local_u8Counter]);
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 80011c2:	4413      	add	r3, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f8c0 	bl	800134c <MSPI_voidSendRecieveDataSync>
	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	3301      	adds	r3, #1
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	2b0d      	cmp	r3, #13
 80011d6:	d9f2      	bls.n	80011be <MCP2515_stReceiveCANmsg+0x36>
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fdf5 	bl	8000dc8 <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
 80011de:	2100      	movs	r1, #0
 80011e0:	202c      	movs	r0, #44	; 0x2c
 80011e2:	f7ff fe2d 	bl	8000e40 <MCP2515_voidWriteRegister>

	Local_stReceive.id = MCP2515_u8ReadBuffer[1];
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	60fb      	str	r3, [r7, #12]
	Local_stReceive.id = Local_stReceive.id << 3;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	60fb      	str	r3, [r7, #12]
	uint8_t Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	77bb      	strb	r3, [r7, #30]
	Local_stReceive.id |= Local_u8Hegazy >> 5;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	7fba      	ldrb	r2, [r7, #30]
 80011fc:	0952      	lsrs	r2, r2, #5
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 8001206:	795b      	ldrb	r3, [r3, #5]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	b2db      	uxtb	r3, r3
 800120e:	763b      	strb	r3, [r7, #24]

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e00b      	b.n	800122e <MCP2515_stReceiveCANmsg+0xa6>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	1d9a      	adds	r2, r3, #6
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	4910      	ldr	r1, [pc, #64]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 800121e:	5c8a      	ldrb	r2, [r1, r2]
 8001220:	3320      	adds	r3, #32
 8001222:	443b      	add	r3, r7
 8001224:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	3301      	adds	r3, #1
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b07      	cmp	r3, #7
 8001232:	d9f0      	bls.n	8001216 <MCP2515_stReceiveCANmsg+0x8e>
	}

	Local_stReceive.properties = GET_BIT(MCP2515_u8ReadBuffer[0],3);
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MCP2515_stReceiveCANmsg+0xd8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	767b      	strb	r3, [r7, #25]

	return Local_stReceive;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	461c      	mov	r4, r3
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	bf00      	nop
 800125c:	2000027c 	.word	0x2000027c
 8001260:	20000280 	.word	0x20000280

08001264 <RCC_enAHB1_EnableClk>:

Error_t RCC_enHSE_Config();
Error_t RCC_enPLL_Config();

Error_t RCC_enAHB1_EnableClk(RCC_AHB1_Peripheral_t Copy_enPeripheral)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	Error_t Local_enErrorState = OK;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]

	switch(Copy_enPeripheral)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b16      	cmp	r3, #22
 8001276:	bf8c      	ite	hi
 8001278:	2201      	movhi	r2, #1
 800127a:	2200      	movls	r2, #0
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	2a00      	cmp	r2, #0
 8001280:	d116      	bne.n	80012b0 <RCC_enAHB1_EnableClk+0x4c>
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <RCC_enAHB1_EnableClk+0x60>)
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <RCC_enAHB1_EnableClk+0x4c>
	case CRC_EN:
	case FLITF_EN:
	case SRAM1_EN:
	case DMA1_EN:
	case DMA2_EN:
		RCC -> AHB1ENR |= (0b1 << Copy_enPeripheral);
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <RCC_enAHB1_EnableClk+0x64>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	4611      	mov	r1, r2
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <RCC_enAHB1_EnableClk+0x64>)
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80012ae:	e002      	b.n	80012b6 <RCC_enAHB1_EnableClk+0x52>

	default:
		Local_enErrorState = NOK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	73fb      	strb	r3, [r7, #15]
		break;
 80012b4:	bf00      	nop
	}
	return Local_enErrorState;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	0061909f 	.word	0x0061909f
 80012c8:	40023800 	.word	0x40023800

080012cc <RCC_enAPB2_EnableClk>:
	}
	return Local_enErrorState;
}

Error_t RCC_enAPB2_EnableClk(RCC_APB2_Peripheral_t Copy_enPeripheral)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	Error_t Local_enErrorState = OK;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]

	switch(Copy_enPeripheral)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	bf8c      	ite	hi
 80012e0:	2201      	movhi	r2, #1
 80012e2:	2200      	movls	r2, #0
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d116      	bne.n	8001318 <RCC_enAPB2_EnableClk+0x4c>
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <RCC_enAPB2_EnableClk+0x60>)
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00a      	beq.n	8001318 <RCC_enAPB2_EnableClk+0x4c>
	case SPI4_EN:
	case SYSCFG_EN:
	case TIM9_EN:
	case TIM10_EN:
	case TIM11_EN:
		RCC -> APB2ENR |= (0b1 << Copy_enPeripheral);
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <RCC_enAPB2_EnableClk+0x64>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	4611      	mov	r1, r2
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <RCC_enAPB2_EnableClk+0x64>)
 8001312:	430b      	orrs	r3, r1
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8001316:	e002      	b.n	800131e <RCC_enAPB2_EnableClk+0x52>

	default:
		Local_enErrorState = NOK;
 8001318:	2302      	movs	r3, #2
 800131a:	73fb      	strb	r3, [r7, #15]
		break;
 800131c:	bf00      	nop
	}
	return Local_enErrorState;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	00077931 	.word	0x00077931
 8001330:	40023800 	.word	0x40023800

08001334 <MSPI_voidInitMaster>:
void MSPI_voidInitSlave(void)
{
	SPI1 -> CR1 = 0b0000000001000000;
}
void MSPI_voidInitMaster(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	SPI1 -> CR1 = 0b0000001101010100;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <MSPI_voidInitMaster+0x14>)
 800133a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40013000 	.word	0x40013000

0800134c <MSPI_voidSendRecieveDataSync>:

void MSPI_voidSendRecieveDataSync(uint8_t Copy_u8TransmitData,uint8_t* Copy_u8RecievedData)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
	/*Clear for slave select pin*/
//	GPIO_enSetPinValue(&MSPI_stSSPin, GPIO_PIN_LOW);

	/*Send Data*/
//	if(GET_BIT(SPI1 -> SR, TXE))
	while(!(GET_BIT(SPI1 -> SR, TXE)));
 8001358:	bf00      	nop
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MSPI_voidSendRecieveDataSync+0x44>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f9      	beq.n	800135a <MSPI_voidSendRecieveDataSync+0xe>
	SPI1 -> DR = Copy_u8TransmitData;
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <MSPI_voidSendRecieveDataSync+0x44>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	60d3      	str	r3, [r2, #12]

//	while(GET_BIT(SPI1->SR , BSY));

//	if(GET_BIT(SPI1 -> SR, RXNE))
	while(!(GET_BIT(SPI1 -> SR, RXNE)));
 800136c:	bf00      	nop
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MSPI_voidSendRecieveDataSync+0x44>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f9      	beq.n	800136e <MSPI_voidSendRecieveDataSync+0x22>
	*Copy_u8RecievedData = SPI1 -> DR;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <MSPI_voidSendRecieveDataSync+0x44>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	701a      	strb	r2, [r3, #0]

	/*Return for the received data*/

	/*Set Slave select pin*/
//	GPIO_enSetPinValue(&MSPI_stSSPin, GPIO_PIN_HIGH);
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40013000 	.word	0x40013000

08001394 <SYSTICK_enInit>:
static const SYSTICK_Config_t *SYSTICK_stConfig;
static uint8_t SYSTICK_u8BusyFlag = IDLE;
static void (*SYSTICK_pvCallBackFunction)(void) = NULL;

Error_t SYSTICK_enInit(const SYSTICK_Config_t *Copy_stConfig)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	/*Define Error State*/
	Error_t Local_enErrorState = OK;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]

	/*Validate the pointer to the struct*/
	if(Copy_stConfig != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d017      	beq.n	80013d6 <SYSTICK_enInit+0x42>
	{
		/* Set the interrupt configuration */
		SYSTICK -> CTRL.TICKINT = Copy_stConfig -> Exception_Request;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <SYSTICK_enInit+0x54>)
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f361 0341 	bfi	r3, r1, #1, #1
 80013b8:	6013      	str	r3, [r2, #0]

		/* Set the clock source configuration */
		SYSTICK -> CTRL.CLKSOURCE = Copy_stConfig -> Prescaler;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SYSTICK_enInit+0x54>)
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	f361 0382 	bfi	r3, r1, #2, #1
 80013cc:	6013      	str	r3, [r2, #0]

		/* Make the pointer to the configuration to sturct as global */
		SYSTICK_stConfig = Copy_stConfig;
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <SYSTICK_enInit+0x58>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e001      	b.n	80013da <SYSTICK_enInit+0x46>
	}
	else
	{
		Local_enErrorState = NULL_PTR_ERROR;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
	}

	/*Return Error State*/
	return Local_enErrorState;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010
 80013ec:	20000290 	.word	0x20000290

080013f0 <SysTick_Handler>:
	}

	return Local_enErrorState;
}
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if(SYSTICK_pvCallBackFunction != NULL)
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Handler+0x18>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <SysTick_Handler+0x12>
	{
		SYSTICK_pvCallBackFunction();
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <SysTick_Handler+0x18>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4798      	blx	r3
	}
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000294 	.word	0x20000294

0800140c <main>:
			0.0625
		}
};

int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a8      	sub	sp, #160	; 0xa0
 8001410:	af00      	add	r7, sp, #0
	/*Initialize the filters*/
	FIR_voidFilterInit(&Main_stLDRFilter);
 8001412:	48bc      	ldr	r0, [pc, #752]	; (8001704 <main+0x2f8>)
 8001414:	f7ff f982 	bl	800071c <FIR_voidFilterInit>
	FIR_voidFilterInit(&Main_stRearDistanceFilter);
 8001418:	48bb      	ldr	r0, [pc, #748]	; (8001708 <main+0x2fc>)
 800141a:	f7ff f97f 	bl	800071c <FIR_voidFilterInit>
	FIR_voidFilterInit(&Main_stFrontDistanceFilter);
 800141e:	48bb      	ldr	r0, [pc, #748]	; (800170c <main+0x300>)
 8001420:	f7ff f97c 	bl	800071c <FIR_voidFilterInit>
	FIR_voidFilterInit(&Main_stTemperatureFilter);
 8001424:	48ba      	ldr	r0, [pc, #744]	; (8001710 <main+0x304>)
 8001426:	f7ff f979 	bl	800071c <FIR_voidFilterInit>

	/*Initialize systick peripheral*/
	SYSTICK_Config_t Local_stSystickConfig =
 800142a:	2300      	movs	r3, #0
 800142c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8001436:	2310      	movs	r3, #16
 8001438:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	{
			.Exception_Request = DISABLE,
			.Prescaler = SYSTICK_AHB_BY_8,
			.ClkFreq = 16u
	};
	SYSTICK_enInit(&Local_stSystickConfig);
 800143c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffa7 	bl	8001394 <SYSTICK_enInit>

	/*Open the RCC for GPIOA and SPI1*/
	RCC_enAHB1_EnableClk(GPIOA_EN);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff0c 	bl	8001264 <RCC_enAHB1_EnableClk>
	RCC_enAPB2_EnableClk(SPI1_EN);
 800144c:	200c      	movs	r0, #12
 800144e:	f7ff ff3d 	bl	80012cc <RCC_enAPB2_EnableClk>

	/*Initialize GPIO SPI pins*/
	GPIO_enPinInit(&Main_stTFT_CLK);
 8001452:	48b0      	ldr	r0, [pc, #704]	; (8001714 <main+0x308>)
 8001454:	f7ff f9ce 	bl	80007f4 <GPIO_enPinInit>
	GPIO_enPinInit(&Main_stTFT_MISO);
 8001458:	48af      	ldr	r0, [pc, #700]	; (8001718 <main+0x30c>)
 800145a:	f7ff f9cb 	bl	80007f4 <GPIO_enPinInit>
	GPIO_enPinInit(&Main_stTFT_MOSI);
 800145e:	48af      	ldr	r0, [pc, #700]	; (800171c <main+0x310>)
 8001460:	f7ff f9c8 	bl	80007f4 <GPIO_enPinInit>
	GPIO_enPinInit(&Main_stSS);
 8001464:	48ae      	ldr	r0, [pc, #696]	; (8001720 <main+0x314>)
 8001466:	f7ff f9c5 	bl	80007f4 <GPIO_enPinInit>
	GPIO_enPinInit(&Main_stMCPInterrupt);
 800146a:	48ae      	ldr	r0, [pc, #696]	; (8001724 <main+0x318>)
 800146c:	f7ff f9c2 	bl	80007f4 <GPIO_enPinInit>

	/*Initialize MCP for sending and receiving*/
	MCP2515_voidInit();
 8001470:	f7ff fd78 	bl	8000f64 <MCP2515_voidInit>
	MCP2515_voidReceiveInit();
 8001474:	f7ff fe5a 	bl	800112c <MCP2515_voidReceiveInit>

	/*Define a temporary message to receive data into it*/
	MCP2515_CanMessage_t Local_stTempMessage =
 8001478:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
	{
			.properties = 0u
	};

	/*Define filtered LDR reading CAN message*/
	MCP2515_CanMessage_t Local_stFilteredLDR =
 8001486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	2331      	movs	r3, #49	; 0x31
 8001496:	653b      	str	r3, [r7, #80]	; 0x50
 8001498:	2302      	movs	r3, #2
 800149a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			.length = 2u,
			.id = 0x31
	};

	/*Define filtered temperature CAN message*/
	MCP2515_CanMessage_t Local_stFilteredTemperature =
 800149e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	2333      	movs	r3, #51	; 0x33
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			.length = 1u,
			.id = 0x33
	};

	/*Define filtered front distance CAN message*/
	MCP2515_CanMessage_t Local_stFilteredFrontDistance =
 80014b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	2335      	movs	r3, #53	; 0x35
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
 80014c8:	2302      	movs	r3, #2
 80014ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			.length = 2u,
			.id = 0x35
	};

	/*Define filtered rear distance CAN message*/
	MCP2515_CanMessage_t Local_stFilteredRearDistance =
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	2337      	movs	r3, #55	; 0x37
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	2302      	movs	r3, #2
 80014e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			.length = 2u,
			.id = 0x37
	};

	/*Define speed CAN message*/
	MCP2515_CanMessage_t Local_stSpeed =
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	2315      	movs	r3, #21
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	2301      	movs	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
	{
			.properties = 0u,
			.length = 1u,
			.id = 0x15
	};
	Local_stSpeed.data[0] = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	753b      	strb	r3, [r7, #20]
	float Local_f32FilteredTemperature;
	uint8_t Local_u8FilteredTemperature;

	/*Define rear distance variable before filter*/
	uint16_t Local_u16RearDistanceBefore;
	uint16_t Local_u16PreviousRearDistanceBefore = 0u;
 8001500:	2300      	movs	r3, #0
 8001502:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	float Local_f32FilteredRearDistance;
	uint16_t Local_u16FilteredRearDistance;

	/*Define front distance variable before filter*/
	uint16_t Local_u16FrontDistanceBefore;
	uint16_t Local_u16PreviousFrontDistanceBefore = 0u;
 8001506:	2300      	movs	r3, #0
 8001508:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	uint16_t Local_u16FilteredFrontDistance;

	/*Define GPIO pin value variable for the MCP2515 interrupt pin*/
	GPIO_PinValue_t Local_enInterrupt;
	/*Define flag to go on when the MCP capture CAN message*/
	uint8_t Local_u8SamplingFlag = 0u;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	while(1)
	{
		/*Check the interrupt pin from MCP2515*/
		GPIO_enReadPinValue(&Main_stMCPInterrupt, &Local_enInterrupt);
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	4619      	mov	r1, r3
 8001516:	4883      	ldr	r0, [pc, #524]	; (8001724 <main+0x318>)
 8001518:	f7ff fc08 	bl	8000d2c <GPIO_enReadPinValue>
//		MCP2515_voidSendCANmsg(Local_stFilteredRearDistance);

		/*If the MCP2515 detect CAN message, Read this message*/
		if(Local_enInterrupt == GPIO_PIN_LOW)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <main+0x126>
		{
			/*Read the message received*/
			Local_stTempMessage = MCP2515_stReceiveCANmsg();
 8001522:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe2e 	bl	8001188 <MCP2515_stReceiveCANmsg>

			/*Rise the sampling flag*/
			Local_u8SamplingFlag = 1u;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		/*If MCP2515 received data*/
		if(Local_u8SamplingFlag == 1u)
 8001532:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001536:	2b01      	cmp	r3, #1
 8001538:	d1eb      	bne.n	8001512 <main+0x106>
		{
			/*Search for which message has been received*/
			if(Local_stTempMessage.id == MAIN_LDR_MESSAGE_ID)
 800153a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153c:	2b10      	cmp	r3, #16
 800153e:	d15e      	bne.n	80015fe <main+0x1f2>
			{
				/*Validate the message length*/
				if(Local_stTempMessage.length == 6u)
 8001540:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001544:	2b06      	cmp	r3, #6
 8001546:	f040 813b 	bne.w	80017c0 <main+0x3b4>
				{
					/*Reconstruct the LDR readings*/
					Local_u16LDRReadingsBeforeArr[0] = (uint16_t) Local_stTempMessage.data[0];
 800154a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800154e:	b29b      	uxth	r3, r3
 8001550:	813b      	strh	r3, [r7, #8]
					Local_u16LDRReadingsBeforeArr[0] |= (((uint16_t) Local_stTempMessage.data[1]) << 8u);
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	b21a      	sxth	r2, r3
 8001556:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	813b      	strh	r3, [r7, #8]
					Local_u16LDRReadingsBeforeArr[1] = (uint16_t) Local_stTempMessage.data[2];
 8001566:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800156a:	b29b      	uxth	r3, r3
 800156c:	817b      	strh	r3, [r7, #10]
					Local_u16LDRReadingsBeforeArr[1] |= (((uint16_t) Local_stTempMessage.data[3]) << 8u);
 800156e:	897b      	ldrh	r3, [r7, #10]
 8001570:	b21a      	sxth	r2, r3
 8001572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29b      	uxth	r3, r3
 8001580:	817b      	strh	r3, [r7, #10]
					Local_u16LDRReadingsBeforeArr[2] = (uint16_t) Local_stTempMessage.data[4];
 8001582:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001586:	b29b      	uxth	r3, r3
 8001588:	81bb      	strh	r3, [r7, #12]
					Local_u16LDRReadingsBeforeArr[2] |= (((uint16_t) Local_stTempMessage.data[5]) << 8u);
 800158a:	89bb      	ldrh	r3, [r7, #12]
 800158c:	b21a      	sxth	r2, r3
 800158e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	81bb      	strh	r3, [r7, #12]

					/*Calculate the average from the 3 LDR sensors*/
					Local_u16LDRReadingsAverage = (Local_u16LDRReadingsBeforeArr[0] + Local_u16LDRReadingsBeforeArr[1] + Local_u16LDRReadingsBeforeArr[2]) / 3UL;
 800159e:	893b      	ldrh	r3, [r7, #8]
 80015a0:	461a      	mov	r2, r3
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	4413      	add	r3, r2
 80015a6:	89ba      	ldrh	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <main+0x31c>)
 80015ae:	fba3 2302 	umull	r2, r3, r3, r2
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

					/*Update the filter samples*/
					Local_f32FilteredLDRReading = FIR_f32FilterUpdate(&Main_stLDRFilter, Local_u16LDRReadingsAverage);
 80015b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe febf 	bl	8000340 <__aeabi_ui2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4619      	mov	r1, r3
 80015c6:	484f      	ldr	r0, [pc, #316]	; (8001704 <main+0x2f8>)
 80015c8:	f7ff f8d0 	bl	800076c <FIR_f32FilterUpdate>
 80015cc:	67b8      	str	r0, [r7, #120]	; 0x78
					Local_u16FilteredLDRReading = (uint16_t) Local_f32FilteredLDRReading;
 80015ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015d0:	f7ff f884 	bl	80006dc <__aeabi_f2uiz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

					/*Construct the filtered LDR reading message*/
					Local_stFilteredLDR.data[0] = (uint8_t) Local_u16FilteredLDRReading;
 80015da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					Local_stFilteredLDR.data[1] = (uint8_t) (Local_u16FilteredLDRReading >> 8u);
 80015e4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

					/*Send the CAN message*/
					MCP2515_voidSendCANmsg(Local_stFilteredLDR);
 80015f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f8:	f7ff fcd2 	bl	8000fa0 <MCP2515_voidSendCANmsg>
 80015fc:	e0e0      	b.n	80017c0 <main+0x3b4>
				}
			}
			else if(Local_stTempMessage.id == MAIN_TEMPERATURE_MESSAGE_ID)
 80015fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001600:	2b14      	cmp	r3, #20
 8001602:	d133      	bne.n	800166c <main+0x260>
			{
				/*Validate the message length*/
				if(Local_stTempMessage.length == 1u)
 8001604:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 80d9 	bne.w	80017c0 <main+0x3b4>
				{
					/*Reconstruct the temperature reading*/
					Local_u8TemperatureBefore = Local_stTempMessage.data[0];
 800160e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001612:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

					/*Update the filter samples*/
					Local_f32FilteredTemperature = FIR_f32FilterUpdate(&Main_stTemperatureFilter, Local_u8TemperatureBefore);
 8001616:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fe90 	bl	8000340 <__aeabi_ui2f>
 8001620:	4603      	mov	r3, r0
 8001622:	4619      	mov	r1, r3
 8001624:	483a      	ldr	r0, [pc, #232]	; (8001710 <main+0x304>)
 8001626:	f7ff f8a1 	bl	800076c <FIR_f32FilterUpdate>
 800162a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					Local_u8FilteredTemperature = (uint8_t) Local_f32FilteredTemperature;
 800162e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001632:	f7ff f853 	bl	80006dc <__aeabi_f2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

					/*Construct the filtered temperature reading message*/
					Local_stFilteredTemperature.data[0] = Local_u8FilteredTemperature;
 800163c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001640:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

					/*Send the CAN message*/
					MCP2515_voidSendCANmsg(Local_stFilteredTemperature);
 8001644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	f7ff fca9 	bl	8000fa0 <MCP2515_voidSendCANmsg>

					/*Update the speed*/
					Local_stSpeed.data[0] += 5;
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	3305      	adds	r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	753b      	strb	r3, [r7, #20]
					if(Local_stSpeed.data[0] > 140)
 8001656:	7d3b      	ldrb	r3, [r7, #20]
 8001658:	2b8c      	cmp	r3, #140	; 0x8c
 800165a:	d901      	bls.n	8001660 <main+0x254>
					{
						Local_stSpeed.data[0] = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	753b      	strb	r3, [r7, #20]
					}

					/*Send the CAN message*/
					MCP2515_voidSendCANmsg(Local_stSpeed);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001666:	f7ff fc9b 	bl	8000fa0 <MCP2515_voidSendCANmsg>
 800166a:	e0a9      	b.n	80017c0 <main+0x3b4>
				}
			}
			else if(Local_stTempMessage.id == MAIN_FRONT_DISTANCE_MESSAGE_ID)
 800166c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800166e:	2b20      	cmp	r3, #32
 8001670:	d15c      	bne.n	800172c <main+0x320>
			{
				/*Validate the message length*/
				if(Local_stTempMessage.length == 2u)
 8001672:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001676:	2b02      	cmp	r3, #2
 8001678:	f040 80a2 	bne.w	80017c0 <main+0x3b4>
				{
					/*Reconstruct the front distance*/
					Local_u16FrontDistanceBefore = (uint16_t) Local_stTempMessage.data[0];
 800167c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001680:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					Local_u16FrontDistanceBefore |= (((uint16_t) Local_stTempMessage.data[1]) << 8u);
 8001684:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

					/*Correct the front distance*/
					if(Local_u16FrontDistanceBefore > 300u || Local_u16FrontDistanceBefore == 0)
 8001698:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800169c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016a0:	d803      	bhi.n	80016aa <main+0x29e>
 80016a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <main+0x2a6>
					{
						Local_u16FrontDistanceBefore = Local_u16PreviousFrontDistanceBefore;
 80016aa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80016ae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					}
					Local_u16PreviousFrontDistanceBefore = Local_u16FrontDistanceBefore;
 80016b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80016b6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

					/*Update the filter samples*/
					Local_f32FilteredFrontDistance = FIR_f32FilterUpdate(&Main_stFrontDistanceFilter, Local_u16FrontDistanceBefore);
 80016ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fe3e 	bl	8000340 <__aeabi_ui2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <main+0x300>)
 80016ca:	f7ff f84f 	bl	800076c <FIR_f32FilterUpdate>
 80016ce:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					Local_u16FilteredFrontDistance = (uint16_t) Local_f32FilteredFrontDistance;
 80016d2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80016d6:	f7ff f801 	bl	80006dc <__aeabi_f2uiz>
 80016da:	4603      	mov	r3, r0
 80016dc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

					/*Construct the filtered front distance message*/
					Local_stFilteredFrontDistance.data[0] = (uint8_t) Local_u16FilteredFrontDistance;
 80016e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					Local_stFilteredFrontDistance.data[1] = (uint8_t) (Local_u16FilteredFrontDistance >> 8u);
 80016ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

					/*Send the CAN message*/
					MCP2515_voidSendCANmsg(Local_stFilteredFrontDistance);
 80016f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fe:	f7ff fc4f 	bl	8000fa0 <MCP2515_voidSendCANmsg>
 8001702:	e05d      	b.n	80017c0 <main+0x3b4>
 8001704:	20000030 	.word	0x20000030
 8001708:	200001d4 	.word	0x200001d4
 800170c:	20000148 	.word	0x20000148
 8001710:	200000bc 	.word	0x200000bc
 8001714:	20000008 	.word	0x20000008
 8001718:	20000018 	.word	0x20000018
 800171c:	20000010 	.word	0x20000010
 8001720:	20000020 	.word	0x20000020
 8001724:	20000028 	.word	0x20000028
 8001728:	aaaaaaab 	.word	0xaaaaaaab
				}
			}
			else if(Local_stTempMessage.id == MAIN_REAR_DISTANCE_MESSAGE_ID)
 800172c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800172e:	2b12      	cmp	r3, #18
 8001730:	d146      	bne.n	80017c0 <main+0x3b4>
			{
				/*Validate the message length*/
				if(Local_stTempMessage.length == 2u)
 8001732:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001736:	2b02      	cmp	r3, #2
 8001738:	d142      	bne.n	80017c0 <main+0x3b4>
				{
					/*Reconstruct the front distance*/
					Local_u16RearDistanceBefore = (uint16_t) Local_stTempMessage.data[0];
 800173a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800173e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					Local_u16RearDistanceBefore |= (((uint16_t) Local_stTempMessage.data[1]) << 8u);
 8001742:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800174e:	4313      	orrs	r3, r2
 8001750:	b21b      	sxth	r3, r3
 8001752:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

					/*Correct the rear distance*/
					if(Local_u16RearDistanceBefore > 300u || Local_u16RearDistanceBefore == 0)
 8001756:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800175a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800175e:	d803      	bhi.n	8001768 <main+0x35c>
 8001760:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001764:	2b00      	cmp	r3, #0
 8001766:	d103      	bne.n	8001770 <main+0x364>
					{
						Local_u16RearDistanceBefore = Local_u16PreviousRearDistanceBefore;
 8001768:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800176c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					}
					Local_u16PreviousRearDistanceBefore = Local_u16RearDistanceBefore;
 8001770:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001774:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

					/*Update the filter samples*/
					Local_f32FilteredRearDistance = FIR_f32FilterUpdate(&Main_stRearDistanceFilter, Local_u16RearDistanceBefore);
 8001778:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fddf 	bl	8000340 <__aeabi_ui2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4619      	mov	r1, r3
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <main+0x3bc>)
 8001788:	f7fe fff0 	bl	800076c <FIR_f32FilterUpdate>
 800178c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					Local_u16FilteredRearDistance = (uint16_t) Local_f32FilteredRearDistance;
 8001790:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001794:	f7fe ffa2 	bl	80006dc <__aeabi_f2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

					/*Construct the filtered front distance message*/
					Local_stFilteredRearDistance.data[0] = (uint8_t) Local_u16FilteredRearDistance;
 800179e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					Local_stFilteredRearDistance.data[1] = (uint8_t) (Local_u16FilteredRearDistance >> 8u);
 80017a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

					/*Send the CAN message*/
					MCP2515_voidSendCANmsg(Local_stFilteredRearDistance);
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017bc:	f7ff fbf0 	bl	8000fa0 <MCP2515_voidSendCANmsg>
				}
			}

			Local_u8SamplingFlag = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		GPIO_enReadPinValue(&Main_stMCPInterrupt, &Local_enInterrupt);
 80017c6:	e6a4      	b.n	8001512 <main+0x106>
 80017c8:	200001d4 	.word	0x200001d4

080017cc <Queue_voidCircularArrayQueueInit>:
 * @brief 					Function to initialize a queue from a circular array.
 * @param Copy_ps32FrontPtr Pointer to the index of the front element of the queue.
 * @param Copy_ps32RearPtr 	Pointer to the index of the rear element of the queue.
 */
void Queue_voidCircularArrayQueueInit(int *Copy_ps32FrontPtr, int *Copy_ps32RearPtr)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	/*Initializing Front and Rear*/
	*Copy_ps32FrontPtr = -1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	601a      	str	r2, [r3, #0]
	*Copy_ps32RearPtr = -1;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <Queue_s32CircularArrayQueueIsFull>:
 * @param Copy_s32Rear	Index of the rear element of the queue.
 * @param Copy_s32Size	Size of the queue.
 * @return				Checking Result.
 */
int Queue_s32CircularArrayQueueIsFull(int Copy_s32Front, int Copy_s32Rear, int Copy_s32Size)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	/*Defining Variables*/
	int Local_s32IsFull;

	/*Check if the Queue is full*/
	if(((Copy_s32Front == 0) && (Copy_s32Rear == (Copy_s32Size - 1))) || (Copy_s32Front == Copy_s32Rear + 1))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <Queue_s32CircularArrayQueueIsFull+0x1c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3b01      	subs	r3, #1
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	d004      	beq.n	8001816 <Queue_s32CircularArrayQueueIsFull+0x26>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3301      	adds	r3, #1
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	429a      	cmp	r2, r3
 8001814:	d102      	bne.n	800181c <Queue_s32CircularArrayQueueIsFull+0x2c>
	{
		Local_s32IsFull = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e001      	b.n	8001820 <Queue_s32CircularArrayQueueIsFull+0x30>
	}
	else
	{
		Local_s32IsFull = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
	}

	/*Return State of the Queue*/
	return Local_s32IsFull;
 8001820:	697b      	ldr	r3, [r7, #20]
}
 8001822:	4618      	mov	r0, r3
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <Queue_s32CircularArrayQueueIsEmpty>:

int Queue_s32CircularArrayQueueIsEmpty(int Front)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	/*Defining Variables*/
	int IsEmpty;

	/*Check if the Queue is full*/
	if(Front == -1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183a:	d102      	bne.n	8001842 <Queue_s32CircularArrayQueueIsEmpty+0x16>
	{
		IsEmpty = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e001      	b.n	8001846 <Queue_s32CircularArrayQueueIsEmpty+0x1a>
	}
	else
	{
		IsEmpty = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
	}

	/*Return State of the Queue*/
	return IsEmpty;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <Queue_voidCircularArrayQueueEnqueue>:

void Queue_voidCircularArrayQueueEnqueue(int *FrontPtr, int *RearPtr, int Size, float *QueueArray, float NewElement)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
	/*Defining Variables*/
	int IsFull = Queue_s32CircularArrayQueueIsFull(*FrontPtr, *RearPtr, Size);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff ffc0 	bl	80017f0 <Queue_s32CircularArrayQueueIsFull>
 8001870:	6178      	str	r0, [r7, #20]

	/*Check is the Queue is full*/
	if(IsFull == 1)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d01d      	beq.n	80018b4 <Queue_voidCircularArrayQueueEnqueue+0x62>
		/*Do nothing*/
	}
	else
	{
		/*If it is the first insertion*/
		if(*FrontPtr == -1)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d102      	bne.n	8001888 <Queue_voidCircularArrayQueueEnqueue+0x36>
		{
			/*Move the two pointers*/
			*FrontPtr = 0;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
		}

		/*If we reached the end of the array but still there is a place*/
		if(*RearPtr == (Size - 1))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	429a      	cmp	r2, r3
 8001892:	d103      	bne.n	800189c <Queue_voidCircularArrayQueueEnqueue+0x4a>
		{
			*RearPtr = 0;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e004      	b.n	80018a6 <Queue_voidCircularArrayQueueEnqueue+0x54>
		}
		else
		{
			*RearPtr = *RearPtr + 1;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	601a      	str	r2, [r3, #0]
		}

		/*Enqueue Operation*/
		QueueArray[*RearPtr] = NewElement;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	601a      	str	r2, [r3, #0]
	}
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <Queue_voidCircularArrayQueueDequeueEnqueue>:

void Queue_voidCircularArrayQueueDequeueEnqueue(int *FrontPtr, int *RearPtr, int Size, float *QueueArray, float NewElement)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
	/*Defining Variables*/
	int IsFull = Queue_s32CircularArrayQueueIsFull(*FrontPtr, *RearPtr, Size);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff ff8b 	bl	80017f0 <Queue_s32CircularArrayQueueIsFull>
 80018da:	6178      	str	r0, [r7, #20]

	/*Check is the Queue is full*/
	if(IsFull == 1)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d105      	bne.n	80018ee <Queue_voidCircularArrayQueueDequeueEnqueue+0x32>
	{
		/*Dequeue an element to empty a place*/
		Queue_s32CircularArrayQueueDequeue(FrontPtr, RearPtr, Size, QueueArray);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f822 	bl	8001932 <Queue_s32CircularArrayQueueDequeue>
	}

	/*Enqueue the new element*/

		/*If it is the first insertion*/
		if(*FrontPtr == -1)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d102      	bne.n	80018fe <Queue_voidCircularArrayQueueDequeueEnqueue+0x42>
		{
			/*Move the two pointers*/
			*FrontPtr = 0;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
		}

		/*If we reached the end of the array but still there is a place*/
		if(*RearPtr == (Size - 1))
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3b01      	subs	r3, #1
 8001906:	429a      	cmp	r2, r3
 8001908:	d103      	bne.n	8001912 <Queue_voidCircularArrayQueueDequeueEnqueue+0x56>
		{
			*RearPtr = 0;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e004      	b.n	800191c <Queue_voidCircularArrayQueueDequeueEnqueue+0x60>
		}
		else
		{
			*RearPtr = *RearPtr + 1;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	601a      	str	r2, [r3, #0]
		}

		/*Enqueue Operation*/
		QueueArray[*RearPtr] = NewElement;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <Queue_s32CircularArrayQueueDequeue>:

int Queue_s32CircularArrayQueueDequeue(int *FrontPtr, int *RearPtr, int Size, float *QueueArray)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
	/*Defining Variables*/
	int IsEmpty = Queue_s32CircularArrayQueueIsEmpty(*FrontPtr);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff71 	bl	800182c <Queue_s32CircularArrayQueueIsEmpty>
 800194a:	6138      	str	r0, [r7, #16]
	float FrontElement = 0;
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	617b      	str	r3, [r7, #20]

	/*Check if the Queue is empty*/
	if(IsEmpty == 1)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d024      	beq.n	80019a2 <Queue_s32CircularArrayQueueDequeue+0x70>
		/*Do nothing*/
	}
	else
	{
		/*Dequeue Operation*/
		FrontElement = QueueArray[*FrontPtr];
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	617b      	str	r3, [r7, #20]

		/*If there is only one element in the array*/
		if((*FrontPtr) == (*RearPtr))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d108      	bne.n	8001984 <Queue_s32CircularArrayQueueDequeue+0x52>
		{
			/*Reset front and rear to the initial condition*/
			*FrontPtr = -1;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	601a      	str	r2, [r3, #0]
			*RearPtr = -1;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e00e      	b.n	80019a2 <Queue_s32CircularArrayQueueDequeue+0x70>
		}
		/*If we reached the end of the array but still there are elements*/
		else if(*FrontPtr == (Size - 1))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	429a      	cmp	r2, r3
 800198e:	d103      	bne.n	8001998 <Queue_s32CircularArrayQueueDequeue+0x66>
		{
			*FrontPtr = 0;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e004      	b.n	80019a2 <Queue_s32CircularArrayQueueDequeue+0x70>
		}
		else
		{
			*FrontPtr = *FrontPtr + 1;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]
		}
	}

	/*Return the First element of Queue*/
	return FrontElement;
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7fe fe74 	bl	8000690 <__aeabi_f2iz>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019e2:	f000 f811 	bl	8001a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff fd11 	bl	800140c <main>

080019ea <LoopForever>:

LoopForever:
  b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   r0, =_estack
 80019ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80019f8:	08001a70 	.word	0x08001a70
  ldr r2, =_sbss
 80019fc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8001a00:	20000298 	.word	0x20000298

08001a04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <__libc_init_array>:
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	4d0d      	ldr	r5, [pc, #52]	; (8001a40 <__libc_init_array+0x38>)
 8001a0c:	4c0d      	ldr	r4, [pc, #52]	; (8001a44 <__libc_init_array+0x3c>)
 8001a0e:	1b64      	subs	r4, r4, r5
 8001a10:	10a4      	asrs	r4, r4, #2
 8001a12:	2600      	movs	r6, #0
 8001a14:	42a6      	cmp	r6, r4
 8001a16:	d109      	bne.n	8001a2c <__libc_init_array+0x24>
 8001a18:	4d0b      	ldr	r5, [pc, #44]	; (8001a48 <__libc_init_array+0x40>)
 8001a1a:	4c0c      	ldr	r4, [pc, #48]	; (8001a4c <__libc_init_array+0x44>)
 8001a1c:	f000 f818 	bl	8001a50 <_init>
 8001a20:	1b64      	subs	r4, r4, r5
 8001a22:	10a4      	asrs	r4, r4, #2
 8001a24:	2600      	movs	r6, #0
 8001a26:	42a6      	cmp	r6, r4
 8001a28:	d105      	bne.n	8001a36 <__libc_init_array+0x2e>
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
 8001a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a30:	4798      	blx	r3
 8001a32:	3601      	adds	r6, #1
 8001a34:	e7ee      	b.n	8001a14 <__libc_init_array+0xc>
 8001a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3a:	4798      	blx	r3
 8001a3c:	3601      	adds	r6, #1
 8001a3e:	e7f2      	b.n	8001a26 <__libc_init_array+0x1e>
 8001a40:	08001a68 	.word	0x08001a68
 8001a44:	08001a68 	.word	0x08001a68
 8001a48:	08001a68 	.word	0x08001a68
 8001a4c:	08001a6c 	.word	0x08001a6c

08001a50 <_init>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	bf00      	nop
 8001a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a56:	bc08      	pop	{r3}
 8001a58:	469e      	mov	lr, r3
 8001a5a:	4770      	bx	lr

08001a5c <_fini>:
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	bf00      	nop
 8001a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a62:	bc08      	pop	{r3}
 8001a64:	469e      	mov	lr, r3
 8001a66:	4770      	bx	lr
