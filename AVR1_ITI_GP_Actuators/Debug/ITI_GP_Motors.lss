
ITI_GP_Motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00005a2a  00005abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800182  00800182  00005be0  2**0
                  ALLOC
  3 .stab         00006084  00000000  00000000  00005be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a1f  00000000  00000000  0000bc64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e683  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e823  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ea15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000121a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013832  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000141a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__vector_4>
      14:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__vector_5>
      18:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_6>
      1c:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__vector_7>
      20:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__vector_8>
      24:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__vector_9>
      28:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__vector_10>
      2c:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_13>
      38:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__vector_14>
      3c:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 13 2d 	jmp	0x5a26	; 0x5a26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 2c 	jmp	0x59f0	; 0x59f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 2c 	jmp	0x59f0	; 0x59f0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
uint8 Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_STILL_PENDING;
/*Define UART receiving flag*/
uint8 Main_u8UartReceivingFlag = 0u;
/*It is the main*/
void main(void)
{
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	c1 5d       	subi	r28, 0xD1	; 209
     e44:	d0 40       	sbci	r29, 0x00	; 0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
	/*Initialize needed peripherals*/
	PORT_voidInit();
     e50:	0e 94 57 1e 	call	0x3cae	; 0x3cae <PORT_voidInit>
	CLCD_voidInit();
     e54:	0e 94 22 29 	call	0x5244	; 0x5244 <CLCD_voidInit>
	USART_voidInit();
     e58:	0e 94 ab 10 	call	0x2156	; 0x2156 <USART_voidInit>

	/*Initialize the MCP for sending and receiving*/
	MCP2515_voidReceiveInit();
     e5c:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <MCP2515_voidReceiveInit>
	MCP2515_voidSendInit();
     e60:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <MCP2515_voidSendInit>

	/*Enable Global Interrupt*/
	GIE_voidEnable();
     e64:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <GIE_voidEnable>
//	Local_stTimer1.OCBMode = NON_INVERTED_PWM;
//	Local_stTimer1.WGM = FAST_PWM_10_BITS;
//	TIMER1_voidSetCompValueChA(1000);
//	TIMER1_voidSetCompValueChB(1000);
//	TIMER1_u8Init(&Local_stTimer1);
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN4, DIO_u8PIN_HIGH);
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	64 e0       	ldi	r22, 0x04	; 4
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN5, DIO_u8PIN_HIGH);
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	65 e0       	ldi	r22, 0x05	; 5
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	TIMER0_2_CFG_t Local_stTimer0 =
	{
			.ClkSelect = TIMER0_u8SYS_CLK_BY_8,
			.OCMode = OC_DISCONNECTED,
			.WGM = CTC
	};
     e7c:	ce 01       	movw	r24, r28
     e7e:	85 56       	subi	r24, 0x65	; 101
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	c3 53       	subi	r28, 0x33	; 51
     e84:	df 4f       	sbci	r29, 0xFF	; 255
     e86:	99 83       	std	Y+1, r25	; 0x01
     e88:	88 83       	st	Y, r24
     e8a:	cd 5c       	subi	r28, 0xCD	; 205
     e8c:	d0 40       	sbci	r29, 0x00	; 0
     e8e:	8f e6       	ldi	r24, 0x6F	; 111
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	c1 53       	subi	r28, 0x31	; 49
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	99 83       	std	Y+1, r25	; 0x01
     e98:	88 83       	st	Y, r24
     e9a:	cf 5c       	subi	r28, 0xCF	; 207
     e9c:	d0 40       	sbci	r29, 0x00	; 0
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	cf 52       	subi	r28, 0x2F	; 47
     ea2:	df 4f       	sbci	r29, 0xFF	; 255
     ea4:	98 83       	st	Y, r25
     ea6:	c1 5d       	subi	r28, 0xD1	; 209
     ea8:	d0 40       	sbci	r29, 0x00	; 0
     eaa:	c1 53       	subi	r28, 0x31	; 49
     eac:	df 4f       	sbci	r29, 0xFF	; 255
     eae:	a8 81       	ld	r26, Y
     eb0:	b9 81       	ldd	r27, Y+1	; 0x01
     eb2:	cf 5c       	subi	r28, 0xCF	; 207
     eb4:	d0 40       	sbci	r29, 0x00	; 0
     eb6:	0c 90       	ld	r0, X
     eb8:	c1 53       	subi	r28, 0x31	; 49
     eba:	df 4f       	sbci	r29, 0xFF	; 255
     ebc:	e8 81       	ld	r30, Y
     ebe:	f9 81       	ldd	r31, Y+1	; 0x01
     ec0:	cf 5c       	subi	r28, 0xCF	; 207
     ec2:	d0 40       	sbci	r29, 0x00	; 0
     ec4:	31 96       	adiw	r30, 0x01	; 1
     ec6:	c1 53       	subi	r28, 0x31	; 49
     ec8:	df 4f       	sbci	r29, 0xFF	; 255
     eca:	f9 83       	std	Y+1, r31	; 0x01
     ecc:	e8 83       	st	Y, r30
     ece:	cf 5c       	subi	r28, 0xCF	; 207
     ed0:	d0 40       	sbci	r29, 0x00	; 0
     ed2:	c3 53       	subi	r28, 0x33	; 51
     ed4:	df 4f       	sbci	r29, 0xFF	; 255
     ed6:	a8 81       	ld	r26, Y
     ed8:	b9 81       	ldd	r27, Y+1	; 0x01
     eda:	cd 5c       	subi	r28, 0xCD	; 205
     edc:	d0 40       	sbci	r29, 0x00	; 0
     ede:	0c 92       	st	X, r0
     ee0:	c3 53       	subi	r28, 0x33	; 51
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
     ee4:	e8 81       	ld	r30, Y
     ee6:	f9 81       	ldd	r31, Y+1	; 0x01
     ee8:	cd 5c       	subi	r28, 0xCD	; 205
     eea:	d0 40       	sbci	r29, 0x00	; 0
     eec:	31 96       	adiw	r30, 0x01	; 1
     eee:	c3 53       	subi	r28, 0x33	; 51
     ef0:	df 4f       	sbci	r29, 0xFF	; 255
     ef2:	f9 83       	std	Y+1, r31	; 0x01
     ef4:	e8 83       	st	Y, r30
     ef6:	cd 5c       	subi	r28, 0xCD	; 205
     ef8:	d0 40       	sbci	r29, 0x00	; 0
     efa:	cf 52       	subi	r28, 0x2F	; 47
     efc:	df 4f       	sbci	r29, 0xFF	; 255
     efe:	f8 81       	ld	r31, Y
     f00:	c1 5d       	subi	r28, 0xD1	; 209
     f02:	d0 40       	sbci	r29, 0x00	; 0
     f04:	f1 50       	subi	r31, 0x01	; 1
     f06:	cf 52       	subi	r28, 0x2F	; 47
     f08:	df 4f       	sbci	r29, 0xFF	; 255
     f0a:	f8 83       	st	Y, r31
     f0c:	c1 5d       	subi	r28, 0xD1	; 209
     f0e:	d0 40       	sbci	r29, 0x00	; 0
     f10:	cf 52       	subi	r28, 0x2F	; 47
     f12:	df 4f       	sbci	r29, 0xFF	; 255
     f14:	88 81       	ld	r24, Y
     f16:	c1 5d       	subi	r28, 0xD1	; 209
     f18:	d0 40       	sbci	r29, 0x00	; 0
     f1a:	88 23       	and	r24, r24
     f1c:	31 f6       	brne	.-116    	; 0xeaa <main+0x7c>
	TIMER0_u8Init(&Local_stTimer0);
     f1e:	ce 01       	movw	r24, r28
     f20:	85 56       	subi	r24, 0x65	; 101
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TIMER0_u8Init>
	TIMER0_voidSetCompValue(250);
     f28:	8a ef       	ldi	r24, 0xFA	; 250
     f2a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <TIMER0_voidSetCompValue>
	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
     f2e:	2d e8       	ldi	r18, 0x8D	; 141
     f30:	30 e1       	ldi	r19, 0x10	; 16
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	b9 01       	movw	r22, r18
     f36:	0e 94 2d 1b 	call	0x365a	; 0x365a <TIMERS_u8SetCallBack>
	TIMERS_u8IntEnable(TIMER0_COMP);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <TIMERS_u8IntEnable>

	/*Initialize motors' pins*/
	Main_stRightMotor.Pin1 = DIO_u8PIN2;
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	80 93 b3 01 	sts	0x01B3, r24
	Main_stRightMotor.Pin2 = DIO_u8PIN3;
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	80 93 b4 01 	sts	0x01B4, r24
	Main_stRightMotor.Port = DIO_u8PORTC;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	80 93 b2 01 	sts	0x01B2, r24

	Main_stLeftMotor.Pin1 = DIO_u8PIN0;
     f52:	10 92 b6 01 	sts	0x01B6, r1
	Main_stLeftMotor.Pin2 = DIO_u8PIN1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 b7 01 	sts	0x01B7, r24
	Main_stLeftMotor.Port = DIO_u8PORTC;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	80 93 b5 01 	sts	0x01B5, r24
	/*Define ultrasonic variables*/
	ULTSONIC_t Local_stFrontUltrasonic =
	{
			.TrigPort = DIO_u8PORTD,
			.TrigPin = DIO_u8PIN7
	};
     f62:	fe 01       	movw	r30, r28
     f64:	e2 56       	subi	r30, 0x62	; 98
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	80 83       	st	Z, r24
     f6c:	fe 01       	movw	r30, r28
     f6e:	e2 56       	subi	r30, 0x62	; 98
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	81 83       	std	Z+1, r24	; 0x01

	/*Define distance variables*/
	uint16 Local_u16FrontDistance = 0u;
     f76:	fe 01       	movw	r30, r28
     f78:	e0 56       	subi	r30, 0x60	; 96
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
	MCP2515_CanMessage_t Local_stFrontUltrasonicMessage =
	{
			.id = 0x20,
			.properties = 0u,
			.length = 2u
	};
     f80:	ce 01       	movw	r24, r28
     f82:	80 55       	subi	r24, 0x50	; 80
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	2e e0       	ldi	r18, 0x0E	; 14
     f88:	fc 01       	movw	r30, r24
     f8a:	df 01       	movw	r26, r30
     f8c:	82 2f       	mov	r24, r18
     f8e:	1d 92       	st	X+, r1
     f90:	8a 95       	dec	r24
     f92:	e9 f7       	brne	.-6      	; 0xf8e <main+0x160>
     f94:	fe 01       	movw	r30, r28
     f96:	e0 55       	subi	r30, 0x50	; 80
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
     faa:	fe 01       	movw	r30, r28
     fac:	e0 55       	subi	r30, 0x50	; 80
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	84 87       	std	Z+12, r24	; 0x0c
	MCP2515_CanMessage_t Local_stGearState =
	{
			.id = 0x21,
			.properties = 0u,
			.length = 1u
	};
     fb4:	ce 01       	movw	r24, r28
     fb6:	82 54       	subi	r24, 0x42	; 66
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	2e e0       	ldi	r18, 0x0E	; 14
     fbc:	fc 01       	movw	r30, r24
     fbe:	df 01       	movw	r26, r30
     fc0:	82 2f       	mov	r24, r18
     fc2:	1d 92       	st	X+, r1
     fc4:	8a 95       	dec	r24
     fc6:	e9 f7       	brne	.-6      	; 0xfc2 <main+0x194>
     fc8:	fe 01       	movw	r30, r28
     fca:	e2 54       	subi	r30, 0x42	; 66
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	81 e2       	ldi	r24, 0x21	; 33
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
     fde:	fe 01       	movw	r30, r28
     fe0:	e2 54       	subi	r30, 0x42	; 66
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	84 87       	std	Z+12, r24	; 0x0c

	/*Super Loop*/
	while(1)
	{
		/*Receive Character message from USART with asynchronous function*/
		Main_u8ReceivedData = 0u;
     fe8:	10 92 82 01 	sts	0x0182, r1
		USART_u8ReceiveBufferAsynch(&Main_u8ReceivedData, 1, Main_voidReceiveNotificFunc);
     fec:	82 e8       	ldi	r24, 0x82	; 130
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	26 e8       	ldi	r18, 0x86	; 134
     ff2:	30 e1       	ldi	r19, 0x10	; 16
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	a9 01       	movw	r20, r18
     ff8:	0e 94 66 12 	call	0x24cc	; 0x24cc <USART_u8ReceiveBufferAsynch>

#ifdef DEBUG
		DIO_u8GetPinValue(DIO_u8PORTB, DIO_u8PIN3, &Local_u8MCPInterruptPin);
     ffc:	9e 01       	movw	r18, r28
     ffe:	24 53       	subi	r18, 0x34	; 52
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	63 e0       	ldi	r22, 0x03	; 3
    1006:	a9 01       	movw	r20, r18
    1008:	0e 94 3b 21 	call	0x4276	; 0x4276 <DIO_u8GetPinValue>

		if(Local_u8MCPInterruptPin == DIO_u8PIN_LOW)
    100c:	fe 01       	movw	r30, r28
    100e:	e4 53       	subi	r30, 0x34	; 52
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	a1 f4       	brne	.+40     	; 0x1040 <main+0x212>
		{
			Local_stTempCANMessage = MCP2515_stReceiveCANmsg();
    1018:	ce 01       	movw	r24, r28
    101a:	8e 55       	subi	r24, 0x5E	; 94
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <MCP2515_stReceiveCANmsg>

			CLCD_u8GoToXY(0, 0);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	0e 94 cf 2b 	call	0x579e	; 0x579e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_stTempCANMessage.id);
    102a:	fe 01       	movw	r30, r28
    102c:	ee 55       	subi	r30, 0x5E	; 94
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	a2 81       	ldd	r26, Z+2	; 0x02
    1036:	b3 81       	ldd	r27, Z+3	; 0x03
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <CLCD_voidSendDecimalNumber>
		}
#endif

		/*Apply the received input to the motors*/
		if(Main_u8ReceivedData == 'F')
    1040:	80 91 82 01 	lds	r24, 0x0182
    1044:	86 34       	cpi	r24, 0x46	; 70
    1046:	09 f0       	breq	.+2      	; 0x104a <main+0x21c>
    1048:	da c0       	rjmp	.+436    	; 0x11fe <main+0x3d0>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	64 e8       	ldi	r22, 0x84	; 132
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	64 e8       	ldi	r22, 0x84	; 132
    1058:	73 e0       	ldi	r23, 0x03	; 3
    105a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_FORWARD);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 41 10 	call	0x2082	; 0x2082 <Main_voidMove>
			Local_stGearState.data[0] = 4;
    1064:	fe 01       	movw	r30, r28
    1066:	e2 54       	subi	r30, 0x42	; 66
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	84 83       	std	Z+4, r24	; 0x04
			MCP2515_voidSendCANmsg(Local_stGearState);
    106e:	fe 01       	movw	r30, r28
    1070:	e2 54       	subi	r30, 0x42	; 66
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	c0 80       	ld	r12, Z
    1076:	d1 80       	ldd	r13, Z+1	; 0x01
    1078:	e2 80       	ldd	r14, Z+2	; 0x02
    107a:	f3 80       	ldd	r15, Z+3	; 0x03
    107c:	04 81       	ldd	r16, Z+4	; 0x04
    107e:	15 81       	ldd	r17, Z+5	; 0x05
    1080:	26 81       	ldd	r18, Z+6	; 0x06
    1082:	37 81       	ldd	r19, Z+7	; 0x07
    1084:	40 85       	ldd	r20, Z+8	; 0x08
    1086:	51 85       	ldd	r21, Z+9	; 0x09
    1088:	62 85       	ldd	r22, Z+10	; 0x0a
    108a:	73 85       	ldd	r23, Z+11	; 0x0b
    108c:	84 85       	ldd	r24, Z+12	; 0x0c
    108e:	95 85       	ldd	r25, Z+13	; 0x0d
    1090:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <MCP2515_voidSendCANmsg>
    1094:	fe 01       	movw	r30, r28
    1096:	e9 56       	subi	r30, 0x69	; 105
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a8 e4       	ldi	r26, 0x48	; 72
    10a0:	b2 e4       	ldi	r27, 0x42	; 66
    10a2:	80 83       	st	Z, r24
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	a2 83       	std	Z+2, r26	; 0x02
    10a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10aa:	8e 01       	movw	r16, r28
    10ac:	0d 56       	subi	r16, 0x6D	; 109
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	fe 01       	movw	r30, r28
    10b2:	e9 56       	subi	r30, 0x69	; 105
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a ef       	ldi	r20, 0xFA	; 250
    10c4:	54 e4       	ldi	r21, 0x44	; 68
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 83       	st	Z, r24
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	a2 83       	std	Z+2, r26	; 0x02
    10d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d8:	fe 01       	movw	r30, r28
    10da:	ed 56       	subi	r30, 0x6D	; 109
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	44 f4       	brge	.+16     	; 0x1106 <main+0x2d8>
		__ticks = 1;
    10f6:	fe 01       	movw	r30, r28
    10f8:	ef 56       	subi	r30, 0x6F	; 111
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	64 c0       	rjmp	.+200    	; 0x11ce <main+0x3a0>
	else if (__tmp > 65535)
    1106:	fe 01       	movw	r30, r28
    1108:	ed 56       	subi	r30, 0x6D	; 109
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	0c f0       	brlt	.+2      	; 0x1126 <main+0x2f8>
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <main+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	fe 01       	movw	r30, r28
    1128:	e9 56       	subi	r30, 0x69	; 105
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8e 01       	movw	r16, r28
    1146:	0f 56       	subi	r16, 0x6F	; 111
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	f8 01       	movw	r30, r16
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    115c:	1f c0       	rjmp	.+62     	; 0x119c <main+0x36e>
    115e:	fe 01       	movw	r30, r28
    1160:	e1 57       	subi	r30, 0x71	; 113
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	88 ec       	ldi	r24, 0xC8	; 200
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    116c:	fe 01       	movw	r30, r28
    116e:	e1 57       	subi	r30, 0x71	; 113
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <main+0x348>
    117a:	fe 01       	movw	r30, r28
    117c:	e1 57       	subi	r30, 0x71	; 113
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	de 01       	movw	r26, r28
    1186:	af 56       	subi	r26, 0x6F	; 111
    1188:	bf 4f       	sbci	r27, 0xFF	; 255
    118a:	fe 01       	movw	r30, r28
    118c:	ef 56       	subi	r30, 0x6F	; 111
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	9c 93       	st	X, r25
    119a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	fe 01       	movw	r30, r28
    119e:	ef 56       	subi	r30, 0x6F	; 111
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	d1 f6       	brne	.-76     	; 0x115e <main+0x330>
    11aa:	bb c2       	rjmp	.+1398   	; 0x1722 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ac:	8e 01       	movw	r16, r28
    11ae:	0f 56       	subi	r16, 0x6F	; 111
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	fe 01       	movw	r30, r28
    11b4:	ed 56       	subi	r30, 0x6D	; 109
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	f8 01       	movw	r30, r16
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	80 83       	st	Z, r24
    11ce:	de 01       	movw	r26, r28
    11d0:	a3 57       	subi	r26, 0x73	; 115
    11d2:	bf 4f       	sbci	r27, 0xFF	; 255
    11d4:	fe 01       	movw	r30, r28
    11d6:	ef 56       	subi	r30, 0x6F	; 111
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	9c 93       	st	X, r25
    11e2:	8e 93       	st	-X, r24
    11e4:	fe 01       	movw	r30, r28
    11e6:	e3 57       	subi	r30, 0x73	; 115
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <main+0x3c0>
    11f2:	fe 01       	movw	r30, r28
    11f4:	e3 57       	subi	r30, 0x73	; 115
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    11fc:	92 c2       	rjmp	.+1316   	; 0x1722 <main+0x8f4>
			_delay_ms(50);
		}
		else if(Main_u8ReceivedData == 'B')
    11fe:	80 91 82 01 	lds	r24, 0x0182
    1202:	82 34       	cpi	r24, 0x42	; 66
    1204:	09 f0       	breq	.+2      	; 0x1208 <main+0x3da>
    1206:	da c0       	rjmp	.+436    	; 0x13bc <main+0x58e>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	64 e8       	ldi	r22, 0x84	; 132
    120c:	73 e0       	ldi	r23, 0x03	; 3
    120e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	64 e8       	ldi	r22, 0x84	; 132
    1216:	73 e0       	ldi	r23, 0x03	; 3
    1218:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_BACKWARD);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 41 10 	call	0x2082	; 0x2082 <Main_voidMove>
			Local_stGearState.data[0] = 2;
    1222:	fe 01       	movw	r30, r28
    1224:	e2 54       	subi	r30, 0x42	; 66
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	84 83       	std	Z+4, r24	; 0x04
			MCP2515_voidSendCANmsg(Local_stGearState);
    122c:	fe 01       	movw	r30, r28
    122e:	e2 54       	subi	r30, 0x42	; 66
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	c0 80       	ld	r12, Z
    1234:	d1 80       	ldd	r13, Z+1	; 0x01
    1236:	e2 80       	ldd	r14, Z+2	; 0x02
    1238:	f3 80       	ldd	r15, Z+3	; 0x03
    123a:	04 81       	ldd	r16, Z+4	; 0x04
    123c:	15 81       	ldd	r17, Z+5	; 0x05
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	37 81       	ldd	r19, Z+7	; 0x07
    1242:	40 85       	ldd	r20, Z+8	; 0x08
    1244:	51 85       	ldd	r21, Z+9	; 0x09
    1246:	62 85       	ldd	r22, Z+10	; 0x0a
    1248:	73 85       	ldd	r23, Z+11	; 0x0b
    124a:	84 85       	ldd	r24, Z+12	; 0x0c
    124c:	95 85       	ldd	r25, Z+13	; 0x0d
    124e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <MCP2515_voidSendCANmsg>
    1252:	fe 01       	movw	r30, r28
    1254:	e7 57       	subi	r30, 0x77	; 119
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a8 e4       	ldi	r26, 0x48	; 72
    125e:	b2 e4       	ldi	r27, 0x42	; 66
    1260:	80 83       	st	Z, r24
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	a2 83       	std	Z+2, r26	; 0x02
    1266:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1268:	8e 01       	movw	r16, r28
    126a:	0b 57       	subi	r16, 0x7B	; 123
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	fe 01       	movw	r30, r28
    1270:	e7 57       	subi	r30, 0x77	; 119
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	4a ef       	ldi	r20, 0xFA	; 250
    1282:	54 e4       	ldi	r21, 0x44	; 68
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	f8 01       	movw	r30, r16
    128e:	80 83       	st	Z, r24
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	a2 83       	std	Z+2, r26	; 0x02
    1294:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1296:	fe 01       	movw	r30, r28
    1298:	eb 57       	subi	r30, 0x7B	; 123
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	44 f4       	brge	.+16     	; 0x12c4 <main+0x496>
		__ticks = 1;
    12b4:	fe 01       	movw	r30, r28
    12b6:	ed 57       	subi	r30, 0x7D	; 125
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
    12c2:	64 c0       	rjmp	.+200    	; 0x138c <main+0x55e>
	else if (__tmp > 65535)
    12c4:	fe 01       	movw	r30, r28
    12c6:	eb 57       	subi	r30, 0x7B	; 123
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <main+0x4b6>
    12e2:	43 c0       	rjmp	.+134    	; 0x136a <main+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	fe 01       	movw	r30, r28
    12e6:	e7 57       	subi	r30, 0x77	; 119
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8e 01       	movw	r16, r28
    1304:	0d 57       	subi	r16, 0x7D	; 125
    1306:	1f 4f       	sbci	r17, 0xFF	; 255
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	f8 01       	movw	r30, r16
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	1f c0       	rjmp	.+62     	; 0x135a <main+0x52c>
    131c:	fe 01       	movw	r30, r28
    131e:	ef 57       	subi	r30, 0x7F	; 127
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	88 ec       	ldi	r24, 0xC8	; 200
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	fe 01       	movw	r30, r28
    132c:	ef 57       	subi	r30, 0x7F	; 127
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <main+0x506>
    1338:	fe 01       	movw	r30, r28
    133a:	ef 57       	subi	r30, 0x7F	; 127
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	de 01       	movw	r26, r28
    1344:	ad 57       	subi	r26, 0x7D	; 125
    1346:	bf 4f       	sbci	r27, 0xFF	; 255
    1348:	fe 01       	movw	r30, r28
    134a:	ed 57       	subi	r30, 0x7D	; 125
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	9c 93       	st	X, r25
    1358:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135a:	fe 01       	movw	r30, r28
    135c:	ed 57       	subi	r30, 0x7D	; 125
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	d1 f6       	brne	.-76     	; 0x131c <main+0x4ee>
    1368:	dc c1       	rjmp	.+952    	; 0x1722 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136a:	8e 01       	movw	r16, r28
    136c:	0d 57       	subi	r16, 0x7D	; 125
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	fe 01       	movw	r30, r28
    1372:	eb 57       	subi	r30, 0x7B	; 123
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	f8 01       	movw	r30, r16
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	de 01       	movw	r26, r28
    138e:	a1 58       	subi	r26, 0x81	; 129
    1390:	bf 4f       	sbci	r27, 0xFF	; 255
    1392:	fe 01       	movw	r30, r28
    1394:	ed 57       	subi	r30, 0x7D	; 125
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	9c 93       	st	X, r25
    13a0:	8e 93       	st	-X, r24
    13a2:	fe 01       	movw	r30, r28
    13a4:	e1 58       	subi	r30, 0x81	; 129
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <main+0x57e>
    13b0:	fe 01       	movw	r30, r28
    13b2:	e1 58       	subi	r30, 0x81	; 129
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	b3 c1       	rjmp	.+870    	; 0x1722 <main+0x8f4>
			_delay_ms(50);
		}
		else if(Main_u8ReceivedData == 'R')
    13bc:	80 91 82 01 	lds	r24, 0x0182
    13c0:	82 35       	cpi	r24, 0x52	; 82
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x598>
    13c4:	c2 c0       	rjmp	.+388    	; 0x154a <main+0x71c>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	64 e8       	ldi	r22, 0x84	; 132
    13ca:	73 e0       	ldi	r23, 0x03	; 3
    13cc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	64 e8       	ldi	r22, 0x84	; 132
    13d4:	73 e0       	ldi	r23, 0x03	; 3
    13d6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_RIGHT);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	0e 94 41 10 	call	0x2082	; 0x2082 <Main_voidMove>
    13e0:	fe 01       	movw	r30, r28
    13e2:	e5 58       	subi	r30, 0x85	; 133
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a8 e4       	ldi	r26, 0x48	; 72
    13ec:	b2 e4       	ldi	r27, 0x42	; 66
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	8e 01       	movw	r16, r28
    13f8:	09 58       	subi	r16, 0x89	; 137
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e5 58       	subi	r30, 0x85	; 133
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a ef       	ldi	r20, 0xFA	; 250
    1410:	54 e4       	ldi	r21, 0x44	; 68
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	80 83       	st	Z, r24
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1424:	fe 01       	movw	r30, r28
    1426:	e9 58       	subi	r30, 0x89	; 137
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	44 f4       	brge	.+16     	; 0x1452 <main+0x624>
		__ticks = 1;
    1442:	fe 01       	movw	r30, r28
    1444:	eb 58       	subi	r30, 0x8B	; 139
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	64 c0       	rjmp	.+200    	; 0x151a <main+0x6ec>
	else if (__tmp > 65535)
    1452:	fe 01       	movw	r30, r28
    1454:	e9 58       	subi	r30, 0x89	; 137
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	0c f0       	brlt	.+2      	; 0x1472 <main+0x644>
    1470:	43 c0       	rjmp	.+134    	; 0x14f8 <main+0x6ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	fe 01       	movw	r30, r28
    1474:	e5 58       	subi	r30, 0x85	; 133
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e2       	ldi	r20, 0x20	; 32
    1486:	51 e4       	ldi	r21, 0x41	; 65
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8e 01       	movw	r16, r28
    1492:	0b 58       	subi	r16, 0x8B	; 139
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <main+0x6ba>
    14aa:	fe 01       	movw	r30, r28
    14ac:	ed 58       	subi	r30, 0x8D	; 141
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	fe 01       	movw	r30, r28
    14ba:	ed 58       	subi	r30, 0x8D	; 141
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <main+0x694>
    14c6:	fe 01       	movw	r30, r28
    14c8:	ed 58       	subi	r30, 0x8D	; 141
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	de 01       	movw	r26, r28
    14d2:	ab 58       	subi	r26, 0x8B	; 139
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	eb 58       	subi	r30, 0x8B	; 139
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	fe 01       	movw	r30, r28
    14ea:	eb 58       	subi	r30, 0x8B	; 139
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	d1 f6       	brne	.-76     	; 0x14aa <main+0x67c>
    14f6:	15 c1       	rjmp	.+554    	; 0x1722 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	8e 01       	movw	r16, r28
    14fa:	0b 58       	subi	r16, 0x8B	; 139
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	e9 58       	subi	r30, 0x89	; 137
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	de 01       	movw	r26, r28
    151c:	af 58       	subi	r26, 0x8F	; 143
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	eb 58       	subi	r30, 0x8B	; 139
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	11 96       	adiw	r26, 0x01	; 1
    152c:	9c 93       	st	X, r25
    152e:	8e 93       	st	-X, r24
    1530:	fe 01       	movw	r30, r28
    1532:	ef 58       	subi	r30, 0x8F	; 143
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <main+0x70c>
    153e:	fe 01       	movw	r30, r28
    1540:	ef 58       	subi	r30, 0x8F	; 143
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	ec c0       	rjmp	.+472    	; 0x1722 <main+0x8f4>
			_delay_ms(50);
		}
		else if(Main_u8ReceivedData == 'L')
    154a:	80 91 82 01 	lds	r24, 0x0182
    154e:	8c 34       	cpi	r24, 0x4C	; 76
    1550:	09 f0       	breq	.+2      	; 0x1554 <main+0x726>
    1552:	c2 c0       	rjmp	.+388    	; 0x16d8 <main+0x8aa>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	64 e8       	ldi	r22, 0x84	; 132
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	64 e8       	ldi	r22, 0x84	; 132
    1562:	73 e0       	ldi	r23, 0x03	; 3
    1564:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_LEFT);
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	0e 94 41 10 	call	0x2082	; 0x2082 <Main_voidMove>
    156e:	fe 01       	movw	r30, r28
    1570:	e3 59       	subi	r30, 0x93	; 147
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a8 e4       	ldi	r26, 0x48	; 72
    157a:	b2 e4       	ldi	r27, 0x42	; 66
    157c:	80 83       	st	Z, r24
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	a2 83       	std	Z+2, r26	; 0x02
    1582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	8e 01       	movw	r16, r28
    1586:	07 59       	subi	r16, 0x97	; 151
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e3 59       	subi	r30, 0x93	; 147
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	a2 83       	std	Z+2, r26	; 0x02
    15b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b2:	fe 01       	movw	r30, r28
    15b4:	e7 59       	subi	r30, 0x97	; 151
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	44 f4       	brge	.+16     	; 0x15e0 <main+0x7b2>
		__ticks = 1;
    15d0:	fe 01       	movw	r30, r28
    15d2:	e9 59       	subi	r30, 0x99	; 153
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	64 c0       	rjmp	.+200    	; 0x16a8 <main+0x87a>
	else if (__tmp > 65535)
    15e0:	fe 01       	movw	r30, r28
    15e2:	e7 59       	subi	r30, 0x97	; 151
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <main+0x7d2>
    15fe:	43 c0       	rjmp	.+134    	; 0x1686 <main+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	fe 01       	movw	r30, r28
    1602:	e3 59       	subi	r30, 0x93	; 147
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8e 01       	movw	r16, r28
    1620:	09 59       	subi	r16, 0x99	; 153
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	1f c0       	rjmp	.+62     	; 0x1676 <main+0x848>
    1638:	fe 01       	movw	r30, r28
    163a:	eb 59       	subi	r30, 0x9B	; 155
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	88 ec       	ldi	r24, 0xC8	; 200
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	fe 01       	movw	r30, r28
    1648:	eb 59       	subi	r30, 0x9B	; 155
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <main+0x822>
    1654:	fe 01       	movw	r30, r28
    1656:	eb 59       	subi	r30, 0x9B	; 155
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	de 01       	movw	r26, r28
    1660:	a9 59       	subi	r26, 0x99	; 153
    1662:	bf 4f       	sbci	r27, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	e9 59       	subi	r30, 0x99	; 153
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	9c 93       	st	X, r25
    1674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	fe 01       	movw	r30, r28
    1678:	e9 59       	subi	r30, 0x99	; 153
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	d1 f6       	brne	.-76     	; 0x1638 <main+0x80a>
    1684:	4e c0       	rjmp	.+156    	; 0x1722 <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	8e 01       	movw	r16, r28
    1688:	09 59       	subi	r16, 0x99	; 153
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e7 59       	subi	r30, 0x97	; 151
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    16a8:	de 01       	movw	r26, r28
    16aa:	ad 59       	subi	r26, 0x9D	; 157
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e9 59       	subi	r30, 0x99	; 153
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	9c 93       	st	X, r25
    16bc:	8e 93       	st	-X, r24
    16be:	fe 01       	movw	r30, r28
    16c0:	ed 59       	subi	r30, 0x9D	; 157
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <main+0x89a>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ed 59       	subi	r30, 0x9D	; 157
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	25 c0       	rjmp	.+74     	; 0x1722 <main+0x8f4>
			_delay_ms(50);
		}
		else
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 0u);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 0u);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <Main_voidSetMotorSpeed>
			Main_voidMove(STOP);
    16ec:	85 e0       	ldi	r24, 0x05	; 5
    16ee:	0e 94 41 10 	call	0x2082	; 0x2082 <Main_voidMove>
			Local_stGearState.data[0] = 4;
    16f2:	fe 01       	movw	r30, r28
    16f4:	e2 54       	subi	r30, 0x42	; 66
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	84 83       	std	Z+4, r24	; 0x04
			MCP2515_voidSendCANmsg(Local_stGearState);
    16fc:	fe 01       	movw	r30, r28
    16fe:	e2 54       	subi	r30, 0x42	; 66
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	c0 80       	ld	r12, Z
    1704:	d1 80       	ldd	r13, Z+1	; 0x01
    1706:	e2 80       	ldd	r14, Z+2	; 0x02
    1708:	f3 80       	ldd	r15, Z+3	; 0x03
    170a:	04 81       	ldd	r16, Z+4	; 0x04
    170c:	15 81       	ldd	r17, Z+5	; 0x05
    170e:	26 81       	ldd	r18, Z+6	; 0x06
    1710:	37 81       	ldd	r19, Z+7	; 0x07
    1712:	40 85       	ldd	r20, Z+8	; 0x08
    1714:	51 85       	ldd	r21, Z+9	; 0x09
    1716:	62 85       	ldd	r22, Z+10	; 0x0a
    1718:	73 85       	ldd	r23, Z+11	; 0x0b
    171a:	84 85       	ldd	r24, Z+12	; 0x0c
    171c:	95 85       	ldd	r25, Z+13	; 0x0d
    171e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <MCP2515_voidSendCANmsg>
		}


		if(Main_u8UltrasonicSamplingFlag == MAIN_u8SAMPLING_READY)
    1722:	80 91 6e 01 	lds	r24, 0x016E
    1726:	88 23       	and	r24, r24
    1728:	09 f0       	breq	.+2      	; 0x172c <main+0x8fe>
    172a:	4b c0       	rjmp	.+150    	; 0x17c2 <main+0x994>
		{
			/*Measure the distance from the rear ultrasonic*/
			TIMERS_u8IntDisable(TIMER0_COMP);
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIMERS_u8IntDisable>
			ULTSONIC_u8MeasureDistance(&Local_stFrontUltrasonic, &Local_u16FrontDistance);
    1732:	ce 01       	movw	r24, r28
    1734:	82 56       	subi	r24, 0x62	; 98
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	9e 01       	movw	r18, r28
    173a:	20 56       	subi	r18, 0x60	; 96
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	b9 01       	movw	r22, r18
    1740:	0e 94 5e 22 	call	0x44bc	; 0x44bc <ULTSONIC_u8MeasureDistance>
			TIMERS_u8IntEnable(TIMER0_COMP);
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <TIMERS_u8IntEnable>

			CLCD_voidClearDisplay();
    174a:	0e 94 ba 29 	call	0x5374	; 0x5374 <CLCD_voidClearDisplay>
			CLCD_u8GoToXY(0, 1);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	0e 94 cf 2b 	call	0x579e	; 0x579e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u16FrontDistance);
    1756:	fe 01       	movw	r30, r28
    1758:	e0 56       	subi	r30, 0x60	; 96
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	cc 01       	movw	r24, r24
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <CLCD_voidSendDecimalNumber>

			/*Construct the rear distance into the CAN message*/
			Local_stFrontUltrasonicMessage.data[0] = (uint8) Local_u16FrontDistance;
    176e:	fe 01       	movw	r30, r28
    1770:	e0 56       	subi	r30, 0x60	; 96
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	fe 01       	movw	r30, r28
    177a:	e0 55       	subi	r30, 0x50	; 80
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	84 83       	std	Z+4, r24	; 0x04
			Local_stFrontUltrasonicMessage.data[1] = (uint8) (Local_u16FrontDistance >> 8u);
    1780:	fe 01       	movw	r30, r28
    1782:	e0 56       	subi	r30, 0x60	; 96
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	89 2f       	mov	r24, r25
    178c:	99 27       	eor	r25, r25
    178e:	fe 01       	movw	r30, r28
    1790:	e0 55       	subi	r30, 0x50	; 80
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	85 83       	std	Z+5, r24	; 0x05

			/*Send the rear distance to the CAN bus*/
			MCP2515_voidSendCANmsg(Local_stFrontUltrasonicMessage);
    1796:	fe 01       	movw	r30, r28
    1798:	e0 55       	subi	r30, 0x50	; 80
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	c0 80       	ld	r12, Z
    179e:	d1 80       	ldd	r13, Z+1	; 0x01
    17a0:	e2 80       	ldd	r14, Z+2	; 0x02
    17a2:	f3 80       	ldd	r15, Z+3	; 0x03
    17a4:	04 81       	ldd	r16, Z+4	; 0x04
    17a6:	15 81       	ldd	r17, Z+5	; 0x05
    17a8:	26 81       	ldd	r18, Z+6	; 0x06
    17aa:	37 81       	ldd	r19, Z+7	; 0x07
    17ac:	40 85       	ldd	r20, Z+8	; 0x08
    17ae:	51 85       	ldd	r21, Z+9	; 0x09
    17b0:	62 85       	ldd	r22, Z+10	; 0x0a
    17b2:	73 85       	ldd	r23, Z+11	; 0x0b
    17b4:	84 85       	ldd	r24, Z+12	; 0x0c
    17b6:	95 85       	ldd	r25, Z+13	; 0x0d
    17b8:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <MCP2515_voidSendCANmsg>

			/*Pend the sampling flag again*/
			Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_STILL_PENDING;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 6e 01 	sts	0x016E, r24
		}


		if(Local_u16FrontDistance > 30)
    17c2:	fe 01       	movw	r30, r28
    17c4:	e0 56       	subi	r30, 0x60	; 96
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	8f 31       	cpi	r24, 0x1F	; 31
    17ce:	91 05       	cpc	r25, r1
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <main+0x9a6>
    17d2:	0a cc       	rjmp	.-2028   	; 0xfe8 <main+0x1ba>
		{
			/*Do nothing*/
		}
		else if(Local_u16FrontDistance > 20)
    17d4:	fe 01       	movw	r30, r28
    17d6:	e0 56       	subi	r30, 0x60	; 96
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	85 31       	cpi	r24, 0x15	; 21
    17e0:	91 05       	cpc	r25, r1
    17e2:	08 f4       	brcc	.+2      	; 0x17e6 <main+0x9b8>
    17e4:	72 c1       	rjmp	.+740    	; 0x1aca <main+0xc9c>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    17f0:	fe 01       	movw	r30, r28
    17f2:	e1 5a       	subi	r30, 0xA1	; 161
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 ef       	ldi	r26, 0xF0	; 240
    17fc:	b2 e4       	ldi	r27, 0x42	; 66
    17fe:	80 83       	st	Z, r24
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	a2 83       	std	Z+2, r26	; 0x02
    1804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	8e 01       	movw	r16, r28
    1808:	05 5a       	subi	r16, 0xA5	; 165
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	fe 01       	movw	r30, r28
    180e:	e1 5a       	subi	r30, 0xA1	; 161
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	f8 01       	movw	r30, r16
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1834:	fe 01       	movw	r30, r28
    1836:	e5 5a       	subi	r30, 0xA5	; 165
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	44 f4       	brge	.+16     	; 0x1862 <main+0xa34>
		__ticks = 1;
    1852:	fe 01       	movw	r30, r28
    1854:	e7 5a       	subi	r30, 0xA7	; 167
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
    1860:	64 c0       	rjmp	.+200    	; 0x192a <main+0xafc>
	else if (__tmp > 65535)
    1862:	fe 01       	movw	r30, r28
    1864:	e5 5a       	subi	r30, 0xA5	; 165
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	0c f0       	brlt	.+2      	; 0x1882 <main+0xa54>
    1880:	43 c0       	rjmp	.+134    	; 0x1908 <main+0xada>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	fe 01       	movw	r30, r28
    1884:	e1 5a       	subi	r30, 0xA1	; 161
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8e 01       	movw	r16, r28
    18a2:	07 5a       	subi	r16, 0xA7	; 167
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	f8 01       	movw	r30, r16
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <main+0xaca>
    18ba:	fe 01       	movw	r30, r28
    18bc:	e9 5a       	subi	r30, 0xA9	; 169
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	fe 01       	movw	r30, r28
    18ca:	e9 5a       	subi	r30, 0xA9	; 169
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <main+0xaa4>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e9 5a       	subi	r30, 0xA9	; 169
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e0:	de 01       	movw	r26, r28
    18e2:	a7 5a       	subi	r26, 0xA7	; 167
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5a       	subi	r30, 0xA7	; 167
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 5a       	subi	r30, 0xA7	; 167
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	d1 f6       	brne	.-76     	; 0x18ba <main+0xa8c>
    1906:	27 c0       	rjmp	.+78     	; 0x1956 <main+0xb28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	8e 01       	movw	r16, r28
    190a:	07 5a       	subi	r16, 0xA7	; 167
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	fe 01       	movw	r30, r28
    1910:	e5 5a       	subi	r30, 0xA5	; 165
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	de 01       	movw	r26, r28
    192c:	ab 5a       	subi	r26, 0xAB	; 171
    192e:	bf 4f       	sbci	r27, 0xFF	; 255
    1930:	fe 01       	movw	r30, r28
    1932:	e7 5a       	subi	r30, 0xA7	; 167
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	8d 93       	st	X+, r24
    193c:	9c 93       	st	X, r25
    193e:	fe 01       	movw	r30, r28
    1940:	eb 5a       	subi	r30, 0xAB	; 171
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <main+0xb1a>
    194c:	fe 01       	movw	r30, r28
    194e:	eb 5a       	subi	r30, 0xAB	; 171
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
			_delay_ms(120);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	64 e0       	ldi	r22, 0x04	; 4
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1960:	fe 01       	movw	r30, r28
    1962:	ef 5a       	subi	r30, 0xAF	; 175
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	ae ee       	ldi	r26, 0xEE	; 238
    196c:	b2 e4       	ldi	r27, 0x42	; 66
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	8e 01       	movw	r16, r28
    1978:	03 5b       	subi	r16, 0xB3	; 179
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	ef 5a       	subi	r30, 0xAF	; 175
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4a ef       	ldi	r20, 0xFA	; 250
    1990:	54 e4       	ldi	r21, 0x44	; 68
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	80 83       	st	Z, r24
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	a2 83       	std	Z+2, r26	; 0x02
    19a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a4:	fe 01       	movw	r30, r28
    19a6:	e3 5b       	subi	r30, 0xB3	; 179
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	44 f4       	brge	.+16     	; 0x19d2 <main+0xba4>
		__ticks = 1;
    19c2:	fe 01       	movw	r30, r28
    19c4:	e5 5b       	subi	r30, 0xB5	; 181
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	64 c0       	rjmp	.+200    	; 0x1a9a <main+0xc6c>
	else if (__tmp > 65535)
    19d2:	fe 01       	movw	r30, r28
    19d4:	e3 5b       	subi	r30, 0xB3	; 179
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	0c f0       	brlt	.+2      	; 0x19f2 <main+0xbc4>
    19f0:	43 c0       	rjmp	.+134    	; 0x1a78 <main+0xc4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	fe 01       	movw	r30, r28
    19f4:	ef 5a       	subi	r30, 0xAF	; 175
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8e 01       	movw	r16, r28
    1a12:	05 5b       	subi	r16, 0xB5	; 181
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	f8 01       	movw	r30, r16
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
    1a28:	1f c0       	rjmp	.+62     	; 0x1a68 <main+0xc3a>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e7 5b       	subi	r30, 0xB7	; 183
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e7 5b       	subi	r30, 0xB7	; 183
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <main+0xc14>
    1a46:	fe 01       	movw	r30, r28
    1a48:	e7 5b       	subi	r30, 0xB7	; 183
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a50:	de 01       	movw	r26, r28
    1a52:	a5 5b       	subi	r26, 0xB5	; 181
    1a54:	bf 4f       	sbci	r27, 0xFF	; 255
    1a56:	fe 01       	movw	r30, r28
    1a58:	e5 5b       	subi	r30, 0xB5	; 181
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	9c 93       	st	X, r25
    1a66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e5 5b       	subi	r30, 0xB5	; 181
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	d1 f6       	brne	.-76     	; 0x1a2a <main+0xbfc>
    1a76:	b8 ca       	rjmp	.-2704   	; 0xfe8 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	8e 01       	movw	r16, r28
    1a7a:	05 5b       	subi	r16, 0xB5	; 181
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e3 5b       	subi	r30, 0xB3	; 179
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	f8 01       	movw	r30, r16
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
    1a9a:	de 01       	movw	r26, r28
    1a9c:	a9 5b       	subi	r26, 0xB9	; 185
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e5 5b       	subi	r30, 0xB5	; 181
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	9c 93       	st	X, r25
    1aae:	8e 93       	st	-X, r24
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e9 5b       	subi	r30, 0xB9	; 185
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <main+0xc8c>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e9 5b       	subi	r30, 0xB9	; 185
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	8f ca       	rjmp	.-2786   	; 0xfe8 <main+0x1ba>
			_delay_ms(119);

		}
		else if(Local_u16FrontDistance > 10)
    1aca:	fe 01       	movw	r30, r28
    1acc:	e0 56       	subi	r30, 0x60	; 96
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	8b 30       	cpi	r24, 0x0B	; 11
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <main+0xcae>
    1ada:	02 c1       	rjmp	.+516    	; 0x1ce0 <main+0xeb2>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ed 5b       	subi	r30, 0xBD	; 189
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a4 eb       	ldi	r26, 0xB4	; 180
    1af2:	b2 e4       	ldi	r27, 0x42	; 66
    1af4:	80 83       	st	Z, r24
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	a2 83       	std	Z+2, r26	; 0x02
    1afa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	8e 01       	movw	r16, r28
    1afe:	01 5c       	subi	r16, 0xC1	; 193
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	fe 01       	movw	r30, r28
    1b04:	ed 5b       	subi	r30, 0xBD	; 189
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	f8 01       	movw	r30, r16
    1b22:	80 83       	st	Z, r24
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	a2 83       	std	Z+2, r26	; 0x02
    1b28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ff 96       	adiw	r30, 0x3f	; 63
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <main+0xd22>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9e af       	std	Y+62, r25	; 0x3e
    1b4c:	8d af       	std	Y+61, r24	; 0x3d
    1b4e:	46 c0       	rjmp	.+140    	; 0x1bdc <main+0xdae>
	else if (__tmp > 65535)
    1b50:	fe 01       	movw	r30, r28
    1b52:	ff 96       	adiw	r30, 0x3f	; 63
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	64 f5       	brge	.+88     	; 0x1bc4 <main+0xd96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 5b       	subi	r30, 0xBD	; 189
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e af       	std	Y+62, r25	; 0x3e
    1b98:	8d af       	std	Y+61, r24	; 0x3d
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <main+0xd8c>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c af       	std	Y+60, r25	; 0x3c
    1ba2:	8b af       	std	Y+59, r24	; 0x3b
    1ba4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ba6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <main+0xd7a>
    1bac:	9c af       	std	Y+60, r25	; 0x3c
    1bae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9e af       	std	Y+62, r25	; 0x3e
    1bb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <main+0xd6e>
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <main+0xdc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ff 96       	adiw	r30, 0x3f	; 63
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e af       	std	Y+62, r25	; 0x3e
    1bda:	8d af       	std	Y+61, r24	; 0x3d
    1bdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be0:	9a af       	std	Y+58, r25	; 0x3a
    1be2:	89 af       	std	Y+57, r24	; 0x39
    1be4:	89 ad       	ldd	r24, Y+57	; 0x39
    1be6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <main+0xdba>
    1bec:	9a af       	std	Y+58, r25	; 0x3a
    1bee:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(90);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	64 e0       	ldi	r22, 0x04	; 4
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a2 eb       	ldi	r26, 0xB2	; 178
    1c00:	b2 e4       	ldi	r27, 0x42	; 66
    1c02:	8d ab       	std	Y+53, r24	; 0x35
    1c04:	9e ab       	std	Y+54, r25	; 0x36
    1c06:	af ab       	std	Y+55, r26	; 0x37
    1c08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c10:	98 ad       	ldd	r25, Y+56	; 0x38
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a ef       	ldi	r20, 0xFA	; 250
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	89 ab       	std	Y+49, r24	; 0x31
    1c24:	9a ab       	std	Y+50, r25	; 0x32
    1c26:	ab ab       	std	Y+51, r26	; 0x33
    1c28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c30:	9c a9       	ldd	r25, Y+52	; 0x34
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <main+0xe1e>
		__ticks = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	98 ab       	std	Y+48, r25	; 0x30
    1c48:	8f a7       	std	Y+47, r24	; 0x2f
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <main+0xe9c>
	else if (__tmp > 65535)
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	4c f5       	brge	.+82     	; 0x1cb6 <main+0xe88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	6d a9       	ldd	r22, Y+53	; 0x35
    1c66:	7e a9       	ldd	r23, Y+54	; 0x36
    1c68:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <main+0xe7e>
    1c8e:	88 ec       	ldi	r24, 0xC8	; 200
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9e a7       	std	Y+46, r25	; 0x2e
    1c94:	8d a7       	std	Y+45, r24	; 0x2d
    1c96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <main+0xe6c>
    1c9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ca0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	98 ab       	std	Y+48, r25	; 0x30
    1caa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cae:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <main+0xe60>
    1cb4:	99 c9       	rjmp	.-3278   	; 0xfe8 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cba:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	98 ab       	std	Y+48, r25	; 0x30
    1cc8:	8f a7       	std	Y+47, r24	; 0x2f
    1cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cce:	9c a7       	std	Y+44, r25	; 0x2c
    1cd0:	8b a7       	std	Y+43, r24	; 0x2b
    1cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <main+0xea8>
    1cda:	9c a7       	std	Y+44, r25	; 0x2c
    1cdc:	8b a7       	std	Y+43, r24	; 0x2b
    1cde:	84 c9       	rjmp	.-3320   	; 0xfe8 <main+0x1ba>
			_delay_ms(89);
		}
		else if(Local_u16FrontDistance > 5)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e0 56       	subi	r30, 0x60	; 96
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	86 30       	cpi	r24, 0x06	; 6
    1cec:	91 05       	cpc	r25, r1
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <main+0xec4>
    1cf0:	ef c0       	rjmp	.+478    	; 0x1ed0 <main+0x10a2>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	64 e0       	ldi	r22, 0x04	; 4
    1cf6:	41 e0       	ldi	r20, 0x01	; 1
    1cf8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a8 e4       	ldi	r26, 0x48	; 72
    1d02:	b2 e4       	ldi	r27, 0x42	; 66
    1d04:	8f a3       	std	Y+39, r24	; 0x27
    1d06:	98 a7       	std	Y+40, r25	; 0x28
    1d08:	a9 a7       	std	Y+41, r26	; 0x29
    1d0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d10:	89 a5       	ldd	r24, Y+41	; 0x29
    1d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8b a3       	std	Y+35, r24	; 0x23
    1d26:	9c a3       	std	Y+36, r25	; 0x24
    1d28:	ad a3       	std	Y+37, r26	; 0x25
    1d2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d30:	8d a1       	ldd	r24, Y+37	; 0x25
    1d32:	9e a1       	ldd	r25, Y+38	; 0x26
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <main+0xf20>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <main+0xf9e>
	else if (__tmp > 65535)
    1d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d50:	7c a1       	ldd	r23, Y+36	; 0x24
    1d52:	8d a1       	ldd	r24, Y+37	; 0x25
    1d54:	9e a1       	ldd	r25, Y+38	; 0x26
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <main+0xf8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	6f a1       	ldd	r22, Y+39	; 0x27
    1d68:	78 a5       	ldd	r23, Y+40	; 0x28
    1d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9a a3       	std	Y+34, r25	; 0x22
    1d8c:	89 a3       	std	Y+33, r24	; 0x21
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <main+0xf80>
    1d90:	88 ec       	ldi	r24, 0xC8	; 200
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	98 a3       	std	Y+32, r25	; 0x20
    1d96:	8f 8f       	std	Y+31, r24	; 0x1f
    1d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <main+0xf6e>
    1da0:	98 a3       	std	Y+32, r25	; 0x20
    1da2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	89 a1       	ldd	r24, Y+33	; 0x21
    1db0:	9a a1       	ldd	r25, Y+34	; 0x22
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <main+0xf62>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <main+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dba:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9a a3       	std	Y+34, r25	; 0x22
    1dca:	89 a3       	std	Y+33, r24	; 0x21
    1dcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dce:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <main+0xfaa>
    1ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dde:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_LOW);
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	64 e0       	ldi	r22, 0x04	; 4
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a4 e4       	ldi	r26, 0x44	; 68
    1df0:	b2 e4       	ldi	r27, 0x42	; 66
    1df2:	89 8f       	std	Y+25, r24	; 0x19
    1df4:	9a 8f       	std	Y+26, r25	; 0x1a
    1df6:	ab 8f       	std	Y+27, r26	; 0x1b
    1df8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a ef       	ldi	r20, 0xFA	; 250
    1e08:	54 e4       	ldi	r21, 0x44	; 68
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8d 8b       	std	Y+21, r24	; 0x15
    1e14:	9e 8b       	std	Y+22, r25	; 0x16
    1e16:	af 8b       	std	Y+23, r26	; 0x17
    1e18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e20:	98 8d       	ldd	r25, Y+24	; 0x18
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <main+0x100e>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <main+0x108c>
	else if (__tmp > 65535)
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <main+0x1078>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	69 8d       	ldd	r22, Y+25	; 0x19
    1e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9c 8b       	std	Y+20, r25	; 0x14
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <main+0x106e>
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9a 8b       	std	Y+18, r25	; 0x12
    1e84:	89 8b       	std	Y+17, r24	; 0x11
    1e86:	89 89       	ldd	r24, Y+17	; 0x11
    1e88:	9a 89       	ldd	r25, Y+18	; 0x12
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <main+0x105c>
    1e8e:	9a 8b       	std	Y+18, r25	; 0x12
    1e90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8b 89       	ldd	r24, Y+19	; 0x13
    1e94:	9c 89       	ldd	r25, Y+20	; 0x14
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <main+0x1050>
    1ea4:	a1 c8       	rjmp	.-3774   	; 0xfe8 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1eac:	98 8d       	ldd	r25, Y+24	; 0x18
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9c 8b       	std	Y+20, r25	; 0x14
    1eb8:	8b 8b       	std	Y+19, r24	; 0x13
    1eba:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebe:	98 8b       	std	Y+16, r25	; 0x10
    1ec0:	8f 87       	std	Y+15, r24	; 0x0f
    1ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec4:	98 89       	ldd	r25, Y+16	; 0x10
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <main+0x1098>
    1eca:	98 8b       	std	Y+16, r25	; 0x10
    1ecc:	8f 87       	std	Y+15, r24	; 0x0f
    1ece:	8c c8       	rjmp	.-3816   	; 0xfe8 <main+0x1ba>
			_delay_ms(49);
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PIN_HIGH);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	64 e0       	ldi	r22, 0x04	; 4
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 ef       	ldi	r26, 0xF0	; 240
    1ee0:	b1 e4       	ldi	r27, 0x41	; 65
    1ee2:	8b 87       	std	Y+11, r24	; 0x0b
    1ee4:	9c 87       	std	Y+12, r25	; 0x0c
    1ee6:	ad 87       	std	Y+13, r26	; 0x0d
    1ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a ef       	ldi	r20, 0xFA	; 250
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8f 83       	std	Y+7, r24	; 0x07
    1f04:	98 87       	std	Y+8, r25	; 0x08
    1f06:	a9 87       	std	Y+9, r26	; 0x09
    1f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0c:	78 85       	ldd	r23, Y+8	; 0x08
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <main+0x10fe>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	40 c0       	rjmp	.+128    	; 0x1fac <main+0x117e>
	else if (__tmp > 65535)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	54 f5       	brge	.+84     	; 0x1f98 <main+0x116a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <main+0x115e>
    1f6e:	88 ec       	ldi	r24, 0xC8	; 200
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <main+0x114c>
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <main+0x1140>
    1f94:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9a:	78 85       	ldd	r23, Y+8	; 0x08
    1f9c:	89 85       	ldd	r24, Y+9	; 0x09
    1f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	9a 83       	std	Y+2, r25	; 0x02
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <main+0x118a>
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <main+0x1ba>

00001fc4 <Main_voidSetMotorSpeed>:
		}
	}
}

void Main_voidSetMotorSpeed(uint8 Copy_u8Motor, uint16 Copy_u8Speed)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <Main_voidSetMotorSpeed+0x6>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	7b 83       	std	Y+3, r23	; 0x03
    1fd4:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8Motor == RIGHT_MOTOR)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	29 f4       	brne	.+10     	; 0x1fe6 <Main_voidSetMotorSpeed+0x22>
    {
    	TIMER1_voidSetCompValueChA(Copy_u8Speed);
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	0e 94 9e 1b 	call	0x373c	; 0x373c <TIMER1_voidSetCompValueChA>
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <Main_voidSetMotorSpeed+0x30>
    }
    else if(Copy_u8Motor == LEFT_MOTOR)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	21 f4       	brne	.+8      	; 0x1ff4 <Main_voidSetMotorSpeed+0x30>
    {
    	TIMER1_voidSetCompValueChB(Copy_u8Speed);
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	0e 94 b0 1b 	call	0x3760	; 0x3760 <TIMER1_voidSetCompValueChB>
    }
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <Main_voidSetMotorDirection>:

void Main_voidSetMotorDirection(uint8 Copy_u8Motor, uint8 Copy_u8Direction)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <Main_voidSetMotorDirection+0x6>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8Motor == RIGHT_MOTOR)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	c1 f4       	brne	.+48     	; 0x2044 <Main_voidSetMotorDirection+0x44>
    {
        if(Copy_u8Direction == FORWARD_DIRECTION)
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	29 f4       	brne	.+10     	; 0x2024 <Main_voidSetMotorDirection+0x24>
        {
        	MOTOR_u8RotateCW(&Main_stRightMotor);
    201a:	82 eb       	ldi	r24, 0xB2	; 178
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	0e 94 8c 24 	call	0x4918	; 0x4918 <MOTOR_u8RotateCW>
    2022:	2a c0       	rjmp	.+84     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == BACKWARD_DIRECTION)
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	82 30       	cpi	r24, 0x02	; 2
    2028:	29 f4       	brne	.+10     	; 0x2034 <Main_voidSetMotorDirection+0x34>
        {
        	MOTOR_u8RotateCCW(&Main_stRightMotor);
    202a:	82 eb       	ldi	r24, 0xB2	; 178
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 b7 24 	call	0x496e	; 0x496e <MOTOR_u8RotateCCW>
    2032:	22 c0       	rjmp	.+68     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == STOP)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	85 30       	cpi	r24, 0x05	; 5
    2038:	f9 f4       	brne	.+62     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        {
        	MOTOR_u8Stop(&Main_stRightMotor);
    203a:	82 eb       	ldi	r24, 0xB2	; 178
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <MOTOR_u8Stop>
    2042:	1a c0       	rjmp	.+52     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        }
    }
    else if(Copy_u8Motor == LEFT_MOTOR)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	b9 f4       	brne	.+46     	; 0x2078 <Main_voidSetMotorDirection+0x78>
    {
        if (Copy_u8Direction == FORWARD_DIRECTION)
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	29 f4       	brne	.+10     	; 0x205a <Main_voidSetMotorDirection+0x5a>
        {
        	MOTOR_u8RotateCCW(&Main_stLeftMotor);
    2050:	85 eb       	ldi	r24, 0xB5	; 181
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 b7 24 	call	0x496e	; 0x496e <MOTOR_u8RotateCCW>
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == BACKWARD_DIRECTION)
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	29 f4       	brne	.+10     	; 0x206a <Main_voidSetMotorDirection+0x6a>
        {
        	MOTOR_u8RotateCW(&Main_stLeftMotor);
    2060:	85 eb       	ldi	r24, 0xB5	; 181
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	0e 94 8c 24 	call	0x4918	; 0x4918 <MOTOR_u8RotateCW>
    2068:	07 c0       	rjmp	.+14     	; 0x2078 <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == STOP)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	85 30       	cpi	r24, 0x05	; 5
    206e:	21 f4       	brne	.+8      	; 0x2078 <Main_voidSetMotorDirection+0x78>
        {
        	MOTOR_u8Stop(&Main_stLeftMotor);
    2070:	85 eb       	ldi	r24, 0xB5	; 181
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <MOTOR_u8Stop>
        }
    }
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <Main_voidMove>:

/*
 * you can set the speed here, with a variable
 */
void Main_voidMove(uint8 Copy_u8Direction)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == MOVE_FORWARD)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	49 f4       	brne	.+18     	; 0x20a6 <Main_voidMove+0x24>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, FORWARD_DIRECTION);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, FORWARD_DIRECTION);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
    20a4:	2f c0       	rjmp	.+94     	; 0x2104 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_BACKWARD)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	49 f4       	brne	.+18     	; 0x20be <Main_voidMove+0x3c>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, BACKWARD_DIRECTION);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	62 e0       	ldi	r22, 0x02	; 2
    20b0:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, BACKWARD_DIRECTION);
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
    20bc:	23 c0       	rjmp	.+70     	; 0x2104 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_RIGHT)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	49 f4       	brne	.+18     	; 0x20d6 <Main_voidMove+0x54>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, BACKWARD_DIRECTION);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	62 e0       	ldi	r22, 0x02	; 2
    20c8:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, FORWARD_DIRECTION);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
    20d4:	17 c0       	rjmp	.+46     	; 0x2104 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_LEFT)
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	49 f4       	brne	.+18     	; 0x20ee <Main_voidMove+0x6c>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, FORWARD_DIRECTION);
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, BACKWARD_DIRECTION);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	62 e0       	ldi	r22, 0x02	; 2
    20e8:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
    20ec:	0b c0       	rjmp	.+22     	; 0x2104 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == STOP)
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	85 30       	cpi	r24, 0x05	; 5
    20f2:	41 f4       	brne	.+16     	; 0x2104 <Main_voidMove+0x82>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, STOP);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	65 e0       	ldi	r22, 0x05	; 5
    20f8:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, STOP);
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	65 e0       	ldi	r22, 0x05	; 5
    2100:	0e 94 00 10 	call	0x2000	; 0x2000 <Main_voidSetMotorDirection>
	}
}
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <Main_voidReceiveNotificFunc>:

/*USART Receive ISR*/
void Main_voidReceiveNotificFunc(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62

}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <Main_voidTimer0ISR>:

void Main_voidTimer0ISR(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	/*Define static counter*/
	static uint16 Local_u16Counter;

	Local_u16Counter++;
    2122:	80 91 84 01 	lds	r24, 0x0184
    2126:	90 91 85 01 	lds	r25, 0x0185
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	90 93 85 01 	sts	0x0185, r25
    2130:	80 93 84 01 	sts	0x0184, r24

	/*Control the LDRs sampling flag*/
	if(Local_u16Counter == 400u)
    2134:	80 91 84 01 	lds	r24, 0x0184
    2138:	90 91 85 01 	lds	r25, 0x0185
    213c:	21 e0       	ldi	r18, 0x01	; 1
    213e:	80 39       	cpi	r24, 0x90	; 144
    2140:	92 07       	cpc	r25, r18
    2142:	31 f4       	brne	.+12     	; 0x2150 <Main_voidTimer0ISR+0x36>
	{
		/*Rise the sampling flag*/
		Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_READY;
    2144:	10 92 6e 01 	sts	0x016E, r1

		/*Reset the static counter*/
		Local_u16Counter = 0u;
    2148:	10 92 85 01 	sts	0x0185, r1
    214c:	10 92 84 01 	sts	0x0184, r1
	}
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <USART_voidInit>:

/**
 * @brief Function to initialize the USART peripheral.
 */
void USART_voidInit(void)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/*Define Temporary Variable for UCSRC*/
	uint8 Local_u8TempUCSRC = 0u;
    2160:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    2162:	aa e2       	ldi	r26, 0x2A	; 42
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	ea e2       	ldi	r30, 0x2A	; 42
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 61       	ori	r24, 0x10	; 16
    216e:	8c 93       	st	X, r24

	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    2170:	aa e2       	ldi	r26, 0x2A	; 42
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	ea e2       	ldi	r30, 0x2A	; 42
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 60       	ori	r24, 0x08	; 8
    217c:	8c 93       	st	X, r24

	/*Disable Double Transmission Speed*/
	CLR_BIT(UCSRA,UCSRA_U2X);
    217e:	ab e2       	ldi	r26, 0x2B	; 43
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	eb e2       	ldi	r30, 0x2B	; 43
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8d 7f       	andi	r24, 0xFD	; 253
    218a:	8c 93       	st	X, r24
	CLR_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_u8CHAR_SIZE == EIGHT_BITS_CHAR_SIZE
	Local_u8TempUCSRC &= CHAR_SIZE_MASK;
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	89 7f       	andi	r24, 0xF9	; 249
    2190:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	82 60       	ori	r24, 0x02	; 2
    2196:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	84 60       	ori	r24, 0x04	; 4
    219c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    219e:	aa e2       	ldi	r26, 0x2A	; 42
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ea e2       	ldi	r30, 0x2A	; 42
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8b 7f       	andi	r24, 0xFB	; 251
    21aa:	8c 93       	st	X, r24
	/*Select Synchronization Mode*/
#if USART_u8SYNCH_MODE == SYNCHRONOUS_MODE
	SET_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);

#elif USART_u8SYNCH_MODE == ASYNCHRONOUS_MODE
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	8f 7b       	andi	r24, 0xBF	; 191
    21b0:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8SYNCH_MODE configuration type
#endif

	/*Select Parity Mode*/
#if USART_u8PARITY_MODE == DISABLED
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM0);
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	8f 7e       	andi	r24, 0xEF	; 239
    21b6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM1);
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	8f 7d       	andi	r24, 0xDF	; 223
    21bc:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8PARITY_MODE configuration type
#endif

	/*Select Stop Bit Mode*/
#if USART_u8STOP_BITS_NUM == ONE_BIT
	CLR_BIT(Local_u8TempUCSRC,UCSRC_USBS);
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	87 7f       	andi	r24, 0xF7	; 247
    21c2:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong USART_u8STOP_BITS_NUM configuration type
#endif

	/*Select Mode of UCSRC Register to write on it*/
	SET_BIT(Local_u8TempUCSRC,UCSRC_URSEL);
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	80 68       	ori	r24, 0x80	; 128
    21c8:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8TempUCSRC;
    21ca:	e0 e4       	ldi	r30, 0x40	; 64
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	UBRRL = USART_u8BAUD_RATE;
    21d2:	e9 e2       	ldi	r30, 0x29	; 41
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	83 e3       	ldi	r24, 0x33	; 51
    21d8:	80 83       	st	Z, r24
}
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <USART_u8Send>:
 * @brief 				Function to transmit data by USART up to nine bits.
 * @param Copy_u16Data	Data that will be transmitted by USART.
 * @return				Error State.
 */
uint8 USART_u8Send(uint16 Copy_u16Data)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	27 97       	sbiw	r28, 0x07	; 7
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	9f 83       	std	Y+7, r25	; 0x07
    21f8:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    21fa:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	1a 82       	std	Y+2, r1	; 0x02
    2200:	1b 82       	std	Y+3, r1	; 0x03
    2202:	1c 82       	std	Y+4, r1	; 0x04

	/*Check if USART Transmitter is idle or not*/
	if((USART_u8TransmitBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    2204:	80 91 92 01 	lds	r24, 0x0192
    2208:	88 23       	and	r24, r24
    220a:	29 f0       	breq	.+10     	; 0x2216 <USART_u8Send+0x34>
    220c:	80 91 94 01 	lds	r24, 0x0194
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <USART_u8Send+0x34>
    2214:	41 c0       	rjmp	.+130    	; 0x2298 <USART_u8Send+0xb6>
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 92 01 	sts	0x0192, r24
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <USART_u8Send+0x52>

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	ab 81       	ldd	r26, Y+3	; 0x03
    2224:	bc 81       	ldd	r27, Y+4	; 0x04
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	a1 1d       	adc	r26, r1
    222a:	b1 1d       	adc	r27, r1
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	ab 83       	std	Y+3, r26	; 0x03
    2232:	bc 83       	std	Y+4, r27	; 0x04
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    2234:	eb e2       	ldi	r30, 0x2B	; 43
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	82 95       	swap	r24
    223c:	86 95       	lsr	r24
    223e:	87 70       	andi	r24, 0x07	; 7
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	81 70       	andi	r24, 0x01	; 1
    2246:	90 70       	andi	r25, 0x00	; 0
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	61 f4       	brne	.+24     	; 0x2264 <USART_u8Send+0x82>
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	ab 81       	ldd	r26, Y+3	; 0x03
    2252:	bc 81       	ldd	r27, Y+4	; 0x04
    2254:	80 3a       	cpi	r24, 0xA0	; 160
    2256:	26 e8       	ldi	r18, 0x86	; 134
    2258:	92 07       	cpc	r25, r18
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	a2 07       	cpc	r26, r18
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	b2 07       	cpc	r27, r18
    2262:	e8 f2       	brcs	.-70     	; 0x221e <USART_u8Send+0x3c>
		{
			Local_u32TimeoutCounter++;
		}

		/*Check why the loop has been broken*/
		if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	ab 81       	ldd	r26, Y+3	; 0x03
    226a:	bc 81       	ldd	r27, Y+4	; 0x04
    226c:	80 3a       	cpi	r24, 0xA0	; 160
    226e:	26 e8       	ldi	r18, 0x86	; 134
    2270:	92 07       	cpc	r25, r18
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	a2 07       	cpc	r26, r18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	b2 07       	cpc	r27, r18
    227a:	19 f4       	brne	.+6      	; 0x2282 <USART_u8Send+0xa0>
		{
			/*Loop is broken because the counter exceed timeout counts*/
			Local_u8ErrorState = TIMEOUT_ERR;
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	04 c0       	rjmp	.+8      	; 0x228a <USART_u8Send+0xa8>
		else
		{
			/*Loop is broken because the transmit buffer is ready*/

			/*Set the transmit data*/
			UDR = (uint8) Copy_u16Data;
    2282:	ec e2       	ldi	r30, 0x2C	; 44
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	80 83       	st	Z, r24
			}
#endif
		}


		if(USART_u8TransmitCallSrc == MAIN_CALL)
    228a:	80 91 94 01 	lds	r24, 0x0194
    228e:	88 23       	and	r24, r24
    2290:	29 f4       	brne	.+10     	; 0x229c <USART_u8Send+0xba>
		{
			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    2292:	10 92 92 01 	sts	0x0192, r1
    2296:	02 c0       	rjmp	.+4      	; 0x229c <USART_u8Send+0xba>
		}

	}
	else
	{
		Local_u8ErrorState = BUSY_STATE_ERR;
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error state*/
	return Local_u8ErrorState;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    229e:	27 96       	adiw	r28, 0x07	; 7
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <USART_u8Receive>:
 * @brief 				Function to receive data by USART up to nine bits.
 * @param Copy_pvData 	Pointer to return the data received.
 * @return 				Error State.
 */
uint8 USART_u8Receive(void *Copy_pvData)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <USART_u8Receive+0x6>
    22b6:	0f 92       	push	r0
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9b 83       	std	Y+3, r25	; 0x03
    22be:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    22c0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvData != NULL)
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	01 f1       	breq	.+64     	; 0x230a <USART_u8Receive+0x5a>
	{
		if((USART_u8ReceiveBusyState == IDLE) || (USART_u8ReceiveCallSrc == SYNCH_FUNC_CALL))
    22ca:	80 91 93 01 	lds	r24, 0x0193
    22ce:	88 23       	and	r24, r24
    22d0:	21 f0       	breq	.+8      	; 0x22da <USART_u8Receive+0x2a>
    22d2:	80 91 95 01 	lds	r24, 0x0195
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	a9 f4       	brne	.+42     	; 0x2304 <USART_u8Receive+0x54>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	80 93 93 01 	sts	0x0193, r24

			/*Polling until USART receive data in receive buffer*/
			while((GET_BIT(UCSRA,UCSRA_RXC)) == 0);
    22e0:	eb e2       	ldi	r30, 0x2B	; 43
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	88 23       	and	r24, r24
    22e8:	dc f7       	brge	.-10     	; 0x22e0 <USART_u8Receive+0x30>

			/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
			*(uint8 *) Copy_pvData = UDR;
    22ea:	aa 81       	ldd	r26, Y+2	; 0x02
    22ec:	bb 81       	ldd	r27, Y+3	; 0x03
    22ee:	ec e2       	ldi	r30, 0x2C	; 44
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8c 93       	st	X, r24
			case 0u: CLR_BIT((*(uint16 *) Copy_pvData),8u);	break;
			case 1u: SET_BIT((*(uint16 *) Copy_pvData),8u);	break;
			}
#endif

			if(USART_u8ReceiveCallSrc == MAIN_CALL)
    22f6:	80 91 95 01 	lds	r24, 0x0195
    22fa:	88 23       	and	r24, r24
    22fc:	41 f4       	brne	.+16     	; 0x230e <USART_u8Receive+0x5e>
			{
				/*Reset busy flag to be idle*/
				USART_u8ReceiveBusyState = IDLE;
    22fe:	10 92 93 01 	sts	0x0193, r1
    2302:	05 c0       	rjmp	.+10     	; 0x230e <USART_u8Receive+0x5e>
			}
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2304:	84 e0       	ldi	r24, 0x04	; 4
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	02 c0       	rjmp	.+4      	; 0x230e <USART_u8Receive+0x5e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <USART_u8SendBufferSynch>:
 * @param Copy_pvBufferArr	Pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return 					Error State.
 */
uint8 USART_u8SendBufferSynch(const void *Copy_pvBufferArr, uint8 Copy_u8BufferSize)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <USART_u8SendBufferSynch+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <USART_u8SendBufferSynch+0x8>
    2324:	00 d0       	rcall	.+0      	; 0x2326 <USART_u8SendBufferSynch+0xa>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	9d 83       	std	Y+5, r25	; 0x05
    232c:	8c 83       	std	Y+4, r24	; 0x04
    232e:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2330:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    2332:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    2334:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvBufferArr != NULL)
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	79 f1       	breq	.+94     	; 0x239c <USART_u8SendBufferSynch+0x80>
	{
		if(USART_u8TransmitBusyState == IDLE)
    233e:	80 91 92 01 	lds	r24, 0x0192
    2342:	88 23       	and	r24, r24
    2344:	41 f5       	brne	.+80     	; 0x2396 <USART_u8SendBufferSynch+0x7a>
		{
			/*Inform Others that transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 92 01 	sts	0x0192, r24

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 94 01 	sts	0x0194, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	17 c0       	rjmp	.+46     	; 0x2384 <USART_u8SendBufferSynch+0x68>
			{
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				/*Transmit each element with function USART_u8Send*/
				Local_u8ErrorFounder = USART_u8Send((uint8) (*((uint8 *) Copy_pvBufferArr + Local_u8Counter)));
    2356:	2c 81       	ldd	r18, Y+4	; 0x04
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	f9 01       	movw	r30, r18
    2362:	e8 0f       	add	r30, r24
    2364:	f9 1f       	adc	r31, r25
    2366:	80 81       	ld	r24, Z
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <USART_u8Send>
    2370:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8ErrorFounder = USART_u8Send(*((uint16 *) Copy_pvBufferArr + Local_u8Counter));

#endif

				/*Check that the transmission operation goes well*/
				if(Local_u8ErrorFounder != OK)
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	88 23       	and	r24, r24
    2376:	19 f0       	breq	.+6      	; 0x237e <USART_u8SendBufferSynch+0x62>
				{
					Local_u8ErrorState = NOK;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	8b 83       	std	Y+3, r24	; 0x03
    237c:	07 c0       	rjmp	.+14     	; 0x238c <USART_u8SendBufferSynch+0x70>

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	8f 5f       	subi	r24, 0xFF	; 255
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	99 81       	ldd	r25, Y+1	; 0x01
    2386:	8e 81       	ldd	r24, Y+6	; 0x06
    2388:	98 17       	cp	r25, r24
    238a:	28 f3       	brcs	.-54     	; 0x2356 <USART_u8SendBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Send that main is the caller from now*/
			USART_u8TransmitCallSrc = MAIN_CALL;
    238c:	10 92 94 01 	sts	0x0194, r1

			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    2390:	10 92 92 01 	sts	0x0192, r1
    2394:	05 c0       	rjmp	.+10     	; 0x23a0 <USART_u8SendBufferSynch+0x84>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2396:	84 e0       	ldi	r24, 0x04	; 4
    2398:	8b 83       	std	Y+3, r24	; 0x03
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <USART_u8SendBufferSynch+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23a2:	26 96       	adiw	r28, 0x06	; 6
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <USART_u8ReceiveBufferSynch>:
 * @param Copy_pu16BufferArr 	Pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize 	Size of the buffer array.
 * @return 						Error State.
 */
uint8 USART_u8ReceiveBufferSynch(uint8 *Copy_pu8BufferArr, uint8 Copy_u8BufferSize)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <USART_u8ReceiveBufferSynch+0x6>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <USART_u8ReceiveBufferSynch+0x8>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <USART_u8ReceiveBufferSynch+0xa>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9d 83       	std	Y+5, r25	; 0x05
    23c4:	8c 83       	std	Y+4, r24	; 0x04
    23c6:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    23c8:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    23ca:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    23cc:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pu8BufferArr != NULL)
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	59 f1       	breq	.+86     	; 0x242c <USART_u8ReceiveBufferSynch+0x78>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    23d6:	80 91 93 01 	lds	r24, 0x0193
    23da:	88 23       	and	r24, r24
    23dc:	21 f5       	brne	.+72     	; 0x2426 <USART_u8ReceiveBufferSynch+0x72>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	80 93 93 01 	sts	0x0193, r24

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	80 93 95 01 	sts	0x0195, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    23ea:	19 82       	std	Y+1, r1	; 0x01
    23ec:	13 c0       	rjmp	.+38     	; 0x2414 <USART_u8ReceiveBufferSynch+0x60>
			{
				/*Transmit each element with function USART_u8Transmit*/
				Local_u8ErrorFounder = USART_u8Receive(&Copy_pu8BufferArr[Local_u8Counter]);
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	8c 81       	ldd	r24, Y+4	; 0x04
    23f6:	9d 81       	ldd	r25, Y+5	; 0x05
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <USART_u8Receive>
    2400:	8a 83       	std	Y+2, r24	; 0x02

				/*Check that the Receive operation goes well*/
				if(Local_u8ErrorFounder != OK)
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	88 23       	and	r24, r24
    2406:	19 f0       	breq	.+6      	; 0x240e <USART_u8ReceiveBufferSynch+0x5a>
				{
					Local_u8ErrorState = NOK;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	07 c0       	rjmp	.+14     	; 0x241c <USART_u8ReceiveBufferSynch+0x68>

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	99 81       	ldd	r25, Y+1	; 0x01
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	98 17       	cp	r25, r24
    241a:	48 f3       	brcs	.-46     	; 0x23ee <USART_u8ReceiveBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Receive that main is the caller from now*/
			USART_u8ReceiveCallSrc = MAIN_CALL;
    241c:	10 92 95 01 	sts	0x0195, r1

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    2420:	10 92 93 01 	sts	0x0193, r1
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <USART_u8ReceiveBufferSynch+0x7c>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	8b 83       	std	Y+3, r24	; 0x03
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <USART_u8ReceiveBufferSynch+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2432:	26 96       	adiw	r28, 0x06	; 6
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <USART_u8SendBufferAsynch>:
 * @param Copy_u8BufferSize			Size of the buffer array.
 * @param Copy_pvNotificationFunc	Pointer to the notification function.
 * @return 							Error state.
 */
uint8 USART_u8SendBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <USART_u8SendBufferAsynch+0x6>
    244a:	00 d0       	rcall	.+0      	; 0x244c <USART_u8SendBufferAsynch+0x8>
    244c:	00 d0       	rcall	.+0      	; 0x244e <USART_u8SendBufferAsynch+0xa>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	9b 83       	std	Y+3, r25	; 0x03
    2454:	8a 83       	std	Y+2, r24	; 0x02
    2456:	6c 83       	std	Y+4, r22	; 0x04
    2458:	5e 83       	std	Y+6, r21	; 0x06
    245a:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    245c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	39 f1       	breq	.+78     	; 0x24b4 <USART_u8SendBufferAsynch+0x70>
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	19 f1       	breq	.+70     	; 0x24b4 <USART_u8SendBufferAsynch+0x70>
	{
		if(USART_u8TransmitBusyState == IDLE)
    246e:	80 91 92 01 	lds	r24, 0x0192
    2472:	88 23       	and	r24, r24
    2474:	e1 f4       	brne	.+56     	; 0x24ae <USART_u8SendBufferAsynch+0x6a>
		{
			/*Inform Others that Transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	80 93 92 01 	sts	0x0192, r24

			/*Initialize buffer pointer as global*/
			USART_pvTransmitBufferArr = Copy_pvBufferArr;
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	90 93 8a 01 	sts	0x018A, r25
    2484:	80 93 89 01 	sts	0x0189, r24

			/*Initialize buffer size as global*/
			USART_u8TransmitBufferSize = Copy_u8BufferSize;
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	80 93 88 01 	sts	0x0188, r24

			/*Initialize notification function as global*/
			USART_pvTransmitNotificationFunc = Copy_pvNotificationFunc;
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	90 93 87 01 	sts	0x0187, r25
    2496:	80 93 86 01 	sts	0x0186, r24

			/*Set the buffer counter to 0*/
			USART_u8TransmitBufferCounter = 0u;
    249a:	10 92 8b 01 	sts	0x018B, r1

			/*Enable USART Data Register Empty Interrupt*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    249e:	aa e2       	ldi	r26, 0x2A	; 42
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	ea e2       	ldi	r30, 0x2A	; 42
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 62       	ori	r24, 0x20	; 32
    24aa:	8c 93       	st	X, r24
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <USART_u8SendBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    24ae:	84 e0       	ldi	r24, 0x04	; 4
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <USART_u8SendBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ba:	26 96       	adiw	r28, 0x06	; 6
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <USART_u8ReceiveBufferAsynch>:
 * @param Copy_u8Bufferize 			Size of the buffer array.
 * @param Copy_pvNotificationFunc 	Pointer to the notification function.
 * @return 							Error State.
 */
uint8 USART_u8ReceiveBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8Bufferize, void (*Copy_pvNotificationFunc)(void))
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <USART_u8ReceiveBufferAsynch+0x6>
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <USART_u8ReceiveBufferAsynch+0x8>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <USART_u8ReceiveBufferAsynch+0xa>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
    24de:	6c 83       	std	Y+4, r22	; 0x04
    24e0:	5e 83       	std	Y+6, r21	; 0x06
    24e2:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    24e4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	39 f1       	breq	.+78     	; 0x253c <USART_u8ReceiveBufferAsynch+0x70>
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	19 f1       	breq	.+70     	; 0x253c <USART_u8ReceiveBufferAsynch+0x70>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    24f6:	80 91 93 01 	lds	r24, 0x0193
    24fa:	88 23       	and	r24, r24
    24fc:	e1 f4       	brne	.+56     	; 0x2536 <USART_u8ReceiveBufferAsynch+0x6a>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	80 93 93 01 	sts	0x0193, r24

			/*Initialize buffer pointer as global*/
			USART_pvReceiveBufferArr = Copy_pvBufferArr;
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	90 93 90 01 	sts	0x0190, r25
    250c:	80 93 8f 01 	sts	0x018F, r24

			/*Initialize buffer size as global*/
			USART_u8ReceiveBufferSize = Copy_u8Bufferize;
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	80 93 8e 01 	sts	0x018E, r24

			/*Initialize notification function as global*/
			USART_pvReceiveNotificationFunc = Copy_pvNotificationFunc;
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	90 93 8d 01 	sts	0x018D, r25
    251e:	80 93 8c 01 	sts	0x018C, r24

			/*Set the buffer counter to 0*/
			USART_u8ReceiveBufferCounter = 0u;
    2522:	10 92 91 01 	sts	0x0191, r1

			/*Enable USART RX Complete Interrupt*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    2526:	aa e2       	ldi	r26, 0x2A	; 42
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ea e2       	ldi	r30, 0x2A	; 42
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	80 68       	ori	r24, 0x80	; 128
    2532:	8c 93       	st	X, r24
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <USART_u8ReceiveBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <USART_u8ReceiveBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
}
    2542:	26 96       	adiw	r28, 0x06	; 6
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <__vector_13>:
/**
 * @brief USART Receive Complete ISR.
 */
void __vector_13 (void) __attribute((signal));
void __vector_13 (void)
{
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	0f 92       	push	r0
    255c:	11 24       	eor	r1, r1
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	*((uint8 *) USART_pvReceiveBufferArr + USART_u8ReceiveBufferCounter) = UDR;
    257e:	80 91 8f 01 	lds	r24, 0x018F
    2582:	90 91 90 01 	lds	r25, 0x0190
    2586:	9c 01       	movw	r18, r24
    2588:	80 91 91 01 	lds	r24, 0x0191
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	d9 01       	movw	r26, r18
    2592:	a8 0f       	add	r26, r24
    2594:	b9 1f       	adc	r27, r25
    2596:	ec e2       	ldi	r30, 0x2C	; 44
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8c 93       	st	X, r24
	case 1u: SET_BIT(*(((uint16 *) USART_pvReceiveBufferArr) + USART_u8ReceiveBufferCounter),8u);	break;
	}
#endif

	/*Increment Receive Buffer Counter*/
	USART_u8ReceiveBufferCounter++;
    259e:	80 91 91 01 	lds	r24, 0x0191
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	80 93 91 01 	sts	0x0191, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8ReceiveBufferCounter == USART_u8ReceiveBufferSize)
    25a8:	90 91 91 01 	lds	r25, 0x0191
    25ac:	80 91 8e 01 	lds	r24, 0x018E
    25b0:	98 17       	cp	r25, r24
    25b2:	a1 f4       	brne	.+40     	; 0x25dc <__vector_13+0x88>
	{
		/*Reset busy flag for receive channel to be idle*/
		USART_u8ReceiveBusyState = IDLE;
    25b4:	10 92 93 01 	sts	0x0193, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    25b8:	aa e2       	ldi	r26, 0x2A	; 42
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	ea e2       	ldi	r30, 0x2A	; 42
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8f 77       	andi	r24, 0x7F	; 127
    25c4:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvReceiveNotificationFunc != NULL)
    25c6:	80 91 8c 01 	lds	r24, 0x018C
    25ca:	90 91 8d 01 	lds	r25, 0x018D
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	29 f0       	breq	.+10     	; 0x25dc <__vector_13+0x88>
		{
			USART_pvReceiveNotificationFunc();
    25d2:	e0 91 8c 01 	lds	r30, 0x018C
    25d6:	f0 91 8d 01 	lds	r31, 0x018D
    25da:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	ff 91       	pop	r31
    25e2:	ef 91       	pop	r30
    25e4:	bf 91       	pop	r27
    25e6:	af 91       	pop	r26
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	7f 91       	pop	r23
    25ee:	6f 91       	pop	r22
    25f0:	5f 91       	pop	r21
    25f2:	4f 91       	pop	r20
    25f4:	3f 91       	pop	r19
    25f6:	2f 91       	pop	r18
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0f 90       	pop	r0
    25fe:	1f 90       	pop	r1
    2600:	18 95       	reti

00002602 <__vector_14>:
/**
 * @brief USART Data Register Empty ISR.
 */
void __vector_14 (void) __attribute((signal));
void __vector_14 (void)
{
    2602:	1f 92       	push	r1
    2604:	0f 92       	push	r0
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	0f 92       	push	r0
    260a:	11 24       	eor	r1, r1
    260c:	2f 93       	push	r18
    260e:	3f 93       	push	r19
    2610:	4f 93       	push	r20
    2612:	5f 93       	push	r21
    2614:	6f 93       	push	r22
    2616:	7f 93       	push	r23
    2618:	8f 93       	push	r24
    261a:	9f 93       	push	r25
    261c:	af 93       	push	r26
    261e:	bf 93       	push	r27
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	/*Set the data to the transmit register*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	UDR = *(((uint8 *) USART_pvTransmitBufferArr) + USART_u8TransmitBufferCounter);
    262c:	ac e2       	ldi	r26, 0x2C	; 44
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	80 91 89 01 	lds	r24, 0x0189
    2634:	90 91 8a 01 	lds	r25, 0x018A
    2638:	9c 01       	movw	r18, r24
    263a:	80 91 8b 01 	lds	r24, 0x018B
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	f9 01       	movw	r30, r18
    2644:	e8 0f       	add	r30, r24
    2646:	f9 1f       	adc	r31, r25
    2648:	80 81       	ld	r24, Z
    264a:	8c 93       	st	X, r24
	case 1u: SET_BIT(UCSRB,UCSRB_TXB8);	break;
	}
#endif

	/*Increment Transmit Buffer Counter*/
	USART_u8TransmitBufferCounter++;
    264c:	80 91 8b 01 	lds	r24, 0x018B
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 8b 01 	sts	0x018B, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8TransmitBufferCounter == USART_u8TransmitBufferSize)
    2656:	90 91 8b 01 	lds	r25, 0x018B
    265a:	80 91 88 01 	lds	r24, 0x0188
    265e:	98 17       	cp	r25, r24
    2660:	a1 f4       	brne	.+40     	; 0x268a <__vector_14+0x88>
	{
		/*Reset busy flag for transmit channel to be idle*/
		USART_u8TransmitBusyState = IDLE;
    2662:	10 92 92 01 	sts	0x0192, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    2666:	aa e2       	ldi	r26, 0x2A	; 42
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	ea e2       	ldi	r30, 0x2A	; 42
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8f 7d       	andi	r24, 0xDF	; 223
    2672:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvTransmitNotificationFunc != NULL)
    2674:	80 91 86 01 	lds	r24, 0x0186
    2678:	90 91 87 01 	lds	r25, 0x0187
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	29 f0       	breq	.+10     	; 0x268a <__vector_14+0x88>
		{
			USART_pvTransmitNotificationFunc();
    2680:	e0 91 86 01 	lds	r30, 0x0186
    2684:	f0 91 87 01 	lds	r31, 0x0187
    2688:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	ff 91       	pop	r31
    2690:	ef 91       	pop	r30
    2692:	bf 91       	pop	r27
    2694:	af 91       	pop	r26
    2696:	9f 91       	pop	r25
    2698:	8f 91       	pop	r24
    269a:	7f 91       	pop	r23
    269c:	6f 91       	pop	r22
    269e:	5f 91       	pop	r21
    26a0:	4f 91       	pop	r20
    26a2:	3f 91       	pop	r19
    26a4:	2f 91       	pop	r18
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

000026b0 <__vector_15>:
/**
 * @brief USART transmission Complete ISR.
 */
void __vector_15 (void) __attribute((signal));
void __vector_15 (void)
{
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	0f 92       	push	r0
    26b8:	11 24       	eor	r1, r1
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62

}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	0f 90       	pop	r0
    26cc:	1f 90       	pop	r1
    26ce:	18 95       	reti

000026d0 <TIMER0_u8Init>:
 * @brief 						Function to initialize timer 0 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 0 options.
 * @return						Error State.
 */
uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	27 97       	sbiw	r28, 0x07	; 7
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	9b 83       	std	Y+3, r25	; 0x03
    26e6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    26e8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	9b 81       	ldd	r25, Y+3	; 0x03
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <TIMER0_u8Init+0x24>
    26f2:	de c0       	rjmp	.+444    	; 0x28b0 <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    26f4:	80 91 96 01 	lds	r24, 0x0196
    26f8:	88 23       	and	r24, r24
    26fa:	09 f0       	breq	.+2      	; 0x26fe <TIMER0_u8Init+0x2e>
    26fc:	d6 c0       	rjmp	.+428    	; 0x28aa <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 96 01 	sts	0x0196, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2704:	ea 81       	ldd	r30, Y+2	; 0x02
    2706:	fb 81       	ldd	r31, Y+3	; 0x03
    2708:	81 81       	ldd	r24, Z+1	; 0x01
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	3f 83       	std	Y+7, r19	; 0x07
    2710:	2e 83       	std	Y+6, r18	; 0x06
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	9f 81       	ldd	r25, Y+7	; 0x07
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	91 05       	cpc	r25, r1
    271a:	21 f1       	breq	.+72     	; 0x2764 <TIMER0_u8Init+0x94>
    271c:	2e 81       	ldd	r18, Y+6	; 0x06
    271e:	3f 81       	ldd	r19, Y+7	; 0x07
    2720:	22 30       	cpi	r18, 0x02	; 2
    2722:	31 05       	cpc	r19, r1
    2724:	2c f4       	brge	.+10     	; 0x2730 <TIMER0_u8Init+0x60>
    2726:	8e 81       	ldd	r24, Y+6	; 0x06
    2728:	9f 81       	ldd	r25, Y+7	; 0x07
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	61 f0       	breq	.+24     	; 0x2746 <TIMER0_u8Init+0x76>
    272e:	46 c0       	rjmp	.+140    	; 0x27bc <TIMER0_u8Init+0xec>
    2730:	2e 81       	ldd	r18, Y+6	; 0x06
    2732:	3f 81       	ldd	r19, Y+7	; 0x07
    2734:	22 30       	cpi	r18, 0x02	; 2
    2736:	31 05       	cpc	r19, r1
    2738:	21 f1       	breq	.+72     	; 0x2782 <TIMER0_u8Init+0xb2>
    273a:	8e 81       	ldd	r24, Y+6	; 0x06
    273c:	9f 81       	ldd	r25, Y+7	; 0x07
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	91 05       	cpc	r25, r1
    2742:	71 f1       	breq	.+92     	; 0x27a0 <TIMER0_u8Init+0xd0>
    2744:	3b c0       	rjmp	.+118    	; 0x27bc <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    2746:	a3 e5       	ldi	r26, 0x53	; 83
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e3 e5       	ldi	r30, 0x53	; 83
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8f 7b       	andi	r24, 0xBF	; 191
    2752:	8c 93       	st	X, r24
    2754:	a3 e5       	ldi	r26, 0x53	; 83
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e3 e5       	ldi	r30, 0x53	; 83
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	87 7f       	andi	r24, 0xF7	; 247
    2760:	8c 93       	st	X, r24
    2762:	2c c0       	rjmp	.+88     	; 0x27bc <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    2764:	a3 e5       	ldi	r26, 0x53	; 83
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e3 e5       	ldi	r30, 0x53	; 83
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	80 64       	ori	r24, 0x40	; 64
    2770:	8c 93       	st	X, r24
    2772:	a3 e5       	ldi	r26, 0x53	; 83
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e3 e5       	ldi	r30, 0x53	; 83
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	87 7f       	andi	r24, 0xF7	; 247
    277e:	8c 93       	st	X, r24
    2780:	1d c0       	rjmp	.+58     	; 0x27bc <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    2782:	a3 e5       	ldi	r26, 0x53	; 83
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e3 e5       	ldi	r30, 0x53	; 83
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8f 7b       	andi	r24, 0xBF	; 191
    278e:	8c 93       	st	X, r24
    2790:	a3 e5       	ldi	r26, 0x53	; 83
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e3 e5       	ldi	r30, 0x53	; 83
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 60       	ori	r24, 0x08	; 8
    279c:	8c 93       	st	X, r24
    279e:	0e c0       	rjmp	.+28     	; 0x27bc <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    27a0:	a3 e5       	ldi	r26, 0x53	; 83
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e3 e5       	ldi	r30, 0x53	; 83
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 64       	ori	r24, 0x40	; 64
    27ac:	8c 93       	st	X, r24
    27ae:	a3 e5       	ldi	r26, 0x53	; 83
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e3 e5       	ldi	r30, 0x53	; 83
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	88 60       	ori	r24, 0x08	; 8
    27ba:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7c       	andi	r24, 0xCF	; 207
    27c8:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    27ca:	ea 81       	ldd	r30, Y+2	; 0x02
    27cc:	fb 81       	ldd	r31, Y+3	; 0x03
    27ce:	81 81       	ldd	r24, Z+1	; 0x01
    27d0:	88 23       	and	r24, r24
    27d2:	29 f0       	breq	.+10     	; 0x27de <TIMER0_u8Init+0x10e>
    27d4:	ea 81       	ldd	r30, Y+2	; 0x02
    27d6:	fb 81       	ldd	r31, Y+3	; 0x03
    27d8:	81 81       	ldd	r24, Z+1	; 0x01
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	e1 f4       	brne	.+56     	; 0x2816 <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    27de:	ea 81       	ldd	r30, Y+2	; 0x02
    27e0:	fb 81       	ldd	r31, Y+3	; 0x03
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	84 30       	cpi	r24, 0x04	; 4
    27e6:	a0 f4       	brcc	.+40     	; 0x2810 <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    27e8:	a3 e5       	ldi	r26, 0x53	; 83
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e3 e5       	ldi	r30, 0x53	; 83
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	28 2f       	mov	r18, r24
    27f4:	ea 81       	ldd	r30, Y+2	; 0x02
    27f6:	fb 81       	ldd	r31, Y+3	; 0x03
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	82 95       	swap	r24
    2800:	92 95       	swap	r25
    2802:	90 7f       	andi	r25, 0xF0	; 240
    2804:	98 27       	eor	r25, r24
    2806:	80 7f       	andi	r24, 0xF0	; 240
    2808:	98 27       	eor	r25, r24
    280a:	82 2b       	or	r24, r18
    280c:	8c 93       	st	X, r24
    280e:	3b c0       	rjmp	.+118    	; 0x2886 <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	38 c0       	rjmp	.+112    	; 0x2886 <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2816:	ea 81       	ldd	r30, Y+2	; 0x02
    2818:	fb 81       	ldd	r31, Y+3	; 0x03
    281a:	81 81       	ldd	r24, Z+1	; 0x01
    281c:	83 30       	cpi	r24, 0x03	; 3
    281e:	29 f0       	breq	.+10     	; 0x282a <TIMER0_u8Init+0x15a>
    2820:	ea 81       	ldd	r30, Y+2	; 0x02
    2822:	fb 81       	ldd	r31, Y+3	; 0x03
    2824:	81 81       	ldd	r24, Z+1	; 0x01
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	71 f5       	brne	.+92     	; 0x2886 <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    282a:	ea 81       	ldd	r30, Y+2	; 0x02
    282c:	fb 81       	ldd	r31, Y+3	; 0x03
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	3d 83       	std	Y+5, r19	; 0x05
    2836:	2c 83       	std	Y+4, r18	; 0x04
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	9d 81       	ldd	r25, Y+5	; 0x05
    283c:	84 30       	cpi	r24, 0x04	; 4
    283e:	91 05       	cpc	r25, r1
    2840:	81 f0       	breq	.+32     	; 0x2862 <TIMER0_u8Init+0x192>
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	25 30       	cpi	r18, 0x05	; 5
    2848:	31 05       	cpc	r19, r1
    284a:	99 f0       	breq	.+38     	; 0x2872 <TIMER0_u8Init+0x1a2>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	b9 f4       	brne	.+46     	; 0x2882 <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    2854:	e3 e5       	ldi	r30, 0x53	; 83
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	a3 e5       	ldi	r26, 0x53	; 83
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	8c 91       	ld	r24, X
    285e:	80 83       	st	Z, r24
    2860:	12 c0       	rjmp	.+36     	; 0x2886 <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    2862:	a3 e5       	ldi	r26, 0x53	; 83
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e3 e5       	ldi	r30, 0x53	; 83
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	80 62       	ori	r24, 0x20	; 32
    286e:	8c 93       	st	X, r24
    2870:	0a c0       	rjmp	.+20     	; 0x2886 <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2872:	a3 e5       	ldi	r26, 0x53	; 83
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e3 e5       	ldi	r30, 0x53	; 83
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	80 63       	ori	r24, 0x30	; 48
    287e:	8c 93       	st	X, r24
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    2886:	a3 e5       	ldi	r26, 0x53	; 83
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e3 e5       	ldi	r30, 0x53	; 83
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 7f       	andi	r24, 0xF8	; 248
    2892:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    2894:	a3 e5       	ldi	r26, 0x53	; 83
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e3 e5       	ldi	r30, 0x53	; 83
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	90 81       	ld	r25, Z
    289e:	ea 81       	ldd	r30, Y+2	; 0x02
    28a0:	fb 81       	ldd	r31, Y+3	; 0x03
    28a2:	80 81       	ld	r24, Z
    28a4:	89 2b       	or	r24, r25
    28a6:	8c 93       	st	X, r24
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    28aa:	84 e0       	ldi	r24, 0x04	; 4
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b6:	27 96       	adiw	r28, 0x07	; 7
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <TIMER1_u8Init>:
 * @brief 						Function to initialize timer 1 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 1 options.
 * @return						Error State.
 */
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	29 97       	sbiw	r28, 0x09	; 9
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	9b 83       	std	Y+3, r25	; 0x03
    28de:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    28e0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <TIMER1_u8Init+0x24>
    28ea:	71 c1       	rjmp	.+738    	; 0x2bce <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    28ec:	80 91 97 01 	lds	r24, 0x0197
    28f0:	88 23       	and	r24, r24
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <TIMER1_u8Init+0x2e>
    28f4:	69 c1       	rjmp	.+722    	; 0x2bc8 <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 97 01 	sts	0x0197, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    28fc:	af e4       	ldi	r26, 0x4F	; 79
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	ef e4       	ldi	r30, 0x4F	; 79
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8c 7f       	andi	r24, 0xFC	; 252
    2908:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    290a:	ae e4       	ldi	r26, 0x4E	; 78
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	ee e4       	ldi	r30, 0x4E	; 78
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	87 7e       	andi	r24, 0xE7	; 231
    2916:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    2918:	af e4       	ldi	r26, 0x4F	; 79
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ef e4       	ldi	r30, 0x4F	; 79
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	98 2f       	mov	r25, r24
    2924:	ea 81       	ldd	r30, Y+2	; 0x02
    2926:	fb 81       	ldd	r31, Y+3	; 0x03
    2928:	81 81       	ldd	r24, Z+1	; 0x01
    292a:	83 70       	andi	r24, 0x03	; 3
    292c:	89 2b       	or	r24, r25
    292e:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    2930:	ae e4       	ldi	r26, 0x4E	; 78
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ee e4       	ldi	r30, 0x4E	; 78
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	28 2f       	mov	r18, r24
    293c:	ea 81       	ldd	r30, Y+2	; 0x02
    293e:	fb 81       	ldd	r31, Y+3	; 0x03
    2940:	81 81       	ldd	r24, Z+1	; 0x01
    2942:	86 95       	lsr	r24
    2944:	86 95       	lsr	r24
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	83 70       	andi	r24, 0x03	; 3
    294c:	90 70       	andi	r25, 0x00	; 0
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	82 2b       	or	r24, r18
    295c:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    295e:	ea 81       	ldd	r30, Y+2	; 0x02
    2960:	fb 81       	ldd	r31, Y+3	; 0x03
    2962:	81 81       	ldd	r24, Z+1	; 0x01
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	39 87       	std	Y+9, r19	; 0x09
    296a:	28 87       	std	Y+8, r18	; 0x08
    296c:	88 85       	ldd	r24, Y+8	; 0x08
    296e:	99 85       	ldd	r25, Y+9	; 0x09
    2970:	8c 30       	cpi	r24, 0x0C	; 12
    2972:	91 05       	cpc	r25, r1
    2974:	b4 f4       	brge	.+44     	; 0x29a2 <TIMER1_u8Init+0xda>
    2976:	28 85       	ldd	r18, Y+8	; 0x08
    2978:	39 85       	ldd	r19, Y+9	; 0x09
    297a:	25 30       	cpi	r18, 0x05	; 5
    297c:	31 05       	cpc	r19, r1
    297e:	0c f0       	brlt	.+2      	; 0x2982 <TIMER1_u8Init+0xba>
    2980:	70 c0       	rjmp	.+224    	; 0x2a62 <TIMER1_u8Init+0x19a>
    2982:	88 85       	ldd	r24, Y+8	; 0x08
    2984:	99 85       	ldd	r25, Y+9	; 0x09
    2986:	84 30       	cpi	r24, 0x04	; 4
    2988:	91 05       	cpc	r25, r1
    298a:	c4 f4       	brge	.+48     	; 0x29bc <TIMER1_u8Init+0xf4>
    298c:	28 85       	ldd	r18, Y+8	; 0x08
    298e:	39 85       	ldd	r19, Y+9	; 0x09
    2990:	21 30       	cpi	r18, 0x01	; 1
    2992:	31 05       	cpc	r19, r1
    2994:	0c f0       	brlt	.+2      	; 0x2998 <TIMER1_u8Init+0xd0>
    2996:	65 c0       	rjmp	.+202    	; 0x2a62 <TIMER1_u8Init+0x19a>
    2998:	88 85       	ldd	r24, Y+8	; 0x08
    299a:	99 85       	ldd	r25, Y+9	; 0x09
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	71 f0       	breq	.+28     	; 0x29bc <TIMER1_u8Init+0xf4>
    29a0:	ff c0       	rjmp	.+510    	; 0x2ba0 <TIMER1_u8Init+0x2d8>
    29a2:	28 85       	ldd	r18, Y+8	; 0x08
    29a4:	39 85       	ldd	r19, Y+9	; 0x09
    29a6:	2c 30       	cpi	r18, 0x0C	; 12
    29a8:	31 05       	cpc	r19, r1
    29aa:	41 f0       	breq	.+16     	; 0x29bc <TIMER1_u8Init+0xf4>
    29ac:	88 85       	ldd	r24, Y+8	; 0x08
    29ae:	99 85       	ldd	r25, Y+9	; 0x09
    29b0:	0e 97       	sbiw	r24, 0x0e	; 14
    29b2:	82 30       	cpi	r24, 0x02	; 2
    29b4:	91 05       	cpc	r25, r1
    29b6:	08 f0       	brcs	.+2      	; 0x29ba <TIMER1_u8Init+0xf2>
    29b8:	f3 c0       	rjmp	.+486    	; 0x2ba0 <TIMER1_u8Init+0x2d8>
    29ba:	53 c0       	rjmp	.+166    	; 0x2a62 <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    29bc:	ea 81       	ldd	r30, Y+2	; 0x02
    29be:	fb 81       	ldd	r31, Y+3	; 0x03
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	84 30       	cpi	r24, 0x04	; 4
    29c4:	f0 f4       	brcc	.+60     	; 0x2a02 <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    29c6:	af e4       	ldi	r26, 0x4F	; 79
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	ef e4       	ldi	r30, 0x4F	; 79
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	8f 73       	andi	r24, 0x3F	; 63
    29d2:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    29d4:	af e4       	ldi	r26, 0x4F	; 79
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ef e4       	ldi	r30, 0x4F	; 79
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	28 2f       	mov	r18, r24
    29e0:	ea 81       	ldd	r30, Y+2	; 0x02
    29e2:	fb 81       	ldd	r31, Y+3	; 0x03
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	00 24       	eor	r0, r0
    29ec:	96 95       	lsr	r25
    29ee:	87 95       	ror	r24
    29f0:	07 94       	ror	r0
    29f2:	96 95       	lsr	r25
    29f4:	87 95       	ror	r24
    29f6:	07 94       	ror	r0
    29f8:	98 2f       	mov	r25, r24
    29fa:	80 2d       	mov	r24, r0
    29fc:	82 2b       	or	r24, r18
    29fe:	8c 93       	st	X, r24
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    2a02:	ea 81       	ldd	r30, Y+2	; 0x02
    2a04:	fb 81       	ldd	r31, Y+3	; 0x03
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	86 30       	cpi	r24, 0x06	; 6
    2a0a:	11 f0       	breq	.+4      	; 0x2a10 <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    2a10:	ea 81       	ldd	r30, Y+2	; 0x02
    2a12:	fb 81       	ldd	r31, Y+3	; 0x03
    2a14:	83 81       	ldd	r24, Z+3	; 0x03
    2a16:	84 30       	cpi	r24, 0x04	; 4
    2a18:	d8 f4       	brcc	.+54     	; 0x2a50 <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2a1a:	af e4       	ldi	r26, 0x4F	; 79
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	ef e4       	ldi	r30, 0x4F	; 79
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8f 7c       	andi	r24, 0xCF	; 207
    2a26:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    2a28:	af e4       	ldi	r26, 0x4F	; 79
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ef e4       	ldi	r30, 0x4F	; 79
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	28 2f       	mov	r18, r24
    2a34:	ea 81       	ldd	r30, Y+2	; 0x02
    2a36:	fb 81       	ldd	r31, Y+3	; 0x03
    2a38:	83 81       	ldd	r24, Z+3	; 0x03
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	82 95       	swap	r24
    2a40:	92 95       	swap	r25
    2a42:	90 7f       	andi	r25, 0xF0	; 240
    2a44:	98 27       	eor	r25, r24
    2a46:	80 7f       	andi	r24, 0xF0	; 240
    2a48:	98 27       	eor	r25, r24
    2a4a:	82 2b       	or	r24, r18
    2a4c:	8c 93       	st	X, r24
    2a4e:	aa c0       	rjmp	.+340    	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    2a50:	ea 81       	ldd	r30, Y+2	; 0x02
    2a52:	fb 81       	ldd	r31, Y+3	; 0x03
    2a54:	83 81       	ldd	r24, Z+3	; 0x03
    2a56:	86 30       	cpi	r24, 0x06	; 6
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <TIMER1_u8Init+0x194>
    2a5a:	a4 c0       	rjmp	.+328    	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	a1 c0       	rjmp	.+322    	; 0x2ba4 <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    2a62:	ea 81       	ldd	r30, Y+2	; 0x02
    2a64:	fb 81       	ldd	r31, Y+3	; 0x03
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	3f 83       	std	Y+7, r19	; 0x07
    2a6e:	2e 83       	std	Y+6, r18	; 0x06
    2a70:	8e 81       	ldd	r24, Y+6	; 0x06
    2a72:	9f 81       	ldd	r25, Y+7	; 0x07
    2a74:	84 30       	cpi	r24, 0x04	; 4
    2a76:	91 05       	cpc	r25, r1
    2a78:	19 f1       	breq	.+70     	; 0x2ac0 <TIMER1_u8Init+0x1f8>
    2a7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a7c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a7e:	25 30       	cpi	r18, 0x05	; 5
    2a80:	31 05       	cpc	r19, r1
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <TIMER1_u8Init+0x1c6>
    2a84:	8e 81       	ldd	r24, Y+6	; 0x06
    2a86:	9f 81       	ldd	r25, Y+7	; 0x07
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	61 f0       	breq	.+24     	; 0x2aa4 <TIMER1_u8Init+0x1dc>
    2a8c:	37 c0       	rjmp	.+110    	; 0x2afc <TIMER1_u8Init+0x234>
    2a8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2a90:	3f 81       	ldd	r19, Y+7	; 0x07
    2a92:	25 30       	cpi	r18, 0x05	; 5
    2a94:	31 05       	cpc	r19, r1
    2a96:	19 f1       	breq	.+70     	; 0x2ade <TIMER1_u8Init+0x216>
    2a98:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9c:	86 30       	cpi	r24, 0x06	; 6
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	79 f1       	breq	.+94     	; 0x2b00 <TIMER1_u8Init+0x238>
    2aa2:	2c c0       	rjmp	.+88     	; 0x2afc <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2aa4:	af e4       	ldi	r26, 0x4F	; 79
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	ef e4       	ldi	r30, 0x4F	; 79
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	8f 73       	andi	r24, 0x3F	; 63
    2ab0:	8c 93       	st	X, r24
    2ab2:	af e4       	ldi	r26, 0x4F	; 79
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ef e4       	ldi	r30, 0x4F	; 79
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8c 93       	st	X, r24
    2abe:	20 c0       	rjmp	.+64     	; 0x2b00 <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e4       	ldi	r30, 0x4F	; 79
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 73       	andi	r24, 0x3F	; 63
    2acc:	8c 93       	st	X, r24
    2ace:	af e4       	ldi	r26, 0x4F	; 79
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ef e4       	ldi	r30, 0x4F	; 79
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 68       	ori	r24, 0x80	; 128
    2ada:	8c 93       	st	X, r24
    2adc:	11 c0       	rjmp	.+34     	; 0x2b00 <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2ade:	af e4       	ldi	r26, 0x4F	; 79
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	ef e4       	ldi	r30, 0x4F	; 79
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	8f 73       	andi	r24, 0x3F	; 63
    2aea:	8c 93       	st	X, r24
    2aec:	af e4       	ldi	r26, 0x4F	; 79
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ef e4       	ldi	r30, 0x4F	; 79
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 6c       	ori	r24, 0xC0	; 192
    2af8:	8c 93       	st	X, r24
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    2b00:	ea 81       	ldd	r30, Y+2	; 0x02
    2b02:	fb 81       	ldd	r31, Y+3	; 0x03
    2b04:	83 81       	ldd	r24, Z+3	; 0x03
    2b06:	28 2f       	mov	r18, r24
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	3d 83       	std	Y+5, r19	; 0x05
    2b0c:	2c 83       	std	Y+4, r18	; 0x04
    2b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b10:	9d 81       	ldd	r25, Y+5	; 0x05
    2b12:	84 30       	cpi	r24, 0x04	; 4
    2b14:	91 05       	cpc	r25, r1
    2b16:	19 f1       	breq	.+70     	; 0x2b5e <TIMER1_u8Init+0x296>
    2b18:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b1c:	25 30       	cpi	r18, 0x05	; 5
    2b1e:	31 05       	cpc	r19, r1
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <TIMER1_u8Init+0x264>
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	9d 81       	ldd	r25, Y+5	; 0x05
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	61 f0       	breq	.+24     	; 0x2b42 <TIMER1_u8Init+0x27a>
    2b2a:	37 c0       	rjmp	.+110    	; 0x2b9a <TIMER1_u8Init+0x2d2>
    2b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b30:	25 30       	cpi	r18, 0x05	; 5
    2b32:	31 05       	cpc	r19, r1
    2b34:	19 f1       	breq	.+70     	; 0x2b7c <TIMER1_u8Init+0x2b4>
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3a:	86 30       	cpi	r24, 0x06	; 6
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	91 f1       	breq	.+100    	; 0x2ba4 <TIMER1_u8Init+0x2dc>
    2b40:	2c c0       	rjmp	.+88     	; 0x2b9a <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    2b42:	af e4       	ldi	r26, 0x4F	; 79
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ef e4       	ldi	r30, 0x4F	; 79
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8f 7c       	andi	r24, 0xCF	; 207
    2b4e:	8c 93       	st	X, r24
    2b50:	af e4       	ldi	r26, 0x4F	; 79
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ef e4       	ldi	r30, 0x4F	; 79
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8c 93       	st	X, r24
    2b5c:	23 c0       	rjmp	.+70     	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    2b5e:	af e4       	ldi	r26, 0x4F	; 79
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	ef e4       	ldi	r30, 0x4F	; 79
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8f 7c       	andi	r24, 0xCF	; 207
    2b6a:	8c 93       	st	X, r24
    2b6c:	af e4       	ldi	r26, 0x4F	; 79
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	ef e4       	ldi	r30, 0x4F	; 79
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	80 62       	ori	r24, 0x20	; 32
    2b78:	8c 93       	st	X, r24
    2b7a:	14 c0       	rjmp	.+40     	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    2b7c:	af e4       	ldi	r26, 0x4F	; 79
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	ef e4       	ldi	r30, 0x4F	; 79
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7c       	andi	r24, 0xCF	; 207
    2b88:	8c 93       	st	X, r24
    2b8a:	af e4       	ldi	r26, 0x4F	; 79
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ef e4       	ldi	r30, 0x4F	; 79
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	80 63       	ori	r24, 0x30	; 48
    2b96:	8c 93       	st	X, r24
    2b98:	05 c0       	rjmp	.+10     	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    2ba4:	ae e4       	ldi	r26, 0x4E	; 78
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	ee e4       	ldi	r30, 0x4E	; 78
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	88 7f       	andi	r24, 0xF8	; 248
    2bb0:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    2bb2:	ae e4       	ldi	r26, 0x4E	; 78
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	ee e4       	ldi	r30, 0x4E	; 78
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	90 81       	ld	r25, Z
    2bbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc0:	80 81       	ld	r24, Z
    2bc2:	89 2b       	or	r24, r25
    2bc4:	8c 93       	st	X, r24
    2bc6:	05 c0       	rjmp	.+10     	; 0x2bd2 <TIMER1_u8Init+0x30a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2bc8:	84 e0       	ldi	r24, 0x04	; 4
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bd4:	29 96       	adiw	r28, 0x09	; 9
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <TIMER2_u8Init>:
 * @brief 						Function to initialize timer 2 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 2 otions.
 * @return						Error State.
 */
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	27 97       	sbiw	r28, 0x07	; 7
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2bfe:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	9b 81       	ldd	r25, Y+3	; 0x03
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <TIMER2_u8Init+0x24>
    2c08:	de c0       	rjmp	.+444    	; 0x2dc6 <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    2c0a:	80 91 98 01 	lds	r24, 0x0198
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <TIMER2_u8Init+0x2e>
    2c12:	d6 c0       	rjmp	.+428    	; 0x2dc0 <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	80 93 98 01 	sts	0x0198, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	81 81       	ldd	r24, Z+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	3f 83       	std	Y+7, r19	; 0x07
    2c26:	2e 83       	std	Y+6, r18	; 0x06
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	81 30       	cpi	r24, 0x01	; 1
    2c2e:	91 05       	cpc	r25, r1
    2c30:	21 f1       	breq	.+72     	; 0x2c7a <TIMER2_u8Init+0x94>
    2c32:	2e 81       	ldd	r18, Y+6	; 0x06
    2c34:	3f 81       	ldd	r19, Y+7	; 0x07
    2c36:	22 30       	cpi	r18, 0x02	; 2
    2c38:	31 05       	cpc	r19, r1
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <TIMER2_u8Init+0x60>
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	61 f0       	breq	.+24     	; 0x2c5c <TIMER2_u8Init+0x76>
    2c44:	46 c0       	rjmp	.+140    	; 0x2cd2 <TIMER2_u8Init+0xec>
    2c46:	2e 81       	ldd	r18, Y+6	; 0x06
    2c48:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	21 f1       	breq	.+72     	; 0x2c98 <TIMER2_u8Init+0xb2>
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	9f 81       	ldd	r25, Y+7	; 0x07
    2c54:	83 30       	cpi	r24, 0x03	; 3
    2c56:	91 05       	cpc	r25, r1
    2c58:	71 f1       	breq	.+92     	; 0x2cb6 <TIMER2_u8Init+0xd0>
    2c5a:	3b c0       	rjmp	.+118    	; 0x2cd2 <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2c5c:	a5 e4       	ldi	r26, 0x45	; 69
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e5 e4       	ldi	r30, 0x45	; 69
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 7b       	andi	r24, 0xBF	; 191
    2c68:	8c 93       	st	X, r24
    2c6a:	a5 e4       	ldi	r26, 0x45	; 69
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e5 e4       	ldi	r30, 0x45	; 69
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	87 7f       	andi	r24, 0xF7	; 247
    2c76:	8c 93       	st	X, r24
    2c78:	2c c0       	rjmp	.+88     	; 0x2cd2 <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2c7a:	a5 e4       	ldi	r26, 0x45	; 69
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e5 e4       	ldi	r30, 0x45	; 69
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	80 64       	ori	r24, 0x40	; 64
    2c86:	8c 93       	st	X, r24
    2c88:	a5 e4       	ldi	r26, 0x45	; 69
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e5 e4       	ldi	r30, 0x45	; 69
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	87 7f       	andi	r24, 0xF7	; 247
    2c94:	8c 93       	st	X, r24
    2c96:	1d c0       	rjmp	.+58     	; 0x2cd2 <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2c98:	a5 e4       	ldi	r26, 0x45	; 69
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e5 e4       	ldi	r30, 0x45	; 69
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 7b       	andi	r24, 0xBF	; 191
    2ca4:	8c 93       	st	X, r24
    2ca6:	a5 e4       	ldi	r26, 0x45	; 69
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e5 e4       	ldi	r30, 0x45	; 69
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	88 60       	ori	r24, 0x08	; 8
    2cb2:	8c 93       	st	X, r24
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2cb6:	a5 e4       	ldi	r26, 0x45	; 69
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e5 e4       	ldi	r30, 0x45	; 69
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	80 64       	ori	r24, 0x40	; 64
    2cc2:	8c 93       	st	X, r24
    2cc4:	a5 e4       	ldi	r26, 0x45	; 69
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e5 e4       	ldi	r30, 0x45	; 69
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 60       	ori	r24, 0x08	; 8
    2cd0:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    2cd2:	a5 e4       	ldi	r26, 0x45	; 69
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e5 e4       	ldi	r30, 0x45	; 69
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	8f 7c       	andi	r24, 0xCF	; 207
    2cde:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2ce0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce4:	81 81       	ldd	r24, Z+1	; 0x01
    2ce6:	88 23       	and	r24, r24
    2ce8:	29 f0       	breq	.+10     	; 0x2cf4 <TIMER2_u8Init+0x10e>
    2cea:	ea 81       	ldd	r30, Y+2	; 0x02
    2cec:	fb 81       	ldd	r31, Y+3	; 0x03
    2cee:	81 81       	ldd	r24, Z+1	; 0x01
    2cf0:	82 30       	cpi	r24, 0x02	; 2
    2cf2:	e1 f4       	brne	.+56     	; 0x2d2c <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    2cf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	84 30       	cpi	r24, 0x04	; 4
    2cfc:	a0 f4       	brcc	.+40     	; 0x2d26 <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    2cfe:	a5 e4       	ldi	r26, 0x45	; 69
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e5 e4       	ldi	r30, 0x45	; 69
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	28 2f       	mov	r18, r24
    2d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	82 95       	swap	r24
    2d16:	92 95       	swap	r25
    2d18:	90 7f       	andi	r25, 0xF0	; 240
    2d1a:	98 27       	eor	r25, r24
    2d1c:	80 7f       	andi	r24, 0xF0	; 240
    2d1e:	98 27       	eor	r25, r24
    2d20:	82 2b       	or	r24, r18
    2d22:	8c 93       	st	X, r24
    2d24:	3b c0       	rjmp	.+118    	; 0x2d9c <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	38 c0       	rjmp	.+112    	; 0x2d9c <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d30:	81 81       	ldd	r24, Z+1	; 0x01
    2d32:	83 30       	cpi	r24, 0x03	; 3
    2d34:	29 f0       	breq	.+10     	; 0x2d40 <TIMER2_u8Init+0x15a>
    2d36:	ea 81       	ldd	r30, Y+2	; 0x02
    2d38:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3a:	81 81       	ldd	r24, Z+1	; 0x01
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	71 f5       	brne	.+92     	; 0x2d9c <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    2d40:	ea 81       	ldd	r30, Y+2	; 0x02
    2d42:	fb 81       	ldd	r31, Y+3	; 0x03
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3d 83       	std	Y+5, r19	; 0x05
    2d4c:	2c 83       	std	Y+4, r18	; 0x04
    2d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d50:	9d 81       	ldd	r25, Y+5	; 0x05
    2d52:	84 30       	cpi	r24, 0x04	; 4
    2d54:	91 05       	cpc	r25, r1
    2d56:	81 f0       	breq	.+32     	; 0x2d78 <TIMER2_u8Init+0x192>
    2d58:	2c 81       	ldd	r18, Y+4	; 0x04
    2d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d5c:	25 30       	cpi	r18, 0x05	; 5
    2d5e:	31 05       	cpc	r19, r1
    2d60:	99 f0       	breq	.+38     	; 0x2d88 <TIMER2_u8Init+0x1a2>
    2d62:	8c 81       	ldd	r24, Y+4	; 0x04
    2d64:	9d 81       	ldd	r25, Y+5	; 0x05
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	b9 f4       	brne	.+46     	; 0x2d98 <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    2d6a:	e5 e4       	ldi	r30, 0x45	; 69
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	a5 e4       	ldi	r26, 0x45	; 69
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	8c 91       	ld	r24, X
    2d74:	80 83       	st	Z, r24
    2d76:	12 c0       	rjmp	.+36     	; 0x2d9c <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    2d78:	a5 e4       	ldi	r26, 0x45	; 69
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e5 e4       	ldi	r30, 0x45	; 69
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	80 62       	ori	r24, 0x20	; 32
    2d84:	8c 93       	st	X, r24
    2d86:	0a c0       	rjmp	.+20     	; 0x2d9c <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2d88:	a5 e4       	ldi	r26, 0x45	; 69
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e5 e4       	ldi	r30, 0x45	; 69
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	80 63       	ori	r24, 0x30	; 48
    2d94:	8c 93       	st	X, r24
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    2d9c:	a5 e4       	ldi	r26, 0x45	; 69
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e5 e4       	ldi	r30, 0x45	; 69
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	88 7f       	andi	r24, 0xF8	; 248
    2da8:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2daa:	a5 e4       	ldi	r26, 0x45	; 69
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e5 e4       	ldi	r30, 0x45	; 69
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	90 81       	ld	r25, Z
    2db4:	ea 81       	ldd	r30, Y+2	; 0x02
    2db6:	fb 81       	ldd	r31, Y+3	; 0x03
    2db8:	80 81       	ld	r24, Z
    2dba:	89 2b       	or	r24, r25
    2dbc:	8c 93       	st	X, r24
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2dc0:	84 e0       	ldi	r24, 0x04	; 4
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dcc:	27 96       	adiw	r28, 0x07	; 7
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <TIMER0_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <TIMER0_u8SetCompOutMode+0x6>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <TIMER0_u8SetCompOutMode+0x8>
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <TIMER0_u8SetCompOutMode+0xa>
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	9b 83       	std	Y+3, r25	; 0x03
    2dee:	8a 83       	std	Y+2, r24	; 0x02
    2df0:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2df2:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	9b 81       	ldd	r25, Y+3	; 0x03
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <TIMER0_u8SetCompOutMode+0x20>
    2dfc:	60 c0       	rjmp	.+192    	; 0x2ebe <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    2dfe:	a3 e5       	ldi	r26, 0x53	; 83
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e3 e5       	ldi	r30, 0x53	; 83
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	8f 7c       	andi	r24, 0xCF	; 207
    2e0a:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2e0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e10:	81 81       	ldd	r24, Z+1	; 0x01
    2e12:	88 23       	and	r24, r24
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <TIMER0_u8SetCompOutMode+0x42>
    2e16:	ea 81       	ldd	r30, Y+2	; 0x02
    2e18:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1a:	81 81       	ldd	r24, Z+1	; 0x01
    2e1c:	82 30       	cpi	r24, 0x02	; 2
    2e1e:	c1 f4       	brne	.+48     	; 0x2e50 <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2e20:	8c 81       	ldd	r24, Y+4	; 0x04
    2e22:	84 30       	cpi	r24, 0x04	; 4
    2e24:	90 f4       	brcc	.+36     	; 0x2e4a <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    2e26:	a3 e5       	ldi	r26, 0x53	; 83
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e3 e5       	ldi	r30, 0x53	; 83
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	28 2f       	mov	r18, r24
    2e32:	8c 81       	ldd	r24, Y+4	; 0x04
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	82 95       	swap	r24
    2e3a:	92 95       	swap	r25
    2e3c:	90 7f       	andi	r25, 0xF0	; 240
    2e3e:	98 27       	eor	r25, r24
    2e40:	80 7f       	andi	r24, 0xF0	; 240
    2e42:	98 27       	eor	r25, r24
    2e44:	82 2b       	or	r24, r18
    2e46:	8c 93       	st	X, r24
    2e48:	3c c0       	rjmp	.+120    	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	39 c0       	rjmp	.+114    	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2e50:	ea 81       	ldd	r30, Y+2	; 0x02
    2e52:	fb 81       	ldd	r31, Y+3	; 0x03
    2e54:	81 81       	ldd	r24, Z+1	; 0x01
    2e56:	83 30       	cpi	r24, 0x03	; 3
    2e58:	29 f0       	breq	.+10     	; 0x2e64 <TIMER0_u8SetCompOutMode+0x86>
    2e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e5e:	81 81       	ldd	r24, Z+1	; 0x01
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	79 f5       	brne	.+94     	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    2e64:	8c 81       	ldd	r24, Y+4	; 0x04
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	3e 83       	std	Y+6, r19	; 0x06
    2e6c:	2d 83       	std	Y+5, r18	; 0x05
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	84 30       	cpi	r24, 0x04	; 4
    2e74:	91 05       	cpc	r25, r1
    2e76:	81 f0       	breq	.+32     	; 0x2e98 <TIMER0_u8SetCompOutMode+0xba>
    2e78:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7c:	25 30       	cpi	r18, 0x05	; 5
    2e7e:	31 05       	cpc	r19, r1
    2e80:	99 f0       	breq	.+38     	; 0x2ea8 <TIMER0_u8SetCompOutMode+0xca>
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	b9 f4       	brne	.+46     	; 0x2eb8 <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    2e8a:	e3 e5       	ldi	r30, 0x53	; 83
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	a3 e5       	ldi	r26, 0x53	; 83
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	8c 91       	ld	r24, X
    2e94:	80 83       	st	Z, r24
    2e96:	15 c0       	rjmp	.+42     	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    2e98:	a3 e5       	ldi	r26, 0x53	; 83
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e3 e5       	ldi	r30, 0x53	; 83
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	80 62       	ori	r24, 0x20	; 32
    2ea4:	8c 93       	st	X, r24
    2ea6:	0d c0       	rjmp	.+26     	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2ea8:	a3 e5       	ldi	r26, 0x53	; 83
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e3 e5       	ldi	r30, 0x53	; 83
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	80 63       	ori	r24, 0x30	; 48
    2eb4:	8c 93       	st	X, r24
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec4:	26 96       	adiw	r28, 0x06	; 6
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <TIMER1_u8SetCompOutModeChA>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	28 97       	sbiw	r28, 0x08	; 8
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	9b 83       	std	Y+3, r25	; 0x03
    2eec:	8a 83       	std	Y+2, r24	; 0x02
    2eee:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2ef0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <TIMER1_u8SetCompOutModeChA+0x26>
    2efa:	a5 c0       	rjmp	.+330    	; 0x3046 <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    2efc:	ea 81       	ldd	r30, Y+2	; 0x02
    2efe:	fb 81       	ldd	r31, Y+3	; 0x03
    2f00:	81 81       	ldd	r24, Z+1	; 0x01
    2f02:	28 2f       	mov	r18, r24
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	38 87       	std	Y+8, r19	; 0x08
    2f08:	2f 83       	std	Y+7, r18	; 0x07
    2f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0c:	98 85       	ldd	r25, Y+8	; 0x08
    2f0e:	8c 30       	cpi	r24, 0x0C	; 12
    2f10:	91 05       	cpc	r25, r1
    2f12:	ac f4       	brge	.+42     	; 0x2f3e <TIMER1_u8SetCompOutModeChA+0x68>
    2f14:	2f 81       	ldd	r18, Y+7	; 0x07
    2f16:	38 85       	ldd	r19, Y+8	; 0x08
    2f18:	25 30       	cpi	r18, 0x05	; 5
    2f1a:	31 05       	cpc	r19, r1
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <TIMER1_u8SetCompOutModeChA+0x4a>
    2f1e:	42 c0       	rjmp	.+132    	; 0x2fa4 <TIMER1_u8SetCompOutModeChA+0xce>
    2f20:	8f 81       	ldd	r24, Y+7	; 0x07
    2f22:	98 85       	ldd	r25, Y+8	; 0x08
    2f24:	84 30       	cpi	r24, 0x04	; 4
    2f26:	91 05       	cpc	r25, r1
    2f28:	bc f4       	brge	.+46     	; 0x2f58 <TIMER1_u8SetCompOutModeChA+0x82>
    2f2a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f2c:	38 85       	ldd	r19, Y+8	; 0x08
    2f2e:	21 30       	cpi	r18, 0x01	; 1
    2f30:	31 05       	cpc	r19, r1
    2f32:	c4 f5       	brge	.+112    	; 0x2fa4 <TIMER1_u8SetCompOutModeChA+0xce>
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	98 85       	ldd	r25, Y+8	; 0x08
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	71 f0       	breq	.+28     	; 0x2f58 <TIMER1_u8SetCompOutModeChA+0x82>
    2f3c:	81 c0       	rjmp	.+258    	; 0x3040 <TIMER1_u8SetCompOutModeChA+0x16a>
    2f3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f40:	38 85       	ldd	r19, Y+8	; 0x08
    2f42:	2c 30       	cpi	r18, 0x0C	; 12
    2f44:	31 05       	cpc	r19, r1
    2f46:	41 f0       	breq	.+16     	; 0x2f58 <TIMER1_u8SetCompOutModeChA+0x82>
    2f48:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4a:	98 85       	ldd	r25, Y+8	; 0x08
    2f4c:	0e 97       	sbiw	r24, 0x0e	; 14
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	91 05       	cpc	r25, r1
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <TIMER1_u8SetCompOutModeChA+0x80>
    2f54:	75 c0       	rjmp	.+234    	; 0x3040 <TIMER1_u8SetCompOutModeChA+0x16a>
    2f56:	26 c0       	rjmp	.+76     	; 0x2fa4 <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2f58:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5a:	84 30       	cpi	r24, 0x04	; 4
    2f5c:	e0 f4       	brcc	.+56     	; 0x2f96 <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    2f5e:	af e4       	ldi	r26, 0x4F	; 79
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	ef e4       	ldi	r30, 0x4F	; 79
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	8f 73       	andi	r24, 0x3F	; 63
    2f6a:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    2f6c:	af e4       	ldi	r26, 0x4F	; 79
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	ef e4       	ldi	r30, 0x4F	; 79
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	28 2f       	mov	r18, r24
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	00 24       	eor	r0, r0
    2f80:	96 95       	lsr	r25
    2f82:	87 95       	ror	r24
    2f84:	07 94       	ror	r0
    2f86:	96 95       	lsr	r25
    2f88:	87 95       	ror	r24
    2f8a:	07 94       	ror	r0
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	80 2d       	mov	r24, r0
    2f90:	82 2b       	or	r24, r18
    2f92:	8c 93       	st	X, r24
    2f94:	5a c0       	rjmp	.+180    	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	86 30       	cpi	r24, 0x06	; 6
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <TIMER1_u8SetCompOutModeChA+0xc8>
    2f9c:	56 c0       	rjmp	.+172    	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	53 c0       	rjmp	.+166    	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    2fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	3e 83       	std	Y+6, r19	; 0x06
    2fac:	2d 83       	std	Y+5, r18	; 0x05
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	84 30       	cpi	r24, 0x04	; 4
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	19 f1       	breq	.+70     	; 0x2ffe <TIMER1_u8SetCompOutModeChA+0x128>
    2fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fba:	3e 81       	ldd	r19, Y+6	; 0x06
    2fbc:	25 30       	cpi	r18, 0x05	; 5
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	2c f4       	brge	.+10     	; 0x2fcc <TIMER1_u8SetCompOutModeChA+0xf6>
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	61 f0       	breq	.+24     	; 0x2fe2 <TIMER1_u8SetCompOutModeChA+0x10c>
    2fca:	37 c0       	rjmp	.+110    	; 0x303a <TIMER1_u8SetCompOutModeChA+0x164>
    2fcc:	2d 81       	ldd	r18, Y+5	; 0x05
    2fce:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd0:	25 30       	cpi	r18, 0x05	; 5
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	19 f1       	breq	.+70     	; 0x301c <TIMER1_u8SetCompOutModeChA+0x146>
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	86 30       	cpi	r24, 0x06	; 6
    2fdc:	91 05       	cpc	r25, r1
    2fde:	a9 f1       	breq	.+106    	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
    2fe0:	2c c0       	rjmp	.+88     	; 0x303a <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2fe2:	af e4       	ldi	r26, 0x4F	; 79
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	ef e4       	ldi	r30, 0x4F	; 79
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8f 73       	andi	r24, 0x3F	; 63
    2fee:	8c 93       	st	X, r24
    2ff0:	af e4       	ldi	r26, 0x4F	; 79
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ef e4       	ldi	r30, 0x4F	; 79
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8c 93       	st	X, r24
    2ffc:	26 c0       	rjmp	.+76     	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2ffe:	af e4       	ldi	r26, 0x4F	; 79
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	ef e4       	ldi	r30, 0x4F	; 79
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	8f 73       	andi	r24, 0x3F	; 63
    300a:	8c 93       	st	X, r24
    300c:	af e4       	ldi	r26, 0x4F	; 79
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	ef e4       	ldi	r30, 0x4F	; 79
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 68       	ori	r24, 0x80	; 128
    3018:	8c 93       	st	X, r24
    301a:	17 c0       	rjmp	.+46     	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    301c:	af e4       	ldi	r26, 0x4F	; 79
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ef e4       	ldi	r30, 0x4F	; 79
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	8f 73       	andi	r24, 0x3F	; 63
    3028:	8c 93       	st	X, r24
    302a:	af e4       	ldi	r26, 0x4F	; 79
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	ef e4       	ldi	r30, 0x4F	; 79
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	80 6c       	ori	r24, 0xC0	; 192
    3036:	8c 93       	st	X, r24
    3038:	08 c0       	rjmp	.+16     	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	05 c0       	rjmp	.+10     	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	02 c0       	rjmp	.+4      	; 0x304a <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
}
    304c:	28 96       	adiw	r28, 0x08	; 8
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <TIMER1_u8SetCompOutModeChB>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	28 97       	sbiw	r28, 0x08	; 8
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	9b 83       	std	Y+3, r25	; 0x03
    3074:	8a 83       	std	Y+2, r24	; 0x02
    3076:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3078:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	09 f4       	brne	.+2      	; 0x3084 <TIMER1_u8SetCompOutModeChB+0x26>
    3082:	a2 c0       	rjmp	.+324    	; 0x31c8 <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    3084:	ea 81       	ldd	r30, Y+2	; 0x02
    3086:	fb 81       	ldd	r31, Y+3	; 0x03
    3088:	81 81       	ldd	r24, Z+1	; 0x01
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	38 87       	std	Y+8, r19	; 0x08
    3090:	2f 83       	std	Y+7, r18	; 0x07
    3092:	8f 81       	ldd	r24, Y+7	; 0x07
    3094:	98 85       	ldd	r25, Y+8	; 0x08
    3096:	8c 30       	cpi	r24, 0x0C	; 12
    3098:	91 05       	cpc	r25, r1
    309a:	ac f4       	brge	.+42     	; 0x30c6 <TIMER1_u8SetCompOutModeChB+0x68>
    309c:	2f 81       	ldd	r18, Y+7	; 0x07
    309e:	38 85       	ldd	r19, Y+8	; 0x08
    30a0:	25 30       	cpi	r18, 0x05	; 5
    30a2:	31 05       	cpc	r19, r1
    30a4:	0c f0       	brlt	.+2      	; 0x30a8 <TIMER1_u8SetCompOutModeChB+0x4a>
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <TIMER1_u8SetCompOutModeChB+0xc8>
    30a8:	8f 81       	ldd	r24, Y+7	; 0x07
    30aa:	98 85       	ldd	r25, Y+8	; 0x08
    30ac:	84 30       	cpi	r24, 0x04	; 4
    30ae:	91 05       	cpc	r25, r1
    30b0:	bc f4       	brge	.+46     	; 0x30e0 <TIMER1_u8SetCompOutModeChB+0x82>
    30b2:	2f 81       	ldd	r18, Y+7	; 0x07
    30b4:	38 85       	ldd	r19, Y+8	; 0x08
    30b6:	21 30       	cpi	r18, 0x01	; 1
    30b8:	31 05       	cpc	r19, r1
    30ba:	ac f5       	brge	.+106    	; 0x3126 <TIMER1_u8SetCompOutModeChB+0xc8>
    30bc:	8f 81       	ldd	r24, Y+7	; 0x07
    30be:	98 85       	ldd	r25, Y+8	; 0x08
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	71 f0       	breq	.+28     	; 0x30e0 <TIMER1_u8SetCompOutModeChB+0x82>
    30c4:	7e c0       	rjmp	.+252    	; 0x31c2 <TIMER1_u8SetCompOutModeChB+0x164>
    30c6:	2f 81       	ldd	r18, Y+7	; 0x07
    30c8:	38 85       	ldd	r19, Y+8	; 0x08
    30ca:	2c 30       	cpi	r18, 0x0C	; 12
    30cc:	31 05       	cpc	r19, r1
    30ce:	41 f0       	breq	.+16     	; 0x30e0 <TIMER1_u8SetCompOutModeChB+0x82>
    30d0:	8f 81       	ldd	r24, Y+7	; 0x07
    30d2:	98 85       	ldd	r25, Y+8	; 0x08
    30d4:	0e 97       	sbiw	r24, 0x0e	; 14
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	91 05       	cpc	r25, r1
    30da:	08 f0       	brcs	.+2      	; 0x30de <TIMER1_u8SetCompOutModeChB+0x80>
    30dc:	72 c0       	rjmp	.+228    	; 0x31c2 <TIMER1_u8SetCompOutModeChB+0x164>
    30de:	23 c0       	rjmp	.+70     	; 0x3126 <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    30e0:	8c 81       	ldd	r24, Y+4	; 0x04
    30e2:	84 30       	cpi	r24, 0x04	; 4
    30e4:	c8 f4       	brcc	.+50     	; 0x3118 <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    30e6:	af e4       	ldi	r26, 0x4F	; 79
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	ef e4       	ldi	r30, 0x4F	; 79
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	8f 7c       	andi	r24, 0xCF	; 207
    30f2:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    30f4:	af e4       	ldi	r26, 0x4F	; 79
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	ef e4       	ldi	r30, 0x4F	; 79
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	28 2f       	mov	r18, r24
    3100:	8c 81       	ldd	r24, Y+4	; 0x04
    3102:	88 2f       	mov	r24, r24
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	82 95       	swap	r24
    3108:	92 95       	swap	r25
    310a:	90 7f       	andi	r25, 0xF0	; 240
    310c:	98 27       	eor	r25, r24
    310e:	80 7f       	andi	r24, 0xF0	; 240
    3110:	98 27       	eor	r25, r24
    3112:	82 2b       	or	r24, r18
    3114:	8c 93       	st	X, r24
    3116:	5a c0       	rjmp	.+180    	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    3118:	8c 81       	ldd	r24, Y+4	; 0x04
    311a:	86 30       	cpi	r24, 0x06	; 6
    311c:	09 f4       	brne	.+2      	; 0x3120 <TIMER1_u8SetCompOutModeChB+0xc2>
    311e:	56 c0       	rjmp	.+172    	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	53 c0       	rjmp	.+166    	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	3e 83       	std	Y+6, r19	; 0x06
    312e:	2d 83       	std	Y+5, r18	; 0x05
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	84 30       	cpi	r24, 0x04	; 4
    3136:	91 05       	cpc	r25, r1
    3138:	19 f1       	breq	.+70     	; 0x3180 <TIMER1_u8SetCompOutModeChB+0x122>
    313a:	2d 81       	ldd	r18, Y+5	; 0x05
    313c:	3e 81       	ldd	r19, Y+6	; 0x06
    313e:	25 30       	cpi	r18, 0x05	; 5
    3140:	31 05       	cpc	r19, r1
    3142:	2c f4       	brge	.+10     	; 0x314e <TIMER1_u8SetCompOutModeChB+0xf0>
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	61 f0       	breq	.+24     	; 0x3164 <TIMER1_u8SetCompOutModeChB+0x106>
    314c:	37 c0       	rjmp	.+110    	; 0x31bc <TIMER1_u8SetCompOutModeChB+0x15e>
    314e:	2d 81       	ldd	r18, Y+5	; 0x05
    3150:	3e 81       	ldd	r19, Y+6	; 0x06
    3152:	25 30       	cpi	r18, 0x05	; 5
    3154:	31 05       	cpc	r19, r1
    3156:	19 f1       	breq	.+70     	; 0x319e <TIMER1_u8SetCompOutModeChB+0x140>
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	86 30       	cpi	r24, 0x06	; 6
    315e:	91 05       	cpc	r25, r1
    3160:	a9 f1       	breq	.+106    	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
    3162:	2c c0       	rjmp	.+88     	; 0x31bc <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    3164:	af e4       	ldi	r26, 0x4F	; 79
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ef e4       	ldi	r30, 0x4F	; 79
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 7c       	andi	r24, 0xCF	; 207
    3170:	8c 93       	st	X, r24
    3172:	af e4       	ldi	r26, 0x4F	; 79
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ef e4       	ldi	r30, 0x4F	; 79
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8c 93       	st	X, r24
    317e:	26 c0       	rjmp	.+76     	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    3180:	af e4       	ldi	r26, 0x4F	; 79
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ef e4       	ldi	r30, 0x4F	; 79
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8f 7c       	andi	r24, 0xCF	; 207
    318c:	8c 93       	st	X, r24
    318e:	af e4       	ldi	r26, 0x4F	; 79
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	ef e4       	ldi	r30, 0x4F	; 79
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 62       	ori	r24, 0x20	; 32
    319a:	8c 93       	st	X, r24
    319c:	17 c0       	rjmp	.+46     	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    319e:	af e4       	ldi	r26, 0x4F	; 79
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ef e4       	ldi	r30, 0x4F	; 79
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8f 7c       	andi	r24, 0xCF	; 207
    31aa:	8c 93       	st	X, r24
    31ac:	af e4       	ldi	r26, 0x4F	; 79
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ef e4       	ldi	r30, 0x4F	; 79
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	80 63       	ori	r24, 0x30	; 48
    31b8:	8c 93       	st	X, r24
    31ba:	08 c0       	rjmp	.+16     	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	05 c0       	rjmp	.+10     	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    31c8:	82 e0       	ldi	r24, 0x02	; 2
    31ca:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ce:	28 96       	adiw	r28, 0x08	; 8
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <TIMER2_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	28 97       	sbiw	r28, 0x08	; 8
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	9b 83       	std	Y+3, r25	; 0x03
    31f6:	8a 83       	std	Y+2, r24	; 0x02
    31f8:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    31fa:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	09 f4       	brne	.+2      	; 0x3206 <TIMER2_u8SetCompOutMode+0x26>
    3204:	cd c0       	rjmp	.+410    	; 0x33a0 <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    3206:	ea 81       	ldd	r30, Y+2	; 0x02
    3208:	fb 81       	ldd	r31, Y+3	; 0x03
    320a:	81 81       	ldd	r24, Z+1	; 0x01
    320c:	28 2f       	mov	r18, r24
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	38 87       	std	Y+8, r19	; 0x08
    3212:	2f 83       	std	Y+7, r18	; 0x07
    3214:	8f 81       	ldd	r24, Y+7	; 0x07
    3216:	98 85       	ldd	r25, Y+8	; 0x08
    3218:	81 30       	cpi	r24, 0x01	; 1
    321a:	91 05       	cpc	r25, r1
    321c:	21 f1       	breq	.+72     	; 0x3266 <TIMER2_u8SetCompOutMode+0x86>
    321e:	2f 81       	ldd	r18, Y+7	; 0x07
    3220:	38 85       	ldd	r19, Y+8	; 0x08
    3222:	22 30       	cpi	r18, 0x02	; 2
    3224:	31 05       	cpc	r19, r1
    3226:	2c f4       	brge	.+10     	; 0x3232 <TIMER2_u8SetCompOutMode+0x52>
    3228:	8f 81       	ldd	r24, Y+7	; 0x07
    322a:	98 85       	ldd	r25, Y+8	; 0x08
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	61 f0       	breq	.+24     	; 0x3248 <TIMER2_u8SetCompOutMode+0x68>
    3230:	46 c0       	rjmp	.+140    	; 0x32be <TIMER2_u8SetCompOutMode+0xde>
    3232:	2f 81       	ldd	r18, Y+7	; 0x07
    3234:	38 85       	ldd	r19, Y+8	; 0x08
    3236:	22 30       	cpi	r18, 0x02	; 2
    3238:	31 05       	cpc	r19, r1
    323a:	21 f1       	breq	.+72     	; 0x3284 <TIMER2_u8SetCompOutMode+0xa4>
    323c:	8f 81       	ldd	r24, Y+7	; 0x07
    323e:	98 85       	ldd	r25, Y+8	; 0x08
    3240:	83 30       	cpi	r24, 0x03	; 3
    3242:	91 05       	cpc	r25, r1
    3244:	71 f1       	breq	.+92     	; 0x32a2 <TIMER2_u8SetCompOutMode+0xc2>
    3246:	3b c0       	rjmp	.+118    	; 0x32be <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    3248:	a5 e4       	ldi	r26, 0x45	; 69
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e5 e4       	ldi	r30, 0x45	; 69
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	8f 7b       	andi	r24, 0xBF	; 191
    3254:	8c 93       	st	X, r24
    3256:	a5 e4       	ldi	r26, 0x45	; 69
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e5 e4       	ldi	r30, 0x45	; 69
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	87 7f       	andi	r24, 0xF7	; 247
    3262:	8c 93       	st	X, r24
    3264:	2c c0       	rjmp	.+88     	; 0x32be <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    3266:	a5 e4       	ldi	r26, 0x45	; 69
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e5 e4       	ldi	r30, 0x45	; 69
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	80 64       	ori	r24, 0x40	; 64
    3272:	8c 93       	st	X, r24
    3274:	a5 e4       	ldi	r26, 0x45	; 69
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e5 e4       	ldi	r30, 0x45	; 69
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	87 7f       	andi	r24, 0xF7	; 247
    3280:	8c 93       	st	X, r24
    3282:	1d c0       	rjmp	.+58     	; 0x32be <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    3284:	a5 e4       	ldi	r26, 0x45	; 69
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e5 e4       	ldi	r30, 0x45	; 69
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	8f 7b       	andi	r24, 0xBF	; 191
    3290:	8c 93       	st	X, r24
    3292:	a5 e4       	ldi	r26, 0x45	; 69
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e5 e4       	ldi	r30, 0x45	; 69
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	88 60       	ori	r24, 0x08	; 8
    329e:	8c 93       	st	X, r24
    32a0:	0e c0       	rjmp	.+28     	; 0x32be <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    32a2:	a5 e4       	ldi	r26, 0x45	; 69
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e5 e4       	ldi	r30, 0x45	; 69
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	80 64       	ori	r24, 0x40	; 64
    32ae:	8c 93       	st	X, r24
    32b0:	a5 e4       	ldi	r26, 0x45	; 69
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	e5 e4       	ldi	r30, 0x45	; 69
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	88 60       	ori	r24, 0x08	; 8
    32bc:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    32be:	a5 e4       	ldi	r26, 0x45	; 69
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	e5 e4       	ldi	r30, 0x45	; 69
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	8f 7c       	andi	r24, 0xCF	; 207
    32ca:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    32cc:	ea 81       	ldd	r30, Y+2	; 0x02
    32ce:	fb 81       	ldd	r31, Y+3	; 0x03
    32d0:	81 81       	ldd	r24, Z+1	; 0x01
    32d2:	88 23       	and	r24, r24
    32d4:	29 f0       	breq	.+10     	; 0x32e0 <TIMER2_u8SetCompOutMode+0x100>
    32d6:	ea 81       	ldd	r30, Y+2	; 0x02
    32d8:	fb 81       	ldd	r31, Y+3	; 0x03
    32da:	81 81       	ldd	r24, Z+1	; 0x01
    32dc:	82 30       	cpi	r24, 0x02	; 2
    32de:	c1 f4       	brne	.+48     	; 0x3310 <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    32e0:	8c 81       	ldd	r24, Y+4	; 0x04
    32e2:	84 30       	cpi	r24, 0x04	; 4
    32e4:	90 f4       	brcc	.+36     	; 0x330a <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    32e6:	a5 e4       	ldi	r26, 0x45	; 69
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	e5 e4       	ldi	r30, 0x45	; 69
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	28 2f       	mov	r18, r24
    32f2:	8c 81       	ldd	r24, Y+4	; 0x04
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	82 95       	swap	r24
    32fa:	92 95       	swap	r25
    32fc:	90 7f       	andi	r25, 0xF0	; 240
    32fe:	98 27       	eor	r25, r24
    3300:	80 7f       	andi	r24, 0xF0	; 240
    3302:	98 27       	eor	r25, r24
    3304:	82 2b       	or	r24, r18
    3306:	8c 93       	st	X, r24
    3308:	39 c0       	rjmp	.+114    	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	36 c0       	rjmp	.+108    	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    3310:	ea 81       	ldd	r30, Y+2	; 0x02
    3312:	fb 81       	ldd	r31, Y+3	; 0x03
    3314:	81 81       	ldd	r24, Z+1	; 0x01
    3316:	83 30       	cpi	r24, 0x03	; 3
    3318:	29 f0       	breq	.+10     	; 0x3324 <TIMER2_u8SetCompOutMode+0x144>
    331a:	ea 81       	ldd	r30, Y+2	; 0x02
    331c:	fb 81       	ldd	r31, Y+3	; 0x03
    331e:	81 81       	ldd	r24, Z+1	; 0x01
    3320:	81 30       	cpi	r24, 0x01	; 1
    3322:	61 f5       	brne	.+88     	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    3324:	8c 81       	ldd	r24, Y+4	; 0x04
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	3e 83       	std	Y+6, r19	; 0x06
    332c:	2d 83       	std	Y+5, r18	; 0x05
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	84 30       	cpi	r24, 0x04	; 4
    3334:	91 05       	cpc	r25, r1
    3336:	81 f0       	breq	.+32     	; 0x3358 <TIMER2_u8SetCompOutMode+0x178>
    3338:	2d 81       	ldd	r18, Y+5	; 0x05
    333a:	3e 81       	ldd	r19, Y+6	; 0x06
    333c:	25 30       	cpi	r18, 0x05	; 5
    333e:	31 05       	cpc	r19, r1
    3340:	99 f0       	breq	.+38     	; 0x3368 <TIMER2_u8SetCompOutMode+0x188>
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	b9 f4       	brne	.+46     	; 0x3378 <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    334a:	e5 e4       	ldi	r30, 0x45	; 69
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	a5 e4       	ldi	r26, 0x45	; 69
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	8c 91       	ld	r24, X
    3354:	80 83       	st	Z, r24
    3356:	12 c0       	rjmp	.+36     	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    3358:	a5 e4       	ldi	r26, 0x45	; 69
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e5 e4       	ldi	r30, 0x45	; 69
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	80 62       	ori	r24, 0x20	; 32
    3364:	8c 93       	st	X, r24
    3366:	0a c0       	rjmp	.+20     	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    3368:	a5 e4       	ldi	r26, 0x45	; 69
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e5 e4       	ldi	r30, 0x45	; 69
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	80 63       	ori	r24, 0x30	; 48
    3374:	8c 93       	st	X, r24
    3376:	02 c0       	rjmp	.+4      	; 0x337c <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    337c:	a5 e4       	ldi	r26, 0x45	; 69
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e5 e4       	ldi	r30, 0x45	; 69
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	88 7f       	andi	r24, 0xF8	; 248
    3388:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    338a:	a5 e4       	ldi	r26, 0x45	; 69
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	e5 e4       	ldi	r30, 0x45	; 69
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	90 81       	ld	r25, Z
    3394:	ea 81       	ldd	r30, Y+2	; 0x02
    3396:	fb 81       	ldd	r31, Y+3	; 0x03
    3398:	80 81       	ld	r24, Z
    339a:	89 2b       	or	r24, r25
    339c:	8c 93       	st	X, r24
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a6:	28 96       	adiw	r28, 0x08	; 8
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <TIMERS_u8IntEnable>:
 * @brief 					Function to enable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be enabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    33b8:	df 93       	push	r29
    33ba:	cf 93       	push	r28
    33bc:	00 d0       	rcall	.+0      	; 0x33be <TIMERS_u8IntEnable+0x6>
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <TIMERS_u8IntEnable+0x8>
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    33c6:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	28 2f       	mov	r18, r24
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	3c 83       	std	Y+4, r19	; 0x04
    33d0:	2b 83       	std	Y+3, r18	; 0x03
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	83 30       	cpi	r24, 0x03	; 3
    33d8:	91 05       	cpc	r25, r1
    33da:	09 f4       	brne	.+2      	; 0x33de <TIMERS_u8IntEnable+0x26>
    33dc:	42 c0       	rjmp	.+132    	; 0x3462 <TIMERS_u8IntEnable+0xaa>
    33de:	2b 81       	ldd	r18, Y+3	; 0x03
    33e0:	3c 81       	ldd	r19, Y+4	; 0x04
    33e2:	24 30       	cpi	r18, 0x04	; 4
    33e4:	31 05       	cpc	r19, r1
    33e6:	7c f4       	brge	.+30     	; 0x3406 <TIMERS_u8IntEnable+0x4e>
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	91 05       	cpc	r25, r1
    33f0:	41 f1       	breq	.+80     	; 0x3442 <TIMERS_u8IntEnable+0x8a>
    33f2:	2b 81       	ldd	r18, Y+3	; 0x03
    33f4:	3c 81       	ldd	r19, Y+4	; 0x04
    33f6:	22 30       	cpi	r18, 0x02	; 2
    33f8:	31 05       	cpc	r19, r1
    33fa:	5c f5       	brge	.+86     	; 0x3452 <TIMERS_u8IntEnable+0x9a>
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	b9 f0       	breq	.+46     	; 0x3432 <TIMERS_u8IntEnable+0x7a>
    3404:	56 c0       	rjmp	.+172    	; 0x34b2 <TIMERS_u8IntEnable+0xfa>
    3406:	2b 81       	ldd	r18, Y+3	; 0x03
    3408:	3c 81       	ldd	r19, Y+4	; 0x04
    340a:	25 30       	cpi	r18, 0x05	; 5
    340c:	31 05       	cpc	r19, r1
    340e:	c9 f1       	breq	.+114    	; 0x3482 <TIMERS_u8IntEnable+0xca>
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	85 30       	cpi	r24, 0x05	; 5
    3416:	91 05       	cpc	r25, r1
    3418:	64 f1       	brlt	.+88     	; 0x3472 <TIMERS_u8IntEnable+0xba>
    341a:	2b 81       	ldd	r18, Y+3	; 0x03
    341c:	3c 81       	ldd	r19, Y+4	; 0x04
    341e:	26 30       	cpi	r18, 0x06	; 6
    3420:	31 05       	cpc	r19, r1
    3422:	09 f4       	brne	.+2      	; 0x3426 <TIMERS_u8IntEnable+0x6e>
    3424:	3e c0       	rjmp	.+124    	; 0x34a2 <TIMERS_u8IntEnable+0xea>
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	87 30       	cpi	r24, 0x07	; 7
    342c:	91 05       	cpc	r25, r1
    342e:	89 f1       	breq	.+98     	; 0x3492 <TIMERS_u8IntEnable+0xda>
    3430:	40 c0       	rjmp	.+128    	; 0x34b2 <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    3432:	a9 e5       	ldi	r26, 0x59	; 89
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e9 e5       	ldi	r30, 0x59	; 89
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	81 60       	ori	r24, 0x01	; 1
    343e:	8c 93       	st	X, r24
    3440:	3a c0       	rjmp	.+116    	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    3442:	a9 e5       	ldi	r26, 0x59	; 89
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e9 e5       	ldi	r30, 0x59	; 89
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	82 60       	ori	r24, 0x02	; 2
    344e:	8c 93       	st	X, r24
    3450:	32 c0       	rjmp	.+100    	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    3452:	a9 e5       	ldi	r26, 0x59	; 89
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e9 e5       	ldi	r30, 0x59	; 89
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	84 60       	ori	r24, 0x04	; 4
    345e:	8c 93       	st	X, r24
    3460:	2a c0       	rjmp	.+84     	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    3462:	a9 e5       	ldi	r26, 0x59	; 89
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e9 e5       	ldi	r30, 0x59	; 89
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	80 61       	ori	r24, 0x10	; 16
    346e:	8c 93       	st	X, r24
    3470:	22 c0       	rjmp	.+68     	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    3472:	a9 e5       	ldi	r26, 0x59	; 89
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	e9 e5       	ldi	r30, 0x59	; 89
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	88 60       	ori	r24, 0x08	; 8
    347e:	8c 93       	st	X, r24
    3480:	1a c0       	rjmp	.+52     	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    3482:	a9 e5       	ldi	r26, 0x59	; 89
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e9 e5       	ldi	r30, 0x59	; 89
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	80 62       	ori	r24, 0x20	; 32
    348e:	8c 93       	st	X, r24
    3490:	12 c0       	rjmp	.+36     	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    3492:	a9 e5       	ldi	r26, 0x59	; 89
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e9 e5       	ldi	r30, 0x59	; 89
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	80 68       	ori	r24, 0x80	; 128
    349e:	8c 93       	st	X, r24
    34a0:	0a c0       	rjmp	.+20     	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    34a2:	a9 e5       	ldi	r26, 0x59	; 89
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e9 e5       	ldi	r30, 0x59	; 89
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	80 64       	ori	r24, 0x40	; 64
    34ae:	8c 93       	st	X, r24
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <TIMERS_u8IntDisable>:
 * @brief 					Function to disable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be disabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <TIMERS_u8IntDisable+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <TIMERS_u8IntDisable+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    34d4:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	3c 83       	std	Y+4, r19	; 0x04
    34de:	2b 83       	std	Y+3, r18	; 0x03
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	9c 81       	ldd	r25, Y+4	; 0x04
    34e4:	83 30       	cpi	r24, 0x03	; 3
    34e6:	91 05       	cpc	r25, r1
    34e8:	09 f4       	brne	.+2      	; 0x34ec <TIMERS_u8IntDisable+0x26>
    34ea:	42 c0       	rjmp	.+132    	; 0x3570 <TIMERS_u8IntDisable+0xaa>
    34ec:	2b 81       	ldd	r18, Y+3	; 0x03
    34ee:	3c 81       	ldd	r19, Y+4	; 0x04
    34f0:	24 30       	cpi	r18, 0x04	; 4
    34f2:	31 05       	cpc	r19, r1
    34f4:	7c f4       	brge	.+30     	; 0x3514 <TIMERS_u8IntDisable+0x4e>
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	91 05       	cpc	r25, r1
    34fe:	41 f1       	breq	.+80     	; 0x3550 <TIMERS_u8IntDisable+0x8a>
    3500:	2b 81       	ldd	r18, Y+3	; 0x03
    3502:	3c 81       	ldd	r19, Y+4	; 0x04
    3504:	22 30       	cpi	r18, 0x02	; 2
    3506:	31 05       	cpc	r19, r1
    3508:	5c f5       	brge	.+86     	; 0x3560 <TIMERS_u8IntDisable+0x9a>
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	b9 f0       	breq	.+46     	; 0x3540 <TIMERS_u8IntDisable+0x7a>
    3512:	56 c0       	rjmp	.+172    	; 0x35c0 <TIMERS_u8IntDisable+0xfa>
    3514:	2b 81       	ldd	r18, Y+3	; 0x03
    3516:	3c 81       	ldd	r19, Y+4	; 0x04
    3518:	25 30       	cpi	r18, 0x05	; 5
    351a:	31 05       	cpc	r19, r1
    351c:	c9 f1       	breq	.+114    	; 0x3590 <TIMERS_u8IntDisable+0xca>
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	9c 81       	ldd	r25, Y+4	; 0x04
    3522:	85 30       	cpi	r24, 0x05	; 5
    3524:	91 05       	cpc	r25, r1
    3526:	64 f1       	brlt	.+88     	; 0x3580 <TIMERS_u8IntDisable+0xba>
    3528:	2b 81       	ldd	r18, Y+3	; 0x03
    352a:	3c 81       	ldd	r19, Y+4	; 0x04
    352c:	26 30       	cpi	r18, 0x06	; 6
    352e:	31 05       	cpc	r19, r1
    3530:	09 f4       	brne	.+2      	; 0x3534 <TIMERS_u8IntDisable+0x6e>
    3532:	3e c0       	rjmp	.+124    	; 0x35b0 <TIMERS_u8IntDisable+0xea>
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	87 30       	cpi	r24, 0x07	; 7
    353a:	91 05       	cpc	r25, r1
    353c:	89 f1       	breq	.+98     	; 0x35a0 <TIMERS_u8IntDisable+0xda>
    353e:	40 c0       	rjmp	.+128    	; 0x35c0 <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    3540:	a9 e5       	ldi	r26, 0x59	; 89
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e9 e5       	ldi	r30, 0x59	; 89
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	8e 7f       	andi	r24, 0xFE	; 254
    354c:	8c 93       	st	X, r24
    354e:	3a c0       	rjmp	.+116    	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    3550:	a9 e5       	ldi	r26, 0x59	; 89
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e9 e5       	ldi	r30, 0x59	; 89
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	8d 7f       	andi	r24, 0xFD	; 253
    355c:	8c 93       	st	X, r24
    355e:	32 c0       	rjmp	.+100    	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    3560:	a9 e5       	ldi	r26, 0x59	; 89
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e9 e5       	ldi	r30, 0x59	; 89
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	8b 7f       	andi	r24, 0xFB	; 251
    356c:	8c 93       	st	X, r24
    356e:	2a c0       	rjmp	.+84     	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    3570:	a9 e5       	ldi	r26, 0x59	; 89
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e9 e5       	ldi	r30, 0x59	; 89
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8f 7e       	andi	r24, 0xEF	; 239
    357c:	8c 93       	st	X, r24
    357e:	22 c0       	rjmp	.+68     	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    3580:	a9 e5       	ldi	r26, 0x59	; 89
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	e9 e5       	ldi	r30, 0x59	; 89
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	87 7f       	andi	r24, 0xF7	; 247
    358c:	8c 93       	st	X, r24
    358e:	1a c0       	rjmp	.+52     	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    3590:	a9 e5       	ldi	r26, 0x59	; 89
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	e9 e5       	ldi	r30, 0x59	; 89
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	8f 7d       	andi	r24, 0xDF	; 223
    359c:	8c 93       	st	X, r24
    359e:	12 c0       	rjmp	.+36     	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    35a0:	a9 e5       	ldi	r26, 0x59	; 89
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e9 e5       	ldi	r30, 0x59	; 89
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	8f 77       	andi	r24, 0x7F	; 127
    35ac:	8c 93       	st	X, r24
    35ae:	0a c0       	rjmp	.+20     	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    35b0:	a9 e5       	ldi	r26, 0x59	; 89
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	e9 e5       	ldi	r30, 0x59	; 89
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	8f 7b       	andi	r24, 0xBF	; 191
    35bc:	8c 93       	st	X, r24
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <TIMERS_u8Disable>:
 * @brief				Function to disable a timer peripheral.
 * @param Copy_u8Timer	Timer wanted to be disabled.
 * @return				Error State.
 */
uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	00 d0       	rcall	.+0      	; 0x35da <TIMERS_u8Disable+0x6>
    35da:	00 d0       	rcall	.+0      	; 0x35dc <TIMERS_u8Disable+0x8>
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    35e2:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	28 2f       	mov	r18, r24
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	3c 83       	std	Y+4, r19	; 0x04
    35ec:	2b 83       	std	Y+3, r18	; 0x03
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	91 05       	cpc	r25, r1
    35f6:	99 f0       	breq	.+38     	; 0x361e <TIMERS_u8Disable+0x4a>
    35f8:	2b 81       	ldd	r18, Y+3	; 0x03
    35fa:	3c 81       	ldd	r19, Y+4	; 0x04
    35fc:	22 30       	cpi	r18, 0x02	; 2
    35fe:	31 05       	cpc	r19, r1
    3600:	c1 f0       	breq	.+48     	; 0x3632 <TIMERS_u8Disable+0x5e>
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	f1 f4       	brne	.+60     	; 0x3646 <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    360a:	10 92 96 01 	sts	0x0196, r1
    360e:	a3 e5       	ldi	r26, 0x53	; 83
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e3 e5       	ldi	r30, 0x53	; 83
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	88 7f       	andi	r24, 0xF8	; 248
    361a:	8c 93       	st	X, r24
    361c:	16 c0       	rjmp	.+44     	; 0x364a <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    361e:	10 92 97 01 	sts	0x0197, r1
    3622:	ae e4       	ldi	r26, 0x4E	; 78
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	ee e4       	ldi	r30, 0x4E	; 78
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	88 7f       	andi	r24, 0xF8	; 248
    362e:	8c 93       	st	X, r24
    3630:	0c c0       	rjmp	.+24     	; 0x364a <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    3632:	10 92 98 01 	sts	0x0198, r1
    3636:	a5 e4       	ldi	r26, 0x45	; 69
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e5 e4       	ldi	r30, 0x45	; 69
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	88 7f       	andi	r24, 0xF8	; 248
    3642:	8c 93       	st	X, r24
    3644:	02 c0       	rjmp	.+4      	; 0x364a <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    364a:	89 81       	ldd	r24, Y+1	; 0x01
}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <TIMERS_u8SetCallBack>:
 * @param Copy_u8TimerIntSource	Interrupt source.
 * @param Copy_pvCallBackFunc	Pointer to call back function.
 * @return						Error State.
 */
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <TIMERS_u8SetCallBack+0x6>
    3660:	00 d0       	rcall	.+0      	; 0x3662 <TIMERS_u8SetCallBack+0x8>
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	8a 83       	std	Y+2, r24	; 0x02
    3668:	7c 83       	std	Y+4, r23	; 0x04
    366a:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    366c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f0       	breq	.+26     	; 0x3690 <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	fc 01       	movw	r30, r24
    3682:	e7 56       	subi	r30, 0x67	; 103
    3684:	fe 4f       	sbci	r31, 0xFE	; 254
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	9c 81       	ldd	r25, Y+4	; 0x04
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3694:	89 81       	ldd	r24, Y+1	; 0x01
}
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <TIMER0_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 0 (OCR0).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    36b0:	ec e5       	ldi	r30, 0x5C	; 92
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	80 83       	st	Z, r24
}
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <TIMER0_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 0 (TCNT0).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	0f 92       	push	r0
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    36cc:	e2 e5       	ldi	r30, 0x52	; 82
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	80 83       	st	Z, r24
}
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <TIMER0_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT0) value.
 * @return	Timer value.
 */
uint8 TIMER0_u8GetTimerValue(void)
{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    36e4:	e2 e5       	ldi	r30, 0x52	; 82
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
}
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	08 95       	ret

000036f0 <TIMER2_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 2 (OCR2).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	0f 92       	push	r0
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    36fc:	e3 e4       	ldi	r30, 0x43	; 67
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	80 83       	st	Z, r24
}
    3704:	0f 90       	pop	r0
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <TIMER2_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 2 (TCNT2).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	0f 92       	push	r0
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    3718:	e4 e4       	ldi	r30, 0x44	; 68
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	80 83       	st	Z, r24
}
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <TIMER2_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT2) value.
 * @return	Timer value.
 */
uint8 TIMER2_u8GetTimerValue(void)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    3730:	e4 e4       	ldi	r30, 0x44	; 68
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
}
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <TIMER1_voidSetCompValueChA>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel A (OCR1A).
 * @param Copy_u16Value	Value of ouput compare channel A.
 */
void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	00 d0       	rcall	.+0      	; 0x3742 <TIMER1_voidSetCompValueChA+0x6>
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	9a 83       	std	Y+2, r25	; 0x02
    3748:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    374a:	ea e4       	ldi	r30, 0x4A	; 74
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <TIMER1_voidSetCompValueChB>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel B (OCR1B).
 * @param Copy_u16Value	Value of ouput compare channel B.
 */
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	00 d0       	rcall	.+0      	; 0x3766 <TIMER1_voidSetCompValueChB+0x6>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    376e:	e8 e4       	ldi	r30, 0x48	; 72
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <TIMER1_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 1 (TCNT1).
 * @param Copy_u16Value	Value of preload.
 */
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	00 d0       	rcall	.+0      	; 0x378a <TIMER1_voidSetOvfValue+0x6>
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	9a 83       	std	Y+2, r25	; 0x02
    3790:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    3792:	ec e4       	ldi	r30, 0x4C	; 76
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
}
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <TIMER1_voidSetInputCaptValue>:
/**
 * @brief 				Function to set a value into input capture register (ICR1).
 * @param Copy_u16Value	Value wanted to set.
 */
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <TIMER1_voidSetInputCaptValue+0x6>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    37b6:	e6 e4       	ldi	r30, 0x46	; 70
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	9a 81       	ldd	r25, Y+2	; 0x02
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	80 83       	st	Z, r24
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <TIMER1_u16GetTimerValue>:
/**
 * @brief	Function to get the timer (TCNT1) value.
 * @return	Timer value.
 */
uint16 TIMER1_u16GetTimerValue(void)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    37d4:	ec e4       	ldi	r30, 0x4C	; 76
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	91 81       	ldd	r25, Z+1	; 0x01
}
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <TIMER1_u16GetInputCaptValue>:
/**
 * @brief	Function to get the input capture (ICR1) value.
 * @return	Input capture value.
 */
uint16 TIMER1_u16GetInputCaptValue(void)
{
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    37ea:	e6 e4       	ldi	r30, 0x46	; 70
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <TIMER1_u8SetInputCaptTriggerSrc>:
 * @brief					Function to set the input capture trigger source.
 * @param Copy_u8TriggerSrc	Trigger source.
 * @return					Error State.
 */
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
    3804:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3806:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	28 2f       	mov	r18, r24
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	3c 83       	std	Y+4, r19	; 0x04
    3810:	2b 83       	std	Y+3, r18	; 0x03
    3812:	8b 81       	ldd	r24, Y+3	; 0x03
    3814:	9c 81       	ldd	r25, Y+4	; 0x04
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	31 f0       	breq	.+12     	; 0x3826 <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    381a:	2b 81       	ldd	r18, Y+3	; 0x03
    381c:	3c 81       	ldd	r19, Y+4	; 0x04
    381e:	21 30       	cpi	r18, 0x01	; 1
    3820:	31 05       	cpc	r19, r1
    3822:	49 f0       	breq	.+18     	; 0x3836 <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    3824:	10 c0       	rjmp	.+32     	; 0x3846 <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    3826:	ae e4       	ldi	r26, 0x4E	; 78
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	ee e4       	ldi	r30, 0x4E	; 78
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	80 64       	ori	r24, 0x40	; 64
    3832:	8c 93       	st	X, r24
    3834:	0a c0       	rjmp	.+20     	; 0x384a <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    3836:	ae e4       	ldi	r26, 0x4E	; 78
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	ee e4       	ldi	r30, 0x4E	; 78
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	8f 7b       	andi	r24, 0xBF	; 191
    3842:	8c 93       	st	X, r24
    3844:	02 c0       	rjmp	.+4      	; 0x384a <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    384a:	89 81       	ldd	r24, Y+1	; 0x01
}
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <WDT_voidEnable>:

/**
 * @brief Function to set the watchdog timer.
 */
void WDT_voidEnable(void)
{
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    3862:	a1 e4       	ldi	r26, 0x41	; 65
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e1 e4       	ldi	r30, 0x41	; 65
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	88 60       	ori	r24, 0x08	; 8
    386e:	8c 93       	st	X, r24
}
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <WDT_voidDisable>:
/**
 * @brief Function to reset the watchdog timer.
 */
void WDT_voidDisable(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    387e:	a1 e4       	ldi	r26, 0x41	; 65
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	e1 e4       	ldi	r30, 0x41	; 65
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	88 61       	ori	r24, 0x18	; 24
    388a:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    388c:	a1 e4       	ldi	r26, 0x41	; 65
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e1 e4       	ldi	r30, 0x41	; 65
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	87 7f       	andi	r24, 0xF7	; 247
    3898:	8c 93       	st	X, r24
}
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <WDT_u8SetTime>:
 * @brief 						Function to set the watchdog timer prescaler.
 * @param Copy_u8WatchDogTime	Time that watchdog timer will delay with.
 * @return						Error State.
 */
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <WDT_u8SetTime+0x6>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    38ac:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	88 30       	cpi	r24, 0x08	; 8
    38b2:	80 f4       	brcc	.+32     	; 0x38d4 <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    38b4:	a1 e4       	ldi	r26, 0x41	; 65
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	e1 e4       	ldi	r30, 0x41	; 65
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	88 7f       	andi	r24, 0xF8	; 248
    38c0:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    38c2:	a1 e4       	ldi	r26, 0x41	; 65
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e1 e4       	ldi	r30, 0x41	; 65
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	90 81       	ld	r25, Z
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	89 2b       	or	r24, r25
    38d0:	8c 93       	st	X, r24
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <__vector_11>:
/**
 * @brief Timer/Counter 0 OverFlow Event ISR.
 */
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    38e4:	1f 92       	push	r1
    38e6:	0f 92       	push	r0
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	0f 92       	push	r0
    38ec:	11 24       	eor	r1, r1
    38ee:	2f 93       	push	r18
    38f0:	3f 93       	push	r19
    38f2:	4f 93       	push	r20
    38f4:	5f 93       	push	r21
    38f6:	6f 93       	push	r22
    38f8:	7f 93       	push	r23
    38fa:	8f 93       	push	r24
    38fc:	9f 93       	push	r25
    38fe:	af 93       	push	r26
    3900:	bf 93       	push	r27
    3902:	ef 93       	push	r30
    3904:	ff 93       	push	r31
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    390e:	80 91 99 01 	lds	r24, 0x0199
    3912:	90 91 9a 01 	lds	r25, 0x019A
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	29 f0       	breq	.+10     	; 0x3924 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    391a:	e0 91 99 01 	lds	r30, 0x0199
    391e:	f0 91 9a 01 	lds	r31, 0x019A
    3922:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	ff 91       	pop	r31
    392a:	ef 91       	pop	r30
    392c:	bf 91       	pop	r27
    392e:	af 91       	pop	r26
    3930:	9f 91       	pop	r25
    3932:	8f 91       	pop	r24
    3934:	7f 91       	pop	r23
    3936:	6f 91       	pop	r22
    3938:	5f 91       	pop	r21
    393a:	4f 91       	pop	r20
    393c:	3f 91       	pop	r19
    393e:	2f 91       	pop	r18
    3940:	0f 90       	pop	r0
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	0f 90       	pop	r0
    3946:	1f 90       	pop	r1
    3948:	18 95       	reti

0000394a <__vector_10>:
/**
 *@brief Timer/Counter 0 Compare Match Event ISR.
 */
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    394a:	1f 92       	push	r1
    394c:	0f 92       	push	r0
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	0f 92       	push	r0
    3952:	11 24       	eor	r1, r1
    3954:	2f 93       	push	r18
    3956:	3f 93       	push	r19
    3958:	4f 93       	push	r20
    395a:	5f 93       	push	r21
    395c:	6f 93       	push	r22
    395e:	7f 93       	push	r23
    3960:	8f 93       	push	r24
    3962:	9f 93       	push	r25
    3964:	af 93       	push	r26
    3966:	bf 93       	push	r27
    3968:	ef 93       	push	r30
    396a:	ff 93       	push	r31
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    3974:	80 91 9b 01 	lds	r24, 0x019B
    3978:	90 91 9c 01 	lds	r25, 0x019C
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	29 f0       	breq	.+10     	; 0x398a <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    3980:	e0 91 9b 01 	lds	r30, 0x019B
    3984:	f0 91 9c 01 	lds	r31, 0x019C
    3988:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	ff 91       	pop	r31
    3990:	ef 91       	pop	r30
    3992:	bf 91       	pop	r27
    3994:	af 91       	pop	r26
    3996:	9f 91       	pop	r25
    3998:	8f 91       	pop	r24
    399a:	7f 91       	pop	r23
    399c:	6f 91       	pop	r22
    399e:	5f 91       	pop	r21
    39a0:	4f 91       	pop	r20
    39a2:	3f 91       	pop	r19
    39a4:	2f 91       	pop	r18
    39a6:	0f 90       	pop	r0
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	0f 90       	pop	r0
    39ac:	1f 90       	pop	r1
    39ae:	18 95       	reti

000039b0 <__vector_9>:
/**
 * @brief Timer/Counter 1 OverFlow Event ISR.
 */
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    39b0:	1f 92       	push	r1
    39b2:	0f 92       	push	r0
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	0f 92       	push	r0
    39b8:	11 24       	eor	r1, r1
    39ba:	2f 93       	push	r18
    39bc:	3f 93       	push	r19
    39be:	4f 93       	push	r20
    39c0:	5f 93       	push	r21
    39c2:	6f 93       	push	r22
    39c4:	7f 93       	push	r23
    39c6:	8f 93       	push	r24
    39c8:	9f 93       	push	r25
    39ca:	af 93       	push	r26
    39cc:	bf 93       	push	r27
    39ce:	ef 93       	push	r30
    39d0:	ff 93       	push	r31
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    39da:	80 91 9d 01 	lds	r24, 0x019D
    39de:	90 91 9e 01 	lds	r25, 0x019E
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	29 f0       	breq	.+10     	; 0x39f0 <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    39e6:	e0 91 9d 01 	lds	r30, 0x019D
    39ea:	f0 91 9e 01 	lds	r31, 0x019E
    39ee:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	ff 91       	pop	r31
    39f6:	ef 91       	pop	r30
    39f8:	bf 91       	pop	r27
    39fa:	af 91       	pop	r26
    39fc:	9f 91       	pop	r25
    39fe:	8f 91       	pop	r24
    3a00:	7f 91       	pop	r23
    3a02:	6f 91       	pop	r22
    3a04:	5f 91       	pop	r21
    3a06:	4f 91       	pop	r20
    3a08:	3f 91       	pop	r19
    3a0a:	2f 91       	pop	r18
    3a0c:	0f 90       	pop	r0
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	0f 90       	pop	r0
    3a12:	1f 90       	pop	r1
    3a14:	18 95       	reti

00003a16 <__vector_8>:
/**
 * @brief Timer/Counter 1 Channel B Compare Match Event ISR.
 */
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    3a16:	1f 92       	push	r1
    3a18:	0f 92       	push	r0
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	0f 92       	push	r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	2f 93       	push	r18
    3a22:	3f 93       	push	r19
    3a24:	4f 93       	push	r20
    3a26:	5f 93       	push	r21
    3a28:	6f 93       	push	r22
    3a2a:	7f 93       	push	r23
    3a2c:	8f 93       	push	r24
    3a2e:	9f 93       	push	r25
    3a30:	af 93       	push	r26
    3a32:	bf 93       	push	r27
    3a34:	ef 93       	push	r30
    3a36:	ff 93       	push	r31
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    3a40:	80 91 a1 01 	lds	r24, 0x01A1
    3a44:	90 91 a2 01 	lds	r25, 0x01A2
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	29 f0       	breq	.+10     	; 0x3a56 <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    3a4c:	e0 91 a1 01 	lds	r30, 0x01A1
    3a50:	f0 91 a2 01 	lds	r31, 0x01A2
    3a54:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	ff 91       	pop	r31
    3a5c:	ef 91       	pop	r30
    3a5e:	bf 91       	pop	r27
    3a60:	af 91       	pop	r26
    3a62:	9f 91       	pop	r25
    3a64:	8f 91       	pop	r24
    3a66:	7f 91       	pop	r23
    3a68:	6f 91       	pop	r22
    3a6a:	5f 91       	pop	r21
    3a6c:	4f 91       	pop	r20
    3a6e:	3f 91       	pop	r19
    3a70:	2f 91       	pop	r18
    3a72:	0f 90       	pop	r0
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	0f 90       	pop	r0
    3a78:	1f 90       	pop	r1
    3a7a:	18 95       	reti

00003a7c <__vector_7>:
/**
 * @brief Timer/Counter 1 Channel A Compare Match Event ISR.
 */
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    3a7c:	1f 92       	push	r1
    3a7e:	0f 92       	push	r0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	0f 92       	push	r0
    3a84:	11 24       	eor	r1, r1
    3a86:	2f 93       	push	r18
    3a88:	3f 93       	push	r19
    3a8a:	4f 93       	push	r20
    3a8c:	5f 93       	push	r21
    3a8e:	6f 93       	push	r22
    3a90:	7f 93       	push	r23
    3a92:	8f 93       	push	r24
    3a94:	9f 93       	push	r25
    3a96:	af 93       	push	r26
    3a98:	bf 93       	push	r27
    3a9a:	ef 93       	push	r30
    3a9c:	ff 93       	push	r31
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    3aa6:	80 91 9f 01 	lds	r24, 0x019F
    3aaa:	90 91 a0 01 	lds	r25, 0x01A0
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	29 f0       	breq	.+10     	; 0x3abc <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    3ab2:	e0 91 9f 01 	lds	r30, 0x019F
    3ab6:	f0 91 a0 01 	lds	r31, 0x01A0
    3aba:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	ff 91       	pop	r31
    3ac2:	ef 91       	pop	r30
    3ac4:	bf 91       	pop	r27
    3ac6:	af 91       	pop	r26
    3ac8:	9f 91       	pop	r25
    3aca:	8f 91       	pop	r24
    3acc:	7f 91       	pop	r23
    3ace:	6f 91       	pop	r22
    3ad0:	5f 91       	pop	r21
    3ad2:	4f 91       	pop	r20
    3ad4:	3f 91       	pop	r19
    3ad6:	2f 91       	pop	r18
    3ad8:	0f 90       	pop	r0
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	0f 90       	pop	r0
    3ade:	1f 90       	pop	r1
    3ae0:	18 95       	reti

00003ae2 <__vector_6>:
/**
 * @brief Timer/Counter 1 Input Capture Event ISR.
 */
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	2f 93       	push	r18
    3aee:	3f 93       	push	r19
    3af0:	4f 93       	push	r20
    3af2:	5f 93       	push	r21
    3af4:	6f 93       	push	r22
    3af6:	7f 93       	push	r23
    3af8:	8f 93       	push	r24
    3afa:	9f 93       	push	r25
    3afc:	af 93       	push	r26
    3afe:	bf 93       	push	r27
    3b00:	ef 93       	push	r30
    3b02:	ff 93       	push	r31
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    3b0c:	80 91 a3 01 	lds	r24, 0x01A3
    3b10:	90 91 a4 01 	lds	r25, 0x01A4
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	29 f0       	breq	.+10     	; 0x3b22 <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    3b18:	e0 91 a3 01 	lds	r30, 0x01A3
    3b1c:	f0 91 a4 01 	lds	r31, 0x01A4
    3b20:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	ff 91       	pop	r31
    3b28:	ef 91       	pop	r30
    3b2a:	bf 91       	pop	r27
    3b2c:	af 91       	pop	r26
    3b2e:	9f 91       	pop	r25
    3b30:	8f 91       	pop	r24
    3b32:	7f 91       	pop	r23
    3b34:	6f 91       	pop	r22
    3b36:	5f 91       	pop	r21
    3b38:	4f 91       	pop	r20
    3b3a:	3f 91       	pop	r19
    3b3c:	2f 91       	pop	r18
    3b3e:	0f 90       	pop	r0
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	0f 90       	pop	r0
    3b44:	1f 90       	pop	r1
    3b46:	18 95       	reti

00003b48 <__vector_5>:
/**
 * @brief Timer/Counter 2 OverFlow Event ISR.
 */
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    3b48:	1f 92       	push	r1
    3b4a:	0f 92       	push	r0
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	0f 92       	push	r0
    3b50:	11 24       	eor	r1, r1
    3b52:	2f 93       	push	r18
    3b54:	3f 93       	push	r19
    3b56:	4f 93       	push	r20
    3b58:	5f 93       	push	r21
    3b5a:	6f 93       	push	r22
    3b5c:	7f 93       	push	r23
    3b5e:	8f 93       	push	r24
    3b60:	9f 93       	push	r25
    3b62:	af 93       	push	r26
    3b64:	bf 93       	push	r27
    3b66:	ef 93       	push	r30
    3b68:	ff 93       	push	r31
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    3b72:	80 91 a5 01 	lds	r24, 0x01A5
    3b76:	90 91 a6 01 	lds	r25, 0x01A6
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	29 f0       	breq	.+10     	; 0x3b88 <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    3b7e:	e0 91 a5 01 	lds	r30, 0x01A5
    3b82:	f0 91 a6 01 	lds	r31, 0x01A6
    3b86:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	ff 91       	pop	r31
    3b8e:	ef 91       	pop	r30
    3b90:	bf 91       	pop	r27
    3b92:	af 91       	pop	r26
    3b94:	9f 91       	pop	r25
    3b96:	8f 91       	pop	r24
    3b98:	7f 91       	pop	r23
    3b9a:	6f 91       	pop	r22
    3b9c:	5f 91       	pop	r21
    3b9e:	4f 91       	pop	r20
    3ba0:	3f 91       	pop	r19
    3ba2:	2f 91       	pop	r18
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	0f 90       	pop	r0
    3baa:	1f 90       	pop	r1
    3bac:	18 95       	reti

00003bae <__vector_4>:
/**
 * @brief Timer/Counter 2 Compare Match Event ISR.
 */
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    3bae:	1f 92       	push	r1
    3bb0:	0f 92       	push	r0
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	0f 92       	push	r0
    3bb6:	11 24       	eor	r1, r1
    3bb8:	2f 93       	push	r18
    3bba:	3f 93       	push	r19
    3bbc:	4f 93       	push	r20
    3bbe:	5f 93       	push	r21
    3bc0:	6f 93       	push	r22
    3bc2:	7f 93       	push	r23
    3bc4:	8f 93       	push	r24
    3bc6:	9f 93       	push	r25
    3bc8:	af 93       	push	r26
    3bca:	bf 93       	push	r27
    3bcc:	ef 93       	push	r30
    3bce:	ff 93       	push	r31
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    3bd8:	80 91 a7 01 	lds	r24, 0x01A7
    3bdc:	90 91 a8 01 	lds	r25, 0x01A8
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	29 f0       	breq	.+10     	; 0x3bee <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    3be4:	e0 91 a7 01 	lds	r30, 0x01A7
    3be8:	f0 91 a8 01 	lds	r31, 0x01A8
    3bec:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	ff 91       	pop	r31
    3bf4:	ef 91       	pop	r30
    3bf6:	bf 91       	pop	r27
    3bf8:	af 91       	pop	r26
    3bfa:	9f 91       	pop	r25
    3bfc:	8f 91       	pop	r24
    3bfe:	7f 91       	pop	r23
    3c00:	6f 91       	pop	r22
    3c02:	5f 91       	pop	r21
    3c04:	4f 91       	pop	r20
    3c06:	3f 91       	pop	r19
    3c08:	2f 91       	pop	r18
    3c0a:	0f 90       	pop	r0
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	0f 90       	pop	r0
    3c10:	1f 90       	pop	r1
    3c12:	18 95       	reti

00003c14 <SPI_voidInit>:

/**
 * @brief Function to initialize the SPI peripheral with prebuild configurations.
 */
void SPI_voidInit(void)
{
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
	/*Set the data order bit*/
#if SPI_u8DATA_TRANSCEIVE_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
    3c1c:	ad e2       	ldi	r26, 0x2D	; 45
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	ed e2       	ldi	r30, 0x2D	; 45
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	8f 7d       	andi	r24, 0xDF	; 223
    3c28:	8c 93       	st	X, r24
#error Wrong SPI_u8DATA_TRANSCEIVE_ORDER Configuration Choise.
#endif

	/*Set the SPI node mode*/
#if SPI_u8MODE == MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    3c2a:	ad e2       	ldi	r26, 0x2D	; 45
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	ed e2       	ldi	r30, 0x2D	; 45
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	80 61       	ori	r24, 0x10	; 16
    3c36:	8c 93       	st	X, r24
#error Wrong SPI_u8MODE Configuration Choise.
#endif

	/*Set the SPI clock polarity*/
#if SPI_u8IDLE_STATE == LOW_VOLTAGE
	CLR_BIT(SPCR,SPCR_CPOL);
    3c38:	ad e2       	ldi	r26, 0x2D	; 45
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	ed e2       	ldi	r30, 0x2D	; 45
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	87 7f       	andi	r24, 0xF7	; 247
    3c44:	8c 93       	st	X, r24
#error Wrong SPI_u8IDLE_STATE Configuration Choise.
#endif

	/*Set the SPI clock phase*/
#if SPI_u8MODE == MASTER
	SPCR &= CLOCK_PRESCALER_MASK;
    3c46:	ad e2       	ldi	r26, 0x2D	; 45
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	ed e2       	ldi	r30, 0x2D	; 45
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	8c 7f       	andi	r24, 0xFC	; 252
    3c52:	8c 93       	st	X, r24
	SPCR |= SPI_u8CLOCK_PRESCALER;
    3c54:	ad e2       	ldi	r26, 0x2D	; 45
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	ed e2       	ldi	r30, 0x2D	; 45
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	8c 93       	st	X, r24
	/*Set the SPI double clock rate speed bit*/
#if SPI_u8DOUBLE_SPEED == ENABLED
	SET_BIT(SPSR,SPSR_SPI2X);

#elif SPI_u8DOUBLE_SPEED == DISABLED
	CLR_BIT(SPSR,SPSR_SPI2X);
    3c60:	ae e2       	ldi	r26, 0x2E	; 46
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	ee e2       	ldi	r30, 0x2E	; 46
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	8e 7f       	andi	r24, 0xFE	; 254
    3c6c:	8c 93       	st	X, r24
#endif

#endif

	/*Enable SPI Peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    3c6e:	ad e2       	ldi	r26, 0x2D	; 45
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	ed e2       	ldi	r30, 0x2D	; 45
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	80 64       	ori	r24, 0x40	; 64
    3c7a:	8c 93       	st	X, r24
}
    3c7c:	cf 91       	pop	r28
    3c7e:	df 91       	pop	r29
    3c80:	08 95       	ret

00003c82 <SPI_u8Transceive>:
 * @brief 				Function to transfer and receive data with SPI peripheral.
 * @param Copy_u8Data	The Transmitting data.
 * @return				The Received Data.
 */
uint8 SPI_u8Transceive(uint8 Copy_u8Data)
{
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	0f 92       	push	r0
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	89 83       	std	Y+1, r24	; 0x01
	/*Set the transmitting data*/
	SPDR = Copy_u8Data;
    3c8e:	ef e2       	ldi	r30, 0x2F	; 47
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	80 83       	st	Z, r24

	/*Polling until the data is transceived*/
	while((GET_BIT(SPSR,SPSR_SPIF)) == 0);
    3c96:	ee e2       	ldi	r30, 0x2E	; 46
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
    3c9c:	88 23       	and	r24, r24
    3c9e:	dc f7       	brge	.-10     	; 0x3c96 <SPI_u8Transceive+0x14>

	/*Return the received data*/
	return SPDR;
    3ca0:	ef e2       	ldi	r30, 0x2F	; 47
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
}
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <PORT_voidInit>:

/**
 * @brief Function to initialize all DIO pins (direction and value).
 */
void PORT_voidInit(void)
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
	/*Assign directions into DDR registers*/
	DDRA = PORTA_DIR;
    3cb6:	ea e3       	ldi	r30, 0x3A	; 58
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	8f ef       	ldi	r24, 0xFF	; 255
    3cbc:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    3cbe:	e7 e3       	ldi	r30, 0x37	; 55
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	87 eb       	ldi	r24, 0xB7	; 183
    3cc4:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    3cc6:	e4 e3       	ldi	r30, 0x34	; 52
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	8f ef       	ldi	r24, 0xFF	; 255
    3ccc:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    3cce:	e1 e3       	ldi	r30, 0x31	; 49
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	82 eb       	ldi	r24, 0xB2	; 178
    3cd4:	80 83       	st	Z, r24

	/*Assign values into PORT registers*/
	PORTA = PORTA_INITIAL_VALUE;
    3cd6:	eb e3       	ldi	r30, 0x3B	; 59
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    3cdc:	e8 e3       	ldi	r30, 0x38	; 56
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	8f eb       	ldi	r24, 0xBF	; 191
    3ce2:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    3ce4:	e5 e3       	ldi	r30, 0x35	; 53
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    3cea:	e2 e3       	ldi	r30, 0x32	; 50
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	8f e3       	ldi	r24, 0x3F	; 63
    3cf0:	80 83       	st	Z, r24
}
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    3d00:	78 94       	sei
}
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    3d10:	f8 94       	cli
}
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <DIO_u8SetPinDirection>:
 * @param Copy_u8Pin 		Pin number.
 * @param Copy_u8Direction 	The new direction wanted to set.
 * @return 					Error state.
 */
uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	28 97       	sbiw	r28, 0x08	; 8
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	8a 83       	std	Y+2, r24	; 0x02
    3d2e:	6b 83       	std	Y+3, r22	; 0x03
    3d30:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    3d32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    3d34:	8b 81       	ldd	r24, Y+3	; 0x03
    3d36:	88 30       	cpi	r24, 0x08	; 8
    3d38:	08 f0       	brcs	.+2      	; 0x3d3c <DIO_u8SetPinDirection+0x24>
    3d3a:	f4 c0       	rjmp	.+488    	; 0x3f24 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    3d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <DIO_u8SetPinDirection+0x2c>
    3d42:	72 c0       	rjmp	.+228    	; 0x3e28 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	38 87       	std	Y+8, r19	; 0x08
    3d4c:	2f 83       	std	Y+7, r18	; 0x07
    3d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3d50:	98 85       	ldd	r25, Y+8	; 0x08
    3d52:	81 30       	cpi	r24, 0x01	; 1
    3d54:	91 05       	cpc	r25, r1
    3d56:	49 f1       	breq	.+82     	; 0x3daa <DIO_u8SetPinDirection+0x92>
    3d58:	2f 81       	ldd	r18, Y+7	; 0x07
    3d5a:	38 85       	ldd	r19, Y+8	; 0x08
    3d5c:	22 30       	cpi	r18, 0x02	; 2
    3d5e:	31 05       	cpc	r19, r1
    3d60:	2c f4       	brge	.+10     	; 0x3d6c <DIO_u8SetPinDirection+0x54>
    3d62:	8f 81       	ldd	r24, Y+7	; 0x07
    3d64:	98 85       	ldd	r25, Y+8	; 0x08
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	61 f0       	breq	.+24     	; 0x3d82 <DIO_u8SetPinDirection+0x6a>
    3d6a:	5b c0       	rjmp	.+182    	; 0x3e22 <DIO_u8SetPinDirection+0x10a>
    3d6c:	2f 81       	ldd	r18, Y+7	; 0x07
    3d6e:	38 85       	ldd	r19, Y+8	; 0x08
    3d70:	22 30       	cpi	r18, 0x02	; 2
    3d72:	31 05       	cpc	r19, r1
    3d74:	71 f1       	breq	.+92     	; 0x3dd2 <DIO_u8SetPinDirection+0xba>
    3d76:	8f 81       	ldd	r24, Y+7	; 0x07
    3d78:	98 85       	ldd	r25, Y+8	; 0x08
    3d7a:	83 30       	cpi	r24, 0x03	; 3
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	e9 f1       	breq	.+122    	; 0x3dfa <DIO_u8SetPinDirection+0xe2>
    3d80:	50 c0       	rjmp	.+160    	; 0x3e22 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    3d82:	aa e3       	ldi	r26, 0x3A	; 58
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	ea e3       	ldi	r30, 0x3A	; 58
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	48 2f       	mov	r20, r24
    3d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d90:	28 2f       	mov	r18, r24
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	02 2e       	mov	r0, r18
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <DIO_u8SetPinDirection+0x88>
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	0a 94       	dec	r0
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <DIO_u8SetPinDirection+0x84>
    3da4:	84 2b       	or	r24, r20
    3da6:	8c 93       	st	X, r24
    3da8:	bf c0       	rjmp	.+382    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    3daa:	a7 e3       	ldi	r26, 0x37	; 55
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e7 e3       	ldi	r30, 0x37	; 55
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	48 2f       	mov	r20, r24
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	28 2f       	mov	r18, r24
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	02 2e       	mov	r0, r18
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <DIO_u8SetPinDirection+0xb0>
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	0a 94       	dec	r0
    3dca:	e2 f7       	brpl	.-8      	; 0x3dc4 <DIO_u8SetPinDirection+0xac>
    3dcc:	84 2b       	or	r24, r20
    3dce:	8c 93       	st	X, r24
    3dd0:	ab c0       	rjmp	.+342    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    3dd2:	a4 e3       	ldi	r26, 0x34	; 52
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	e4 e3       	ldi	r30, 0x34	; 52
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	48 2f       	mov	r20, r24
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	02 2e       	mov	r0, r18
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <DIO_u8SetPinDirection+0xd8>
    3dec:	88 0f       	add	r24, r24
    3dee:	99 1f       	adc	r25, r25
    3df0:	0a 94       	dec	r0
    3df2:	e2 f7       	brpl	.-8      	; 0x3dec <DIO_u8SetPinDirection+0xd4>
    3df4:	84 2b       	or	r24, r20
    3df6:	8c 93       	st	X, r24
    3df8:	97 c0       	rjmp	.+302    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    3dfa:	a1 e3       	ldi	r26, 0x31	; 49
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	e1 e3       	ldi	r30, 0x31	; 49
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	48 2f       	mov	r20, r24
    3e06:	8b 81       	ldd	r24, Y+3	; 0x03
    3e08:	28 2f       	mov	r18, r24
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	02 2e       	mov	r0, r18
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <DIO_u8SetPinDirection+0x100>
    3e14:	88 0f       	add	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	0a 94       	dec	r0
    3e1a:	e2 f7       	brpl	.-8      	; 0x3e14 <DIO_u8SetPinDirection+0xfc>
    3e1c:	84 2b       	or	r24, r20
    3e1e:	8c 93       	st	X, r24
    3e20:	83 c0       	rjmp	.+262    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	80 c0       	rjmp	.+256    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    3e28:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2a:	88 23       	and	r24, r24
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <DIO_u8SetPinDirection+0x118>
    3e2e:	77 c0       	rjmp	.+238    	; 0x3f1e <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    3e30:	8a 81       	ldd	r24, Y+2	; 0x02
    3e32:	28 2f       	mov	r18, r24
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	3e 83       	std	Y+6, r19	; 0x06
    3e38:	2d 83       	std	Y+5, r18	; 0x05
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	91 05       	cpc	r25, r1
    3e42:	59 f1       	breq	.+86     	; 0x3e9a <DIO_u8SetPinDirection+0x182>
    3e44:	2d 81       	ldd	r18, Y+5	; 0x05
    3e46:	3e 81       	ldd	r19, Y+6	; 0x06
    3e48:	22 30       	cpi	r18, 0x02	; 2
    3e4a:	31 05       	cpc	r19, r1
    3e4c:	2c f4       	brge	.+10     	; 0x3e58 <DIO_u8SetPinDirection+0x140>
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	9e 81       	ldd	r25, Y+6	; 0x06
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	69 f0       	breq	.+26     	; 0x3e70 <DIO_u8SetPinDirection+0x158>
    3e56:	60 c0       	rjmp	.+192    	; 0x3f18 <DIO_u8SetPinDirection+0x200>
    3e58:	2d 81       	ldd	r18, Y+5	; 0x05
    3e5a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e5c:	22 30       	cpi	r18, 0x02	; 2
    3e5e:	31 05       	cpc	r19, r1
    3e60:	89 f1       	breq	.+98     	; 0x3ec4 <DIO_u8SetPinDirection+0x1ac>
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	83 30       	cpi	r24, 0x03	; 3
    3e68:	91 05       	cpc	r25, r1
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <DIO_u8SetPinDirection+0x156>
    3e6c:	40 c0       	rjmp	.+128    	; 0x3eee <DIO_u8SetPinDirection+0x1d6>
    3e6e:	54 c0       	rjmp	.+168    	; 0x3f18 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    3e70:	aa e3       	ldi	r26, 0x3A	; 58
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	ea e3       	ldi	r30, 0x3A	; 58
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	48 2f       	mov	r20, r24
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	28 2f       	mov	r18, r24
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	02 2e       	mov	r0, r18
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <DIO_u8SetPinDirection+0x176>
    3e8a:	88 0f       	add	r24, r24
    3e8c:	99 1f       	adc	r25, r25
    3e8e:	0a 94       	dec	r0
    3e90:	e2 f7       	brpl	.-8      	; 0x3e8a <DIO_u8SetPinDirection+0x172>
    3e92:	80 95       	com	r24
    3e94:	84 23       	and	r24, r20
    3e96:	8c 93       	st	X, r24
    3e98:	47 c0       	rjmp	.+142    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    3e9a:	a7 e3       	ldi	r26, 0x37	; 55
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e7 e3       	ldi	r30, 0x37	; 55
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	48 2f       	mov	r20, r24
    3ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	02 2e       	mov	r0, r18
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <DIO_u8SetPinDirection+0x1a0>
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	0a 94       	dec	r0
    3eba:	e2 f7       	brpl	.-8      	; 0x3eb4 <DIO_u8SetPinDirection+0x19c>
    3ebc:	80 95       	com	r24
    3ebe:	84 23       	and	r24, r20
    3ec0:	8c 93       	st	X, r24
    3ec2:	32 c0       	rjmp	.+100    	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    3ec4:	a4 e3       	ldi	r26, 0x34	; 52
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	e4 e3       	ldi	r30, 0x34	; 52
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	80 81       	ld	r24, Z
    3ece:	48 2f       	mov	r20, r24
    3ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed2:	28 2f       	mov	r18, r24
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	02 2e       	mov	r0, r18
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <DIO_u8SetPinDirection+0x1ca>
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	0a 94       	dec	r0
    3ee4:	e2 f7       	brpl	.-8      	; 0x3ede <DIO_u8SetPinDirection+0x1c6>
    3ee6:	80 95       	com	r24
    3ee8:	84 23       	and	r24, r20
    3eea:	8c 93       	st	X, r24
    3eec:	1d c0       	rjmp	.+58     	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    3eee:	a1 e3       	ldi	r26, 0x31	; 49
    3ef0:	b0 e0       	ldi	r27, 0x00	; 0
    3ef2:	e1 e3       	ldi	r30, 0x31	; 49
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	80 81       	ld	r24, Z
    3ef8:	48 2f       	mov	r20, r24
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	28 2f       	mov	r18, r24
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	02 2e       	mov	r0, r18
    3f06:	02 c0       	rjmp	.+4      	; 0x3f0c <DIO_u8SetPinDirection+0x1f4>
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	0a 94       	dec	r0
    3f0e:	e2 f7       	brpl	.-8      	; 0x3f08 <DIO_u8SetPinDirection+0x1f0>
    3f10:	80 95       	com	r24
    3f12:	84 23       	and	r24, r20
    3f14:	8c 93       	st	X, r24
    3f16:	08 c0       	rjmp	.+16     	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	89 83       	std	Y+1, r24	; 0x01
    3f1c:	05 c0       	rjmp	.+10     	; 0x3f28 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	89 83       	std	Y+1, r24	; 0x01
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f2a:	28 96       	adiw	r28, 0x08	; 8
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <DIO_u8SetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_u8Value 	The new value wanted to set.
 * @return 				Error state.
 */
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	28 97       	sbiw	r28, 0x08	; 8
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	f8 94       	cli
    3f4a:	de bf       	out	0x3e, r29	; 62
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	8a 83       	std	Y+2, r24	; 0x02
    3f52:	6b 83       	std	Y+3, r22	; 0x03
    3f54:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    3f56:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    3f58:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5a:	88 30       	cpi	r24, 0x08	; 8
    3f5c:	08 f0       	brcs	.+2      	; 0x3f60 <DIO_u8SetPinValue+0x24>
    3f5e:	f4 c0       	rjmp	.+488    	; 0x4148 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    3f60:	8c 81       	ldd	r24, Y+4	; 0x04
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <DIO_u8SetPinValue+0x2c>
    3f66:	72 c0       	rjmp	.+228    	; 0x404c <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    3f68:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6a:	28 2f       	mov	r18, r24
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	38 87       	std	Y+8, r19	; 0x08
    3f70:	2f 83       	std	Y+7, r18	; 0x07
    3f72:	8f 81       	ldd	r24, Y+7	; 0x07
    3f74:	98 85       	ldd	r25, Y+8	; 0x08
    3f76:	81 30       	cpi	r24, 0x01	; 1
    3f78:	91 05       	cpc	r25, r1
    3f7a:	49 f1       	breq	.+82     	; 0x3fce <DIO_u8SetPinValue+0x92>
    3f7c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f7e:	38 85       	ldd	r19, Y+8	; 0x08
    3f80:	22 30       	cpi	r18, 0x02	; 2
    3f82:	31 05       	cpc	r19, r1
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <DIO_u8SetPinValue+0x54>
    3f86:	8f 81       	ldd	r24, Y+7	; 0x07
    3f88:	98 85       	ldd	r25, Y+8	; 0x08
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	61 f0       	breq	.+24     	; 0x3fa6 <DIO_u8SetPinValue+0x6a>
    3f8e:	5b c0       	rjmp	.+182    	; 0x4046 <DIO_u8SetPinValue+0x10a>
    3f90:	2f 81       	ldd	r18, Y+7	; 0x07
    3f92:	38 85       	ldd	r19, Y+8	; 0x08
    3f94:	22 30       	cpi	r18, 0x02	; 2
    3f96:	31 05       	cpc	r19, r1
    3f98:	71 f1       	breq	.+92     	; 0x3ff6 <DIO_u8SetPinValue+0xba>
    3f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f9c:	98 85       	ldd	r25, Y+8	; 0x08
    3f9e:	83 30       	cpi	r24, 0x03	; 3
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	e9 f1       	breq	.+122    	; 0x401e <DIO_u8SetPinValue+0xe2>
    3fa4:	50 c0       	rjmp	.+160    	; 0x4046 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    3fa6:	ab e3       	ldi	r26, 0x3B	; 59
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	eb e3       	ldi	r30, 0x3B	; 59
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	48 2f       	mov	r20, r24
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	28 2f       	mov	r18, r24
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	02 2e       	mov	r0, r18
    3fbe:	02 c0       	rjmp	.+4      	; 0x3fc4 <DIO_u8SetPinValue+0x88>
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	0a 94       	dec	r0
    3fc6:	e2 f7       	brpl	.-8      	; 0x3fc0 <DIO_u8SetPinValue+0x84>
    3fc8:	84 2b       	or	r24, r20
    3fca:	8c 93       	st	X, r24
    3fcc:	bf c0       	rjmp	.+382    	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    3fce:	a8 e3       	ldi	r26, 0x38	; 56
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	e8 e3       	ldi	r30, 0x38	; 56
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	80 81       	ld	r24, Z
    3fd8:	48 2f       	mov	r20, r24
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	02 2e       	mov	r0, r18
    3fe6:	02 c0       	rjmp	.+4      	; 0x3fec <DIO_u8SetPinValue+0xb0>
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	0a 94       	dec	r0
    3fee:	e2 f7       	brpl	.-8      	; 0x3fe8 <DIO_u8SetPinValue+0xac>
    3ff0:	84 2b       	or	r24, r20
    3ff2:	8c 93       	st	X, r24
    3ff4:	ab c0       	rjmp	.+342    	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    3ff6:	a5 e3       	ldi	r26, 0x35	; 53
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e5 e3       	ldi	r30, 0x35	; 53
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	48 2f       	mov	r20, r24
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	28 2f       	mov	r18, r24
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	02 2e       	mov	r0, r18
    400e:	02 c0       	rjmp	.+4      	; 0x4014 <DIO_u8SetPinValue+0xd8>
    4010:	88 0f       	add	r24, r24
    4012:	99 1f       	adc	r25, r25
    4014:	0a 94       	dec	r0
    4016:	e2 f7       	brpl	.-8      	; 0x4010 <DIO_u8SetPinValue+0xd4>
    4018:	84 2b       	or	r24, r20
    401a:	8c 93       	st	X, r24
    401c:	97 c0       	rjmp	.+302    	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    401e:	a2 e3       	ldi	r26, 0x32	; 50
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	e2 e3       	ldi	r30, 0x32	; 50
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	80 81       	ld	r24, Z
    4028:	48 2f       	mov	r20, r24
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	28 2f       	mov	r18, r24
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	02 2e       	mov	r0, r18
    4036:	02 c0       	rjmp	.+4      	; 0x403c <DIO_u8SetPinValue+0x100>
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	0a 94       	dec	r0
    403e:	e2 f7       	brpl	.-8      	; 0x4038 <DIO_u8SetPinValue+0xfc>
    4040:	84 2b       	or	r24, r20
    4042:	8c 93       	st	X, r24
    4044:	83 c0       	rjmp	.+262    	; 0x414c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	89 83       	std	Y+1, r24	; 0x01
    404a:	80 c0       	rjmp	.+256    	; 0x414c <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    404c:	8c 81       	ldd	r24, Y+4	; 0x04
    404e:	88 23       	and	r24, r24
    4050:	09 f0       	breq	.+2      	; 0x4054 <DIO_u8SetPinValue+0x118>
    4052:	77 c0       	rjmp	.+238    	; 0x4142 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	28 2f       	mov	r18, r24
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	3e 83       	std	Y+6, r19	; 0x06
    405c:	2d 83       	std	Y+5, r18	; 0x05
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	81 30       	cpi	r24, 0x01	; 1
    4064:	91 05       	cpc	r25, r1
    4066:	59 f1       	breq	.+86     	; 0x40be <DIO_u8SetPinValue+0x182>
    4068:	2d 81       	ldd	r18, Y+5	; 0x05
    406a:	3e 81       	ldd	r19, Y+6	; 0x06
    406c:	22 30       	cpi	r18, 0x02	; 2
    406e:	31 05       	cpc	r19, r1
    4070:	2c f4       	brge	.+10     	; 0x407c <DIO_u8SetPinValue+0x140>
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	9e 81       	ldd	r25, Y+6	; 0x06
    4076:	00 97       	sbiw	r24, 0x00	; 0
    4078:	69 f0       	breq	.+26     	; 0x4094 <DIO_u8SetPinValue+0x158>
    407a:	60 c0       	rjmp	.+192    	; 0x413c <DIO_u8SetPinValue+0x200>
    407c:	2d 81       	ldd	r18, Y+5	; 0x05
    407e:	3e 81       	ldd	r19, Y+6	; 0x06
    4080:	22 30       	cpi	r18, 0x02	; 2
    4082:	31 05       	cpc	r19, r1
    4084:	89 f1       	breq	.+98     	; 0x40e8 <DIO_u8SetPinValue+0x1ac>
    4086:	8d 81       	ldd	r24, Y+5	; 0x05
    4088:	9e 81       	ldd	r25, Y+6	; 0x06
    408a:	83 30       	cpi	r24, 0x03	; 3
    408c:	91 05       	cpc	r25, r1
    408e:	09 f4       	brne	.+2      	; 0x4092 <DIO_u8SetPinValue+0x156>
    4090:	40 c0       	rjmp	.+128    	; 0x4112 <DIO_u8SetPinValue+0x1d6>
    4092:	54 c0       	rjmp	.+168    	; 0x413c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    4094:	ab e3       	ldi	r26, 0x3B	; 59
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	eb e3       	ldi	r30, 0x3B	; 59
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	80 81       	ld	r24, Z
    409e:	48 2f       	mov	r20, r24
    40a0:	8b 81       	ldd	r24, Y+3	; 0x03
    40a2:	28 2f       	mov	r18, r24
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	02 2e       	mov	r0, r18
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <DIO_u8SetPinValue+0x176>
    40ae:	88 0f       	add	r24, r24
    40b0:	99 1f       	adc	r25, r25
    40b2:	0a 94       	dec	r0
    40b4:	e2 f7       	brpl	.-8      	; 0x40ae <DIO_u8SetPinValue+0x172>
    40b6:	80 95       	com	r24
    40b8:	84 23       	and	r24, r20
    40ba:	8c 93       	st	X, r24
    40bc:	47 c0       	rjmp	.+142    	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    40be:	a8 e3       	ldi	r26, 0x38	; 56
    40c0:	b0 e0       	ldi	r27, 0x00	; 0
    40c2:	e8 e3       	ldi	r30, 0x38	; 56
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	80 81       	ld	r24, Z
    40c8:	48 2f       	mov	r20, r24
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	02 2e       	mov	r0, r18
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <DIO_u8SetPinValue+0x1a0>
    40d8:	88 0f       	add	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	0a 94       	dec	r0
    40de:	e2 f7       	brpl	.-8      	; 0x40d8 <DIO_u8SetPinValue+0x19c>
    40e0:	80 95       	com	r24
    40e2:	84 23       	and	r24, r20
    40e4:	8c 93       	st	X, r24
    40e6:	32 c0       	rjmp	.+100    	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    40e8:	a5 e3       	ldi	r26, 0x35	; 53
    40ea:	b0 e0       	ldi	r27, 0x00	; 0
    40ec:	e5 e3       	ldi	r30, 0x35	; 53
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	80 81       	ld	r24, Z
    40f2:	48 2f       	mov	r20, r24
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	28 2f       	mov	r18, r24
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	02 2e       	mov	r0, r18
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <DIO_u8SetPinValue+0x1ca>
    4102:	88 0f       	add	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	0a 94       	dec	r0
    4108:	e2 f7       	brpl	.-8      	; 0x4102 <DIO_u8SetPinValue+0x1c6>
    410a:	80 95       	com	r24
    410c:	84 23       	and	r24, r20
    410e:	8c 93       	st	X, r24
    4110:	1d c0       	rjmp	.+58     	; 0x414c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    4112:	a2 e3       	ldi	r26, 0x32	; 50
    4114:	b0 e0       	ldi	r27, 0x00	; 0
    4116:	e2 e3       	ldi	r30, 0x32	; 50
    4118:	f0 e0       	ldi	r31, 0x00	; 0
    411a:	80 81       	ld	r24, Z
    411c:	48 2f       	mov	r20, r24
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	28 2f       	mov	r18, r24
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	02 2e       	mov	r0, r18
    412a:	02 c0       	rjmp	.+4      	; 0x4130 <DIO_u8SetPinValue+0x1f4>
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	0a 94       	dec	r0
    4132:	e2 f7       	brpl	.-8      	; 0x412c <DIO_u8SetPinValue+0x1f0>
    4134:	80 95       	com	r24
    4136:	84 23       	and	r24, r20
    4138:	8c 93       	st	X, r24
    413a:	08 c0       	rjmp	.+16     	; 0x414c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	89 83       	std	Y+1, r24	; 0x01
    4140:	05 c0       	rjmp	.+10     	; 0x414c <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	89 83       	std	Y+1, r24	; 0x01
    4146:	02 c0       	rjmp	.+4      	; 0x414c <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    414c:	89 81       	ldd	r24, Y+1	; 0x01
}
    414e:	28 96       	adiw	r28, 0x08	; 8
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	f8 94       	cli
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	0f be       	out	0x3f, r0	; 63
    4158:	cd bf       	out	0x3d, r28	; 61
    415a:	cf 91       	pop	r28
    415c:	df 91       	pop	r29
    415e:	08 95       	ret

00004160 <DIO_u8TogglePinValue>:
 * @param Copy_u8Port 	Port number on which the pin is found.
 * @param Copy_u8Pin 	Pin number.
 * @return 				Error state.
 */
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    4160:	df 93       	push	r29
    4162:	cf 93       	push	r28
    4164:	00 d0       	rcall	.+0      	; 0x4166 <DIO_u8TogglePinValue+0x6>
    4166:	00 d0       	rcall	.+0      	; 0x4168 <DIO_u8TogglePinValue+0x8>
    4168:	0f 92       	push	r0
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	8a 83       	std	Y+2, r24	; 0x02
    4170:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    4172:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	88 30       	cpi	r24, 0x08	; 8
    4178:	08 f0       	brcs	.+2      	; 0x417c <DIO_u8TogglePinValue+0x1c>
    417a:	72 c0       	rjmp	.+228    	; 0x4260 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    417c:	8a 81       	ldd	r24, Y+2	; 0x02
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	3d 83       	std	Y+5, r19	; 0x05
    4184:	2c 83       	std	Y+4, r18	; 0x04
    4186:	8c 81       	ldd	r24, Y+4	; 0x04
    4188:	9d 81       	ldd	r25, Y+5	; 0x05
    418a:	81 30       	cpi	r24, 0x01	; 1
    418c:	91 05       	cpc	r25, r1
    418e:	49 f1       	breq	.+82     	; 0x41e2 <DIO_u8TogglePinValue+0x82>
    4190:	2c 81       	ldd	r18, Y+4	; 0x04
    4192:	3d 81       	ldd	r19, Y+5	; 0x05
    4194:	22 30       	cpi	r18, 0x02	; 2
    4196:	31 05       	cpc	r19, r1
    4198:	2c f4       	brge	.+10     	; 0x41a4 <DIO_u8TogglePinValue+0x44>
    419a:	8c 81       	ldd	r24, Y+4	; 0x04
    419c:	9d 81       	ldd	r25, Y+5	; 0x05
    419e:	00 97       	sbiw	r24, 0x00	; 0
    41a0:	61 f0       	breq	.+24     	; 0x41ba <DIO_u8TogglePinValue+0x5a>
    41a2:	5b c0       	rjmp	.+182    	; 0x425a <DIO_u8TogglePinValue+0xfa>
    41a4:	2c 81       	ldd	r18, Y+4	; 0x04
    41a6:	3d 81       	ldd	r19, Y+5	; 0x05
    41a8:	22 30       	cpi	r18, 0x02	; 2
    41aa:	31 05       	cpc	r19, r1
    41ac:	71 f1       	breq	.+92     	; 0x420a <DIO_u8TogglePinValue+0xaa>
    41ae:	8c 81       	ldd	r24, Y+4	; 0x04
    41b0:	9d 81       	ldd	r25, Y+5	; 0x05
    41b2:	83 30       	cpi	r24, 0x03	; 3
    41b4:	91 05       	cpc	r25, r1
    41b6:	e9 f1       	breq	.+122    	; 0x4232 <DIO_u8TogglePinValue+0xd2>
    41b8:	50 c0       	rjmp	.+160    	; 0x425a <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    41ba:	ab e3       	ldi	r26, 0x3B	; 59
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	eb e3       	ldi	r30, 0x3B	; 59
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	48 2f       	mov	r20, r24
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	02 2e       	mov	r0, r18
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <DIO_u8TogglePinValue+0x78>
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	0a 94       	dec	r0
    41da:	e2 f7       	brpl	.-8      	; 0x41d4 <DIO_u8TogglePinValue+0x74>
    41dc:	84 27       	eor	r24, r20
    41de:	8c 93       	st	X, r24
    41e0:	41 c0       	rjmp	.+130    	; 0x4264 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    41e2:	a8 e3       	ldi	r26, 0x38	; 56
    41e4:	b0 e0       	ldi	r27, 0x00	; 0
    41e6:	e8 e3       	ldi	r30, 0x38	; 56
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	80 81       	ld	r24, Z
    41ec:	48 2f       	mov	r20, r24
    41ee:	8b 81       	ldd	r24, Y+3	; 0x03
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	02 2e       	mov	r0, r18
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <DIO_u8TogglePinValue+0xa0>
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	0a 94       	dec	r0
    4202:	e2 f7       	brpl	.-8      	; 0x41fc <DIO_u8TogglePinValue+0x9c>
    4204:	84 27       	eor	r24, r20
    4206:	8c 93       	st	X, r24
    4208:	2d c0       	rjmp	.+90     	; 0x4264 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    420a:	a5 e3       	ldi	r26, 0x35	; 53
    420c:	b0 e0       	ldi	r27, 0x00	; 0
    420e:	e5 e3       	ldi	r30, 0x35	; 53
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	48 2f       	mov	r20, r24
    4216:	8b 81       	ldd	r24, Y+3	; 0x03
    4218:	28 2f       	mov	r18, r24
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	02 2e       	mov	r0, r18
    4222:	02 c0       	rjmp	.+4      	; 0x4228 <DIO_u8TogglePinValue+0xc8>
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	0a 94       	dec	r0
    422a:	e2 f7       	brpl	.-8      	; 0x4224 <DIO_u8TogglePinValue+0xc4>
    422c:	84 27       	eor	r24, r20
    422e:	8c 93       	st	X, r24
    4230:	19 c0       	rjmp	.+50     	; 0x4264 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    4232:	a2 e3       	ldi	r26, 0x32	; 50
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	e2 e3       	ldi	r30, 0x32	; 50
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	48 2f       	mov	r20, r24
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	02 2e       	mov	r0, r18
    424a:	02 c0       	rjmp	.+4      	; 0x4250 <DIO_u8TogglePinValue+0xf0>
    424c:	88 0f       	add	r24, r24
    424e:	99 1f       	adc	r25, r25
    4250:	0a 94       	dec	r0
    4252:	e2 f7       	brpl	.-8      	; 0x424c <DIO_u8TogglePinValue+0xec>
    4254:	84 27       	eor	r24, r20
    4256:	8c 93       	st	X, r24
    4258:	05 c0       	rjmp	.+10     	; 0x4264 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	89 83       	std	Y+1, r24	; 0x01
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    4264:	89 81       	ldd	r24, Y+1	; 0x01
}
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	0f 90       	pop	r0
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	cf 91       	pop	r28
    4272:	df 91       	pop	r29
    4274:	08 95       	ret

00004276 <DIO_u8GetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_pu8Value Pointer to return the value of the pin.
 * @return 				Error state.
 */
uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    4276:	df 93       	push	r29
    4278:	cf 93       	push	r28
    427a:	cd b7       	in	r28, 0x3d	; 61
    427c:	de b7       	in	r29, 0x3e	; 62
    427e:	27 97       	sbiw	r28, 0x07	; 7
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	8a 83       	std	Y+2, r24	; 0x02
    428c:	6b 83       	std	Y+3, r22	; 0x03
    428e:	5d 83       	std	Y+5, r21	; 0x05
    4290:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    4292:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    4294:	8b 81       	ldd	r24, Y+3	; 0x03
    4296:	88 30       	cpi	r24, 0x08	; 8
    4298:	08 f0       	brcs	.+2      	; 0x429c <DIO_u8GetPinValue+0x26>
    429a:	74 c0       	rjmp	.+232    	; 0x4384 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	28 2f       	mov	r18, r24
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	3f 83       	std	Y+7, r19	; 0x07
    42a4:	2e 83       	std	Y+6, r18	; 0x06
    42a6:	4e 81       	ldd	r20, Y+6	; 0x06
    42a8:	5f 81       	ldd	r21, Y+7	; 0x07
    42aa:	41 30       	cpi	r20, 0x01	; 1
    42ac:	51 05       	cpc	r21, r1
    42ae:	59 f1       	breq	.+86     	; 0x4306 <DIO_u8GetPinValue+0x90>
    42b0:	8e 81       	ldd	r24, Y+6	; 0x06
    42b2:	9f 81       	ldd	r25, Y+7	; 0x07
    42b4:	82 30       	cpi	r24, 0x02	; 2
    42b6:	91 05       	cpc	r25, r1
    42b8:	34 f4       	brge	.+12     	; 0x42c6 <DIO_u8GetPinValue+0x50>
    42ba:	2e 81       	ldd	r18, Y+6	; 0x06
    42bc:	3f 81       	ldd	r19, Y+7	; 0x07
    42be:	21 15       	cp	r18, r1
    42c0:	31 05       	cpc	r19, r1
    42c2:	69 f0       	breq	.+26     	; 0x42de <DIO_u8GetPinValue+0x68>
    42c4:	5c c0       	rjmp	.+184    	; 0x437e <DIO_u8GetPinValue+0x108>
    42c6:	4e 81       	ldd	r20, Y+6	; 0x06
    42c8:	5f 81       	ldd	r21, Y+7	; 0x07
    42ca:	42 30       	cpi	r20, 0x02	; 2
    42cc:	51 05       	cpc	r21, r1
    42ce:	79 f1       	breq	.+94     	; 0x432e <DIO_u8GetPinValue+0xb8>
    42d0:	8e 81       	ldd	r24, Y+6	; 0x06
    42d2:	9f 81       	ldd	r25, Y+7	; 0x07
    42d4:	83 30       	cpi	r24, 0x03	; 3
    42d6:	91 05       	cpc	r25, r1
    42d8:	09 f4       	brne	.+2      	; 0x42dc <DIO_u8GetPinValue+0x66>
    42da:	3d c0       	rjmp	.+122    	; 0x4356 <DIO_u8GetPinValue+0xe0>
    42dc:	50 c0       	rjmp	.+160    	; 0x437e <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    42de:	e9 e3       	ldi	r30, 0x39	; 57
    42e0:	f0 e0       	ldi	r31, 0x00	; 0
    42e2:	80 81       	ld	r24, Z
    42e4:	28 2f       	mov	r18, r24
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	a9 01       	movw	r20, r18
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <DIO_u8GetPinValue+0x80>
    42f2:	55 95       	asr	r21
    42f4:	47 95       	ror	r20
    42f6:	8a 95       	dec	r24
    42f8:	e2 f7       	brpl	.-8      	; 0x42f2 <DIO_u8GetPinValue+0x7c>
    42fa:	ca 01       	movw	r24, r20
    42fc:	81 70       	andi	r24, 0x01	; 1
    42fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4300:	fd 81       	ldd	r31, Y+5	; 0x05
    4302:	80 83       	st	Z, r24
    4304:	41 c0       	rjmp	.+130    	; 0x4388 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    4306:	e6 e3       	ldi	r30, 0x36	; 54
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 81       	ld	r24, Z
    430c:	28 2f       	mov	r18, r24
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	8b 81       	ldd	r24, Y+3	; 0x03
    4312:	88 2f       	mov	r24, r24
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	a9 01       	movw	r20, r18
    4318:	02 c0       	rjmp	.+4      	; 0x431e <DIO_u8GetPinValue+0xa8>
    431a:	55 95       	asr	r21
    431c:	47 95       	ror	r20
    431e:	8a 95       	dec	r24
    4320:	e2 f7       	brpl	.-8      	; 0x431a <DIO_u8GetPinValue+0xa4>
    4322:	ca 01       	movw	r24, r20
    4324:	81 70       	andi	r24, 0x01	; 1
    4326:	ec 81       	ldd	r30, Y+4	; 0x04
    4328:	fd 81       	ldd	r31, Y+5	; 0x05
    432a:	80 83       	st	Z, r24
    432c:	2d c0       	rjmp	.+90     	; 0x4388 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    432e:	e3 e3       	ldi	r30, 0x33	; 51
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	80 81       	ld	r24, Z
    4334:	28 2f       	mov	r18, r24
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	8b 81       	ldd	r24, Y+3	; 0x03
    433a:	88 2f       	mov	r24, r24
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	a9 01       	movw	r20, r18
    4340:	02 c0       	rjmp	.+4      	; 0x4346 <DIO_u8GetPinValue+0xd0>
    4342:	55 95       	asr	r21
    4344:	47 95       	ror	r20
    4346:	8a 95       	dec	r24
    4348:	e2 f7       	brpl	.-8      	; 0x4342 <DIO_u8GetPinValue+0xcc>
    434a:	ca 01       	movw	r24, r20
    434c:	81 70       	andi	r24, 0x01	; 1
    434e:	ec 81       	ldd	r30, Y+4	; 0x04
    4350:	fd 81       	ldd	r31, Y+5	; 0x05
    4352:	80 83       	st	Z, r24
    4354:	19 c0       	rjmp	.+50     	; 0x4388 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    4356:	e0 e3       	ldi	r30, 0x30	; 48
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	80 81       	ld	r24, Z
    435c:	28 2f       	mov	r18, r24
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	88 2f       	mov	r24, r24
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	a9 01       	movw	r20, r18
    4368:	02 c0       	rjmp	.+4      	; 0x436e <DIO_u8GetPinValue+0xf8>
    436a:	55 95       	asr	r21
    436c:	47 95       	ror	r20
    436e:	8a 95       	dec	r24
    4370:	e2 f7       	brpl	.-8      	; 0x436a <DIO_u8GetPinValue+0xf4>
    4372:	ca 01       	movw	r24, r20
    4374:	81 70       	andi	r24, 0x01	; 1
    4376:	ec 81       	ldd	r30, Y+4	; 0x04
    4378:	fd 81       	ldd	r31, Y+5	; 0x05
    437a:	80 83       	st	Z, r24
    437c:	05 c0       	rjmp	.+10     	; 0x4388 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	89 83       	std	Y+1, r24	; 0x01
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    4388:	89 81       	ldd	r24, Y+1	; 0x01
}
    438a:	27 96       	adiw	r28, 0x07	; 7
    438c:	0f b6       	in	r0, 0x3f	; 63
    438e:	f8 94       	cli
    4390:	de bf       	out	0x3e, r29	; 62
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	cd bf       	out	0x3d, r28	; 61
    4396:	cf 91       	pop	r28
    4398:	df 91       	pop	r29
    439a:	08 95       	ret

0000439c <DIO_u8SetPortDirection>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port Direction.
 * @return					Error state.
 */
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    439c:	df 93       	push	r29
    439e:	cf 93       	push	r28
    43a0:	00 d0       	rcall	.+0      	; 0x43a2 <DIO_u8SetPortDirection+0x6>
    43a2:	00 d0       	rcall	.+0      	; 0x43a4 <DIO_u8SetPortDirection+0x8>
    43a4:	0f 92       	push	r0
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
    43aa:	8a 83       	std	Y+2, r24	; 0x02
    43ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    43ae:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    43b0:	8a 81       	ldd	r24, Y+2	; 0x02
    43b2:	28 2f       	mov	r18, r24
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	3d 83       	std	Y+5, r19	; 0x05
    43b8:	2c 83       	std	Y+4, r18	; 0x04
    43ba:	8c 81       	ldd	r24, Y+4	; 0x04
    43bc:	9d 81       	ldd	r25, Y+5	; 0x05
    43be:	81 30       	cpi	r24, 0x01	; 1
    43c0:	91 05       	cpc	r25, r1
    43c2:	d1 f0       	breq	.+52     	; 0x43f8 <DIO_u8SetPortDirection+0x5c>
    43c4:	2c 81       	ldd	r18, Y+4	; 0x04
    43c6:	3d 81       	ldd	r19, Y+5	; 0x05
    43c8:	22 30       	cpi	r18, 0x02	; 2
    43ca:	31 05       	cpc	r19, r1
    43cc:	2c f4       	brge	.+10     	; 0x43d8 <DIO_u8SetPortDirection+0x3c>
    43ce:	8c 81       	ldd	r24, Y+4	; 0x04
    43d0:	9d 81       	ldd	r25, Y+5	; 0x05
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	61 f0       	breq	.+24     	; 0x43ee <DIO_u8SetPortDirection+0x52>
    43d6:	1f c0       	rjmp	.+62     	; 0x4416 <DIO_u8SetPortDirection+0x7a>
    43d8:	2c 81       	ldd	r18, Y+4	; 0x04
    43da:	3d 81       	ldd	r19, Y+5	; 0x05
    43dc:	22 30       	cpi	r18, 0x02	; 2
    43de:	31 05       	cpc	r19, r1
    43e0:	81 f0       	breq	.+32     	; 0x4402 <DIO_u8SetPortDirection+0x66>
    43e2:	8c 81       	ldd	r24, Y+4	; 0x04
    43e4:	9d 81       	ldd	r25, Y+5	; 0x05
    43e6:	83 30       	cpi	r24, 0x03	; 3
    43e8:	91 05       	cpc	r25, r1
    43ea:	81 f0       	breq	.+32     	; 0x440c <DIO_u8SetPortDirection+0x70>
    43ec:	14 c0       	rjmp	.+40     	; 0x4416 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    43ee:	ea e3       	ldi	r30, 0x3A	; 58
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	8b 81       	ldd	r24, Y+3	; 0x03
    43f4:	80 83       	st	Z, r24
    43f6:	11 c0       	rjmp	.+34     	; 0x441a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    43f8:	e7 e3       	ldi	r30, 0x37	; 55
    43fa:	f0 e0       	ldi	r31, 0x00	; 0
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	80 83       	st	Z, r24
    4400:	0c c0       	rjmp	.+24     	; 0x441a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    4402:	e4 e3       	ldi	r30, 0x34	; 52
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	8b 81       	ldd	r24, Y+3	; 0x03
    4408:	80 83       	st	Z, r24
    440a:	07 c0       	rjmp	.+14     	; 0x441a <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    440c:	e1 e3       	ldi	r30, 0x31	; 49
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	80 83       	st	Z, r24
    4414:	02 c0       	rjmp	.+4      	; 0x441a <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    441a:	89 81       	ldd	r24, Y+1	; 0x01
}
    441c:	0f 90       	pop	r0
    441e:	0f 90       	pop	r0
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	cf 91       	pop	r28
    4428:	df 91       	pop	r29
    442a:	08 95       	ret

0000442c <DIO_u8SetPortValue>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port value.
 * @return					Error state.
 */
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    442c:	df 93       	push	r29
    442e:	cf 93       	push	r28
    4430:	00 d0       	rcall	.+0      	; 0x4432 <DIO_u8SetPortValue+0x6>
    4432:	00 d0       	rcall	.+0      	; 0x4434 <DIO_u8SetPortValue+0x8>
    4434:	0f 92       	push	r0
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	8a 83       	std	Y+2, r24	; 0x02
    443c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    443e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	28 2f       	mov	r18, r24
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	3d 83       	std	Y+5, r19	; 0x05
    4448:	2c 83       	std	Y+4, r18	; 0x04
    444a:	8c 81       	ldd	r24, Y+4	; 0x04
    444c:	9d 81       	ldd	r25, Y+5	; 0x05
    444e:	81 30       	cpi	r24, 0x01	; 1
    4450:	91 05       	cpc	r25, r1
    4452:	d1 f0       	breq	.+52     	; 0x4488 <DIO_u8SetPortValue+0x5c>
    4454:	2c 81       	ldd	r18, Y+4	; 0x04
    4456:	3d 81       	ldd	r19, Y+5	; 0x05
    4458:	22 30       	cpi	r18, 0x02	; 2
    445a:	31 05       	cpc	r19, r1
    445c:	2c f4       	brge	.+10     	; 0x4468 <DIO_u8SetPortValue+0x3c>
    445e:	8c 81       	ldd	r24, Y+4	; 0x04
    4460:	9d 81       	ldd	r25, Y+5	; 0x05
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	61 f0       	breq	.+24     	; 0x447e <DIO_u8SetPortValue+0x52>
    4466:	1f c0       	rjmp	.+62     	; 0x44a6 <DIO_u8SetPortValue+0x7a>
    4468:	2c 81       	ldd	r18, Y+4	; 0x04
    446a:	3d 81       	ldd	r19, Y+5	; 0x05
    446c:	22 30       	cpi	r18, 0x02	; 2
    446e:	31 05       	cpc	r19, r1
    4470:	81 f0       	breq	.+32     	; 0x4492 <DIO_u8SetPortValue+0x66>
    4472:	8c 81       	ldd	r24, Y+4	; 0x04
    4474:	9d 81       	ldd	r25, Y+5	; 0x05
    4476:	83 30       	cpi	r24, 0x03	; 3
    4478:	91 05       	cpc	r25, r1
    447a:	81 f0       	breq	.+32     	; 0x449c <DIO_u8SetPortValue+0x70>
    447c:	14 c0       	rjmp	.+40     	; 0x44a6 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    447e:	eb e3       	ldi	r30, 0x3B	; 59
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	80 83       	st	Z, r24
    4486:	11 c0       	rjmp	.+34     	; 0x44aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    4488:	e8 e3       	ldi	r30, 0x38	; 56
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	80 83       	st	Z, r24
    4490:	0c c0       	rjmp	.+24     	; 0x44aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    4492:	e5 e3       	ldi	r30, 0x35	; 53
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	80 83       	st	Z, r24
    449a:	07 c0       	rjmp	.+14     	; 0x44aa <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    449c:	e2 e3       	ldi	r30, 0x32	; 50
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	80 83       	st	Z, r24
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <ULTSONIC_u8MeasureDistance>:
 * @param Copy_pstUltsonicData 	Pointer to struct that carry the ultrasonic data.
 * @param Copy_pu16Distance 	Pointer to return the distance in CM.
 * @return 						Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_pstUltsonicData, uint16 *Copy_pu16Distance)
{
    44bc:	df 93       	push	r29
    44be:	cf 93       	push	r28
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	aa 97       	sbiw	r28, 0x2a	; 42
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	98 a7       	std	Y+40, r25	; 0x28
    44d2:	8f a3       	std	Y+39, r24	; 0x27
    44d4:	7a a7       	std	Y+42, r23	; 0x2a
    44d6:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    44d8:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    44da:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    44dc:	1d 8e       	std	Y+29, r1	; 0x1d
    44de:	1e 8e       	std	Y+30, r1	; 0x1e
    44e0:	1f 8e       	std	Y+31, r1	; 0x1f
    44e2:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    44e4:	19 8e       	std	Y+25, r1	; 0x19
    44e6:	1a 8e       	std	Y+26, r1	; 0x1a
    44e8:	1b 8e       	std	Y+27, r1	; 0x1b
    44ea:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    44ec:	82 e0       	ldi	r24, 0x02	; 2
    44ee:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    44f0:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    44f2:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    44f4:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    44f6:	ce 01       	movw	r24, r28
    44f8:	83 96       	adiw	r24, 0x23	; 35
    44fa:	0e 94 64 14 	call	0x28c8	; 0x28c8 <TIMER1_u8Init>
    44fe:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    4500:	89 a1       	ldd	r24, Y+33	; 0x21
    4502:	88 23       	and	r24, r24
    4504:	09 f0       	breq	.+2      	; 0x4508 <ULTSONIC_u8MeasureDistance+0x4c>
    4506:	bb c1       	rjmp	.+886    	; 0x487e <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    4508:	2c e7       	ldi	r18, 0x7C	; 124
    450a:	34 e2       	ldi	r19, 0x24	; 36
    450c:	82 e0       	ldi	r24, 0x02	; 2
    450e:	b9 01       	movw	r22, r18
    4510:	0e 94 2d 1b 	call	0x365a	; 0x365a <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    451a:	2b e4       	ldi	r18, 0x4B	; 75
    451c:	34 e2       	ldi	r19, 0x24	; 36
    451e:	85 e0       	ldi	r24, 0x05	; 5
    4520:	b9 01       	movw	r22, r18
    4522:	0e 94 2d 1b 	call	0x365a	; 0x365a <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    4526:	85 e0       	ldi	r24, 0x05	; 5
    4528:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    452c:	ef a1       	ldd	r30, Y+39	; 0x27
    452e:	f8 a5       	ldd	r31, Y+40	; 0x28
    4530:	80 81       	ld	r24, Z
    4532:	ef a1       	ldd	r30, Y+39	; 0x27
    4534:	f8 a5       	ldd	r31, Y+40	; 0x28
    4536:	91 81       	ldd	r25, Z+1	; 0x01
    4538:	69 2f       	mov	r22, r25
    453a:	41 e0       	ldi	r20, 0x01	; 1
    453c:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	a8 ec       	ldi	r26, 0xC8	; 200
    4546:	b2 e4       	ldi	r27, 0x42	; 66
    4548:	8d 8b       	std	Y+21, r24	; 0x15
    454a:	9e 8b       	std	Y+22, r25	; 0x16
    454c:	af 8b       	std	Y+23, r26	; 0x17
    454e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4550:	6d 89       	ldd	r22, Y+21	; 0x15
    4552:	7e 89       	ldd	r23, Y+22	; 0x16
    4554:	8f 89       	ldd	r24, Y+23	; 0x17
    4556:	98 8d       	ldd	r25, Y+24	; 0x18
    4558:	2b ea       	ldi	r18, 0xAB	; 171
    455a:	3a ea       	ldi	r19, 0xAA	; 170
    455c:	4a e2       	ldi	r20, 0x2A	; 42
    455e:	50 e4       	ldi	r21, 0x40	; 64
    4560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	89 8b       	std	Y+17, r24	; 0x11
    456a:	9a 8b       	std	Y+18, r25	; 0x12
    456c:	ab 8b       	std	Y+19, r26	; 0x13
    456e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4570:	69 89       	ldd	r22, Y+17	; 0x11
    4572:	7a 89       	ldd	r23, Y+18	; 0x12
    4574:	8b 89       	ldd	r24, Y+19	; 0x13
    4576:	9c 89       	ldd	r25, Y+20	; 0x14
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e8       	ldi	r20, 0x80	; 128
    457e:	5f e3       	ldi	r21, 0x3F	; 63
    4580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4584:	88 23       	and	r24, r24
    4586:	1c f4       	brge	.+6      	; 0x458e <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	88 8b       	std	Y+16, r24	; 0x10
    458c:	91 c0       	rjmp	.+290    	; 0x46b0 <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    458e:	69 89       	ldd	r22, Y+17	; 0x11
    4590:	7a 89       	ldd	r23, Y+18	; 0x12
    4592:	8b 89       	ldd	r24, Y+19	; 0x13
    4594:	9c 89       	ldd	r25, Y+20	; 0x14
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	4f e7       	ldi	r20, 0x7F	; 127
    459c:	53 e4       	ldi	r21, 0x43	; 67
    459e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a2:	18 16       	cp	r1, r24
    45a4:	0c f0       	brlt	.+2      	; 0x45a8 <ULTSONIC_u8MeasureDistance+0xec>
    45a6:	7b c0       	rjmp	.+246    	; 0x469e <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    45a8:	6d 89       	ldd	r22, Y+21	; 0x15
    45aa:	7e 89       	ldd	r23, Y+22	; 0x16
    45ac:	8f 89       	ldd	r24, Y+23	; 0x17
    45ae:	98 8d       	ldd	r25, Y+24	; 0x18
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	4a e7       	ldi	r20, 0x7A	; 122
    45b6:	54 e4       	ldi	r21, 0x44	; 68
    45b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	8c 87       	std	Y+12, r24	; 0x0c
    45c2:	9d 87       	std	Y+13, r25	; 0x0d
    45c4:	ae 87       	std	Y+14, r26	; 0x0e
    45c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    45ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    45cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    45ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	4a ef       	ldi	r20, 0xFA	; 250
    45d6:	54 e4       	ldi	r21, 0x44	; 68
    45d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	88 87       	std	Y+8, r24	; 0x08
    45e2:	99 87       	std	Y+9, r25	; 0x09
    45e4:	aa 87       	std	Y+10, r26	; 0x0a
    45e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    45e8:	68 85       	ldd	r22, Y+8	; 0x08
    45ea:	79 85       	ldd	r23, Y+9	; 0x09
    45ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    45ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e8       	ldi	r20, 0x80	; 128
    45f6:	5f e3       	ldi	r21, 0x3F	; 63
    45f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fc:	88 23       	and	r24, r24
    45fe:	2c f4       	brge	.+10     	; 0x460a <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	9f 83       	std	Y+7, r25	; 0x07
    4606:	8e 83       	std	Y+6, r24	; 0x06
    4608:	3f c0       	rjmp	.+126    	; 0x4688 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    460a:	68 85       	ldd	r22, Y+8	; 0x08
    460c:	79 85       	ldd	r23, Y+9	; 0x09
    460e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4610:	9b 85       	ldd	r25, Y+11	; 0x0b
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	3f ef       	ldi	r19, 0xFF	; 255
    4616:	4f e7       	ldi	r20, 0x7F	; 127
    4618:	57 e4       	ldi	r21, 0x47	; 71
    461a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    461e:	18 16       	cp	r1, r24
    4620:	4c f5       	brge	.+82     	; 0x4674 <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4622:	6c 85       	ldd	r22, Y+12	; 0x0c
    4624:	7d 85       	ldd	r23, Y+13	; 0x0d
    4626:	8e 85       	ldd	r24, Y+14	; 0x0e
    4628:	9f 85       	ldd	r25, Y+15	; 0x0f
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e2       	ldi	r20, 0x20	; 32
    4630:	51 e4       	ldi	r21, 0x41	; 65
    4632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9f 83       	std	Y+7, r25	; 0x07
    4648:	8e 83       	std	Y+6, r24	; 0x06
    464a:	0f c0       	rjmp	.+30     	; 0x466a <ULTSONIC_u8MeasureDistance+0x1ae>
    464c:	88 ec       	ldi	r24, 0xC8	; 200
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	9d 83       	std	Y+5, r25	; 0x05
    4652:	8c 83       	std	Y+4, r24	; 0x04
    4654:	8c 81       	ldd	r24, Y+4	; 0x04
    4656:	9d 81       	ldd	r25, Y+5	; 0x05
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	f1 f7       	brne	.-4      	; 0x4658 <ULTSONIC_u8MeasureDistance+0x19c>
    465c:	9d 83       	std	Y+5, r25	; 0x05
    465e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4660:	8e 81       	ldd	r24, Y+6	; 0x06
    4662:	9f 81       	ldd	r25, Y+7	; 0x07
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	9f 83       	std	Y+7, r25	; 0x07
    4668:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466a:	8e 81       	ldd	r24, Y+6	; 0x06
    466c:	9f 81       	ldd	r25, Y+7	; 0x07
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	69 f7       	brne	.-38     	; 0x464c <ULTSONIC_u8MeasureDistance+0x190>
    4672:	24 c0       	rjmp	.+72     	; 0x46bc <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4674:	68 85       	ldd	r22, Y+8	; 0x08
    4676:	79 85       	ldd	r23, Y+9	; 0x09
    4678:	8a 85       	ldd	r24, Y+10	; 0x0a
    467a:	9b 85       	ldd	r25, Y+11	; 0x0b
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	9f 83       	std	Y+7, r25	; 0x07
    4686:	8e 83       	std	Y+6, r24	; 0x06
    4688:	8e 81       	ldd	r24, Y+6	; 0x06
    468a:	9f 81       	ldd	r25, Y+7	; 0x07
    468c:	9b 83       	std	Y+3, r25	; 0x03
    468e:	8a 83       	std	Y+2, r24	; 0x02
    4690:	8a 81       	ldd	r24, Y+2	; 0x02
    4692:	9b 81       	ldd	r25, Y+3	; 0x03
    4694:	01 97       	sbiw	r24, 0x01	; 1
    4696:	f1 f7       	brne	.-4      	; 0x4694 <ULTSONIC_u8MeasureDistance+0x1d8>
    4698:	9b 83       	std	Y+3, r25	; 0x03
    469a:	8a 83       	std	Y+2, r24	; 0x02
    469c:	0f c0       	rjmp	.+30     	; 0x46bc <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    469e:	69 89       	ldd	r22, Y+17	; 0x11
    46a0:	7a 89       	ldd	r23, Y+18	; 0x12
    46a2:	8b 89       	ldd	r24, Y+19	; 0x13
    46a4:	9c 89       	ldd	r25, Y+20	; 0x14
    46a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	88 8b       	std	Y+16, r24	; 0x10
    46b0:	88 89       	ldd	r24, Y+16	; 0x10
    46b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46b4:	89 81       	ldd	r24, Y+1	; 0x01
    46b6:	8a 95       	dec	r24
    46b8:	f1 f7       	brne	.-4      	; 0x46b6 <ULTSONIC_u8MeasureDistance+0x1fa>
    46ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    46bc:	ef a1       	ldd	r30, Y+39	; 0x27
    46be:	f8 a5       	ldd	r31, Y+40	; 0x28
    46c0:	80 81       	ld	r24, Z
    46c2:	ef a1       	ldd	r30, Y+39	; 0x27
    46c4:	f8 a5       	ldd	r31, Y+40	; 0x28
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	69 2f       	mov	r22, r25
    46ca:	40 e0       	ldi	r20, 0x00	; 0
    46cc:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    46d0:	0b c0       	rjmp	.+22     	; 0x46e8 <ULTSONIC_u8MeasureDistance+0x22c>

		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    46d2:	89 8d       	ldd	r24, Y+25	; 0x19
    46d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46d6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    46d8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    46da:	01 96       	adiw	r24, 0x01	; 1
    46dc:	a1 1d       	adc	r26, r1
    46de:	b1 1d       	adc	r27, r1
    46e0:	89 8f       	std	Y+25, r24	; 0x19
    46e2:	9a 8f       	std	Y+26, r25	; 0x1a
    46e4:	ab 8f       	std	Y+27, r26	; 0x1b
    46e6:	bc 8f       	std	Y+28, r27	; 0x1c
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
		_delay_us(100);
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_LOW);

		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    46e8:	80 91 a9 01 	lds	r24, 0x01A9
    46ec:	90 91 aa 01 	lds	r25, 0x01AA
    46f0:	00 97       	sbiw	r24, 0x00	; 0
    46f2:	31 f0       	breq	.+12     	; 0x4700 <ULTSONIC_u8MeasureDistance+0x244>
    46f4:	80 91 ab 01 	lds	r24, 0x01AB
    46f8:	90 91 ac 01 	lds	r25, 0x01AC
    46fc:	00 97       	sbiw	r24, 0x00	; 0
    46fe:	61 f4       	brne	.+24     	; 0x4718 <ULTSONIC_u8MeasureDistance+0x25c>
    4700:	89 8d       	ldd	r24, Y+25	; 0x19
    4702:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4704:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4706:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4708:	80 3e       	cpi	r24, 0xE0	; 224
    470a:	23 e9       	ldi	r18, 0x93	; 147
    470c:	92 07       	cpc	r25, r18
    470e:	24 e0       	ldi	r18, 0x04	; 4
    4710:	a2 07       	cpc	r26, r18
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	b2 07       	cpc	r27, r18
    4716:	e8 f2       	brcs	.-70     	; 0x46d2 <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    4718:	82 e0       	ldi	r24, 0x02	; 2
    471a:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    471e:	85 e0       	ldi	r24, 0x05	; 5
    4720:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    472a:	80 91 af 01 	lds	r24, 0x01AF
    472e:	90 91 b0 01 	lds	r25, 0x01B0
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	a1 f4       	brne	.+40     	; 0x475e <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    4736:	20 91 ab 01 	lds	r18, 0x01AB
    473a:	30 91 ac 01 	lds	r19, 0x01AC
    473e:	80 91 a9 01 	lds	r24, 0x01A9
    4742:	90 91 aa 01 	lds	r25, 0x01AA
    4746:	a9 01       	movw	r20, r18
    4748:	48 1b       	sub	r20, r24
    474a:	59 0b       	sbc	r21, r25
    474c:	ca 01       	movw	r24, r20
    474e:	cc 01       	movw	r24, r24
    4750:	a0 e0       	ldi	r26, 0x00	; 0
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	8d 8f       	std	Y+29, r24	; 0x1d
    4756:	9e 8f       	std	Y+30, r25	; 0x1e
    4758:	af 8f       	std	Y+31, r26	; 0x1f
    475a:	b8 a3       	std	Y+32, r27	; 0x20
    475c:	59 c0       	rjmp	.+178    	; 0x4810 <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    475e:	20 91 ab 01 	lds	r18, 0x01AB
    4762:	30 91 ac 01 	lds	r19, 0x01AC
    4766:	80 91 a9 01 	lds	r24, 0x01A9
    476a:	90 91 aa 01 	lds	r25, 0x01AA
    476e:	28 17       	cp	r18, r24
    4770:	39 07       	cpc	r19, r25
    4772:	10 f1       	brcs	.+68     	; 0x47b8 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    4774:	20 91 ab 01 	lds	r18, 0x01AB
    4778:	30 91 ac 01 	lds	r19, 0x01AC
    477c:	80 91 a9 01 	lds	r24, 0x01A9
    4780:	90 91 aa 01 	lds	r25, 0x01AA
    4784:	a9 01       	movw	r20, r18
    4786:	48 1b       	sub	r20, r24
    4788:	59 0b       	sbc	r21, r25
    478a:	ca 01       	movw	r24, r20
    478c:	9c 01       	movw	r18, r24
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	80 91 af 01 	lds	r24, 0x01AF
    4796:	90 91 b0 01 	lds	r25, 0x01B0
    479a:	cc 01       	movw	r24, r24
    479c:	a0 e0       	ldi	r26, 0x00	; 0
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	dc 01       	movw	r26, r24
    47a2:	99 27       	eor	r25, r25
    47a4:	88 27       	eor	r24, r24
    47a6:	82 0f       	add	r24, r18
    47a8:	93 1f       	adc	r25, r19
    47aa:	a4 1f       	adc	r26, r20
    47ac:	b5 1f       	adc	r27, r21
    47ae:	8d 8f       	std	Y+29, r24	; 0x1d
    47b0:	9e 8f       	std	Y+30, r25	; 0x1e
    47b2:	af 8f       	std	Y+31, r26	; 0x1f
    47b4:	b8 a3       	std	Y+32, r27	; 0x20
    47b6:	2c c0       	rjmp	.+88     	; 0x4810 <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    47b8:	20 91 ab 01 	lds	r18, 0x01AB
    47bc:	30 91 ac 01 	lds	r19, 0x01AC
    47c0:	80 91 a9 01 	lds	r24, 0x01A9
    47c4:	90 91 aa 01 	lds	r25, 0x01AA
    47c8:	28 17       	cp	r18, r24
    47ca:	39 07       	cpc	r19, r25
    47cc:	08 f5       	brcc	.+66     	; 0x4810 <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    47ce:	20 91 a9 01 	lds	r18, 0x01A9
    47d2:	30 91 aa 01 	lds	r19, 0x01AA
    47d6:	80 91 ab 01 	lds	r24, 0x01AB
    47da:	90 91 ac 01 	lds	r25, 0x01AC
    47de:	a9 01       	movw	r20, r18
    47e0:	48 1b       	sub	r20, r24
    47e2:	59 0b       	sbc	r21, r25
    47e4:	ca 01       	movw	r24, r20
    47e6:	9c 01       	movw	r18, r24
    47e8:	40 e0       	ldi	r20, 0x00	; 0
    47ea:	50 e0       	ldi	r21, 0x00	; 0
    47ec:	80 91 af 01 	lds	r24, 0x01AF
    47f0:	90 91 b0 01 	lds	r25, 0x01B0
    47f4:	cc 01       	movw	r24, r24
    47f6:	a0 e0       	ldi	r26, 0x00	; 0
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	dc 01       	movw	r26, r24
    47fc:	99 27       	eor	r25, r25
    47fe:	88 27       	eor	r24, r24
    4800:	82 0f       	add	r24, r18
    4802:	93 1f       	adc	r25, r19
    4804:	a4 1f       	adc	r26, r20
    4806:	b5 1f       	adc	r27, r21
    4808:	8d 8f       	std	Y+29, r24	; 0x1d
    480a:	9e 8f       	std	Y+30, r25	; 0x1e
    480c:	af 8f       	std	Y+31, r26	; 0x1f
    480e:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_pu16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    4810:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4812:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4816:	98 a1       	ldd	r25, Y+32	; 0x20
    4818:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	bc 01       	movw	r22, r24
    4822:	cd 01       	movw	r24, r26
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e0       	ldi	r20, 0x00	; 0
    482a:	50 e4       	ldi	r21, 0x40	; 64
    482c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	bc 01       	movw	r22, r24
    4836:	cd 01       	movw	r24, r26
    4838:	26 e9       	ldi	r18, 0x96	; 150
    483a:	33 e4       	ldi	r19, 0x43	; 67
    483c:	4b e0       	ldi	r20, 0x0B	; 11
    483e:	5d e3       	ldi	r21, 0x3D	; 61
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	bc 01       	movw	r22, r24
    484a:	cd 01       	movw	r24, r26
    484c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	e9 a5       	ldd	r30, Y+41	; 0x29
    4856:	fa a5       	ldd	r31, Y+42	; 0x2a
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    485c:	10 92 aa 01 	sts	0x01AA, r1
    4860:	10 92 a9 01 	sts	0x01A9, r1
		ULTSONIC_u16Capture2 = 0u;
    4864:	10 92 ac 01 	sts	0x01AC, r1
    4868:	10 92 ab 01 	sts	0x01AB, r1
		ULTSONIC_u16OvfCounter = 0u;
    486c:	10 92 ae 01 	sts	0x01AE, r1
    4870:	10 92 ad 01 	sts	0x01AD, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    4874:	10 92 b0 01 	sts	0x01B0, r1
    4878:	10 92 af 01 	sts	0x01AF, r1
    487c:	02 c0       	rjmp	.+4      	; 0x4882 <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    4882:	8a a1       	ldd	r24, Y+34	; 0x22
}
    4884:	aa 96       	adiw	r28, 0x2a	; 42
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <ULTSONIC_voidCaptureISR>:

/**
 * @brief Function to be set as input capture ISR.
 */
static void ULTSONIC_voidCaptureISR(void)
{
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    489e:	80 91 b1 01 	lds	r24, 0x01B1
    48a2:	8f 5f       	subi	r24, 0xFF	; 255
    48a4:	80 93 b1 01 	sts	0x01B1, r24

	if(Local_u8Counter == 1u)
    48a8:	80 91 b1 01 	lds	r24, 0x01B1
    48ac:	81 30       	cpi	r24, 0x01	; 1
    48ae:	69 f4       	brne	.+26     	; 0x48ca <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    48b0:	82 e0       	ldi	r24, 0x02	; 2
    48b2:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    48b6:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <TIMER1_u16GetInputCaptValue>
    48ba:	90 93 aa 01 	sts	0x01AA, r25
    48be:	80 93 a9 01 	sts	0x01A9, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <TIMER1_u8SetInputCaptTriggerSrc>
    48c8:	14 c0       	rjmp	.+40     	; 0x48f2 <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    48ca:	80 91 b1 01 	lds	r24, 0x01B1
    48ce:	82 30       	cpi	r24, 0x02	; 2
    48d0:	81 f4       	brne	.+32     	; 0x48f2 <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    48d2:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <TIMER1_u16GetInputCaptValue>
    48d6:	90 93 ac 01 	sts	0x01AC, r25
    48da:	80 93 ab 01 	sts	0x01AB, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    48de:	80 91 ad 01 	lds	r24, 0x01AD
    48e2:	90 91 ae 01 	lds	r25, 0x01AE
    48e6:	90 93 b0 01 	sts	0x01B0, r25
    48ea:	80 93 af 01 	sts	0x01AF, r24
		Local_u8Counter = 0;
    48ee:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    48f2:	cf 91       	pop	r28
    48f4:	df 91       	pop	r29
    48f6:	08 95       	ret

000048f8 <ULTSONIC_voidOvfISR>:

/**
 * @brief Function to be set as overflow ISR.
 */
static void ULTSONIC_voidOvfISR(void)
{
    48f8:	df 93       	push	r29
    48fa:	cf 93       	push	r28
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
	ULTSONIC_u16OvfCounter++;
    4900:	80 91 ad 01 	lds	r24, 0x01AD
    4904:	90 91 ae 01 	lds	r25, 0x01AE
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	90 93 ae 01 	sts	0x01AE, r25
    490e:	80 93 ad 01 	sts	0x01AD, r24
}
    4912:	cf 91       	pop	r28
    4914:	df 91       	pop	r29
    4916:	08 95       	ret

00004918 <MOTOR_u8RotateCW>:
 * @brief 					Function to rotate the motor in clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pstMotorInfo)
{
    4918:	df 93       	push	r29
    491a:	cf 93       	push	r28
    491c:	00 d0       	rcall	.+0      	; 0x491e <MOTOR_u8RotateCW+0x6>
    491e:	0f 92       	push	r0
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	9b 83       	std	Y+3, r25	; 0x03
    4926:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    4928:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    492a:	8a 81       	ldd	r24, Y+2	; 0x02
    492c:	9b 81       	ldd	r25, Y+3	; 0x03
    492e:	00 97       	sbiw	r24, 0x00	; 0
    4930:	a9 f0       	breq	.+42     	; 0x495c <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    4932:	ea 81       	ldd	r30, Y+2	; 0x02
    4934:	fb 81       	ldd	r31, Y+3	; 0x03
    4936:	80 81       	ld	r24, Z
    4938:	ea 81       	ldd	r30, Y+2	; 0x02
    493a:	fb 81       	ldd	r31, Y+3	; 0x03
    493c:	91 81       	ldd	r25, Z+1	; 0x01
    493e:	69 2f       	mov	r22, r25
    4940:	40 e0       	ldi	r20, 0x00	; 0
    4942:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    4946:	ea 81       	ldd	r30, Y+2	; 0x02
    4948:	fb 81       	ldd	r31, Y+3	; 0x03
    494a:	80 81       	ld	r24, Z
    494c:	ea 81       	ldd	r30, Y+2	; 0x02
    494e:	fb 81       	ldd	r31, Y+3	; 0x03
    4950:	92 81       	ldd	r25, Z+2	; 0x02
    4952:	69 2f       	mov	r22, r25
    4954:	41 e0       	ldi	r20, 0x01	; 1
    4956:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    495a:	02 c0       	rjmp	.+4      	; 0x4960 <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    495c:	82 e0       	ldi	r24, 0x02	; 2
    495e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4960:	89 81       	ldd	r24, Y+1	; 0x01
}
    4962:	0f 90       	pop	r0
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	cf 91       	pop	r28
    496a:	df 91       	pop	r29
    496c:	08 95       	ret

0000496e <MOTOR_u8RotateCCW>:
 * @brief				 	Function to rotate the motor in counter clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pstMotorInfo)
{
    496e:	df 93       	push	r29
    4970:	cf 93       	push	r28
    4972:	00 d0       	rcall	.+0      	; 0x4974 <MOTOR_u8RotateCCW+0x6>
    4974:	0f 92       	push	r0
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	9b 83       	std	Y+3, r25	; 0x03
    497c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    497e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    4980:	8a 81       	ldd	r24, Y+2	; 0x02
    4982:	9b 81       	ldd	r25, Y+3	; 0x03
    4984:	00 97       	sbiw	r24, 0x00	; 0
    4986:	a9 f0       	breq	.+42     	; 0x49b2 <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    4988:	ea 81       	ldd	r30, Y+2	; 0x02
    498a:	fb 81       	ldd	r31, Y+3	; 0x03
    498c:	80 81       	ld	r24, Z
    498e:	ea 81       	ldd	r30, Y+2	; 0x02
    4990:	fb 81       	ldd	r31, Y+3	; 0x03
    4992:	92 81       	ldd	r25, Z+2	; 0x02
    4994:	69 2f       	mov	r22, r25
    4996:	40 e0       	ldi	r20, 0x00	; 0
    4998:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    499c:	ea 81       	ldd	r30, Y+2	; 0x02
    499e:	fb 81       	ldd	r31, Y+3	; 0x03
    49a0:	80 81       	ld	r24, Z
    49a2:	ea 81       	ldd	r30, Y+2	; 0x02
    49a4:	fb 81       	ldd	r31, Y+3	; 0x03
    49a6:	91 81       	ldd	r25, Z+1	; 0x01
    49a8:	69 2f       	mov	r22, r25
    49aa:	41 e0       	ldi	r20, 0x01	; 1
    49ac:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    49b2:	82 e0       	ldi	r24, 0x02	; 2
    49b4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    49b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	cf 91       	pop	r28
    49c0:	df 91       	pop	r29
    49c2:	08 95       	ret

000049c4 <MOTOR_u8Stop>:
 * @brief 					Function to stop the motor.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pstMotorInfo)
{
    49c4:	df 93       	push	r29
    49c6:	cf 93       	push	r28
    49c8:	00 d0       	rcall	.+0      	; 0x49ca <MOTOR_u8Stop+0x6>
    49ca:	0f 92       	push	r0
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	9b 83       	std	Y+3, r25	; 0x03
    49d2:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    49d4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	9b 81       	ldd	r25, Y+3	; 0x03
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	a9 f0       	breq	.+42     	; 0x4a08 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as low*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    49de:	ea 81       	ldd	r30, Y+2	; 0x02
    49e0:	fb 81       	ldd	r31, Y+3	; 0x03
    49e2:	80 81       	ld	r24, Z
    49e4:	ea 81       	ldd	r30, Y+2	; 0x02
    49e6:	fb 81       	ldd	r31, Y+3	; 0x03
    49e8:	92 81       	ldd	r25, Z+2	; 0x02
    49ea:	69 2f       	mov	r22, r25
    49ec:	40 e0       	ldi	r20, 0x00	; 0
    49ee:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    49f2:	ea 81       	ldd	r30, Y+2	; 0x02
    49f4:	fb 81       	ldd	r31, Y+3	; 0x03
    49f6:	80 81       	ld	r24, Z
    49f8:	ea 81       	ldd	r30, Y+2	; 0x02
    49fa:	fb 81       	ldd	r31, Y+3	; 0x03
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	69 2f       	mov	r22, r25
    4a00:	40 e0       	ldi	r20, 0x00	; 0
    4a02:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	0f 90       	pop	r0
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	08 95       	ret

00004a1a <MCP2515_voidChipSelect>:
#include "../Header/MCP2515_interface.h"
#include "../Header/MCP2515_config.h"
#include "../Header/MCP2515_private.h"

static void MCP2515_voidChipSelect(uint8 Copy_u8State)
{
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	0f 92       	push	r0
    4a20:	cd b7       	in	r28, 0x3d	; 61
    4a22:	de b7       	in	r29, 0x3e	; 62
    4a24:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == SLAVE_CHOOSE)
    4a26:	89 81       	ldd	r24, Y+1	; 0x01
    4a28:	81 30       	cpi	r24, 0x01	; 1
    4a2a:	31 f4       	brne	.+12     	; 0x4a38 <MCP2515_voidChipSelect+0x1e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_LOW);
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	64 e0       	ldi	r22, 0x04	; 4
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    4a36:	08 c0       	rjmp	.+16     	; 0x4a48 <MCP2515_voidChipSelect+0x2e>
	}
	else if(Copy_u8State == SLAVE_RELEASE)
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	88 23       	and	r24, r24
    4a3c:	29 f4       	brne	.+10     	; 0x4a48 <MCP2515_voidChipSelect+0x2e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_HIGH);
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	64 e0       	ldi	r22, 0x04	; 4
    4a42:	41 e0       	ldi	r20, 0x01	; 1
    4a44:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	}
}
    4a48:	0f 90       	pop	r0
    4a4a:	cf 91       	pop	r28
    4a4c:	df 91       	pop	r29
    4a4e:	08 95       	ret

00004a50 <MCP2515_u8ReadRegister>:

uint8 MCP2515_u8ReadRegister(uint8 Copy_u8Address)
{
    4a50:	df 93       	push	r29
    4a52:	cf 93       	push	r28
    4a54:	00 d0       	rcall	.+0      	; 0x4a56 <MCP2515_u8ReadRegister+0x6>
    4a56:	cd b7       	in	r28, 0x3d	; 61
    4a58:	de b7       	in	r29, 0x3e	; 62
    4a5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ReadValue;

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    4a62:	83 e0       	ldi	r24, 0x03	; 3
    4a64:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	Local_u8ReadValue = SPI_u8Transceive(0);
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
    4a74:	89 83       	std	Y+1, r24	; 0x01

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	return Local_u8ReadValue;
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a7e:	0f 90       	pop	r0
    4a80:	0f 90       	pop	r0
    4a82:	cf 91       	pop	r28
    4a84:	df 91       	pop	r29
    4a86:	08 95       	ret

00004a88 <MCP2515_voidWriteRegister>:

void MCP2515_voidWriteRegister(uint8 Copy_u8Address, uint8 Copy_u8Value)
{
    4a88:	df 93       	push	r29
    4a8a:	cf 93       	push	r28
    4a8c:	00 d0       	rcall	.+0      	; 0x4a8e <MCP2515_voidWriteRegister+0x6>
    4a8e:	cd b7       	in	r28, 0x3d	; 61
    4a90:	de b7       	in	r29, 0x3e	; 62
    4a92:	89 83       	std	Y+1, r24	; 0x01
    4a94:	6a 83       	std	Y+2, r22	; 0x02
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    4a9c:	82 e0       	ldi	r24, 0x02	; 2
    4a9e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    4aa2:	89 81       	ldd	r24, Y+1	; 0x01
    4aa4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
}
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	cf 91       	pop	r28
    4aba:	df 91       	pop	r29
    4abc:	08 95       	ret

00004abe <MCP2515_voidSetBitTiming>:

void MCP2515_voidSetBitTiming(uint8 Copy_u8CNF1Value, uint8 Copy_u8CNF2Value, uint8 Copy_u8CNF3Value)
{
    4abe:	df 93       	push	r29
    4ac0:	cf 93       	push	r28
    4ac2:	00 d0       	rcall	.+0      	; 0x4ac4 <MCP2515_voidSetBitTiming+0x6>
    4ac4:	0f 92       	push	r0
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	89 83       	std	Y+1, r24	; 0x01
    4acc:	6a 83       	std	Y+2, r22	; 0x02
    4ace:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidWriteRegister(CNF1, Copy_u8CNF1Value);
    4ad0:	8a e2       	ldi	r24, 0x2A	; 42
    4ad2:	69 81       	ldd	r22, Y+1	; 0x01
    4ad4:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF2, Copy_u8CNF2Value);
    4ad8:	89 e2       	ldi	r24, 0x29	; 41
    4ada:	6a 81       	ldd	r22, Y+2	; 0x02
    4adc:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF3, Copy_u8CNF3Value);
    4ae0:	88 e2       	ldi	r24, 0x28	; 40
    4ae2:	6b 81       	ldd	r22, Y+3	; 0x03
    4ae4:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>
}
    4ae8:	0f 90       	pop	r0
    4aea:	0f 90       	pop	r0
    4aec:	0f 90       	pop	r0
    4aee:	cf 91       	pop	r28
    4af0:	df 91       	pop	r29
    4af2:	08 95       	ret

00004af4 <MCP2515_voidReset>:

void MCP2515_voidReset(void)
{
    4af4:	df 93       	push	r29
    4af6:	cf 93       	push	r28
    4af8:	cd b7       	in	r28, 0x3d	; 61
    4afa:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_RESET);
    4b02:	80 ec       	ldi	r24, 0xC0	; 192
    4b04:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4b08:	80 e0       	ldi	r24, 0x00	; 0
    4b0a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
}
    4b0e:	cf 91       	pop	r28
    4b10:	df 91       	pop	r29
    4b12:	08 95       	ret

00004b14 <MCP2515_voidChangeBits>:

void MCP2515_voidChangeBits(uint8 Copy_u8RegAddress, uint8 Copy_u8Mask, uint8 Copy_u8Value)
{
    4b14:	df 93       	push	r29
    4b16:	cf 93       	push	r28
    4b18:	00 d0       	rcall	.+0      	; 0x4b1a <MCP2515_voidChangeBits+0x6>
    4b1a:	0f 92       	push	r0
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	89 83       	std	Y+1, r24	; 0x01
    4b22:	6a 83       	std	Y+2, r22	; 0x02
    4b24:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_BIT_MODIFY);
    4b2c:	85 e0       	ldi	r24, 0x05	; 5
    4b2e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8RegAddress);
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Mask);
    4b38:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    4b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b40:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
}
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	0f 90       	pop	r0
    4b50:	cf 91       	pop	r28
    4b52:	df 91       	pop	r29
    4b54:	08 95       	ret

00004b56 <MCP2515_voidSetMode>:

void MCP2515_voidSetMode(uint8 Copy_u8Mode)
{
    4b56:	df 93       	push	r29
    4b58:	cf 93       	push	r28
    4b5a:	0f 92       	push	r0
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
    4b60:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(CANCTRL, 0xE0, Copy_u8Mode << 5);
    4b62:	89 81       	ldd	r24, Y+1	; 0x01
    4b64:	98 2f       	mov	r25, r24
    4b66:	92 95       	swap	r25
    4b68:	99 0f       	add	r25, r25
    4b6a:	90 7e       	andi	r25, 0xE0	; 224
    4b6c:	8f e0       	ldi	r24, 0x0F	; 15
    4b6e:	60 ee       	ldi	r22, 0xE0	; 224
    4b70:	49 2f       	mov	r20, r25
    4b72:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <MCP2515_voidChangeBits>
	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != Copy_u8Mode);
    4b76:	8e e0       	ldi	r24, 0x0E	; 14
    4b78:	0e 94 28 25 	call	0x4a50	; 0x4a50 <MCP2515_u8ReadRegister>
    4b7c:	98 2f       	mov	r25, r24
    4b7e:	92 95       	swap	r25
    4b80:	96 95       	lsr	r25
    4b82:	97 70       	andi	r25, 0x07	; 7
    4b84:	89 81       	ldd	r24, Y+1	; 0x01
    4b86:	98 17       	cp	r25, r24
    4b88:	b1 f7       	brne	.-20     	; 0x4b76 <MCP2515_voidSetMode+0x20>
}
    4b8a:	0f 90       	pop	r0
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <MCP2515_voidSendInit>:

void MCP2515_voidSendInit(void)
{
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    4b9a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    4b9e:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    4ba2:	8f e0       	ldi	r24, 0x0F	; 15
    4ba4:	64 e8       	ldi	r22, 0x84	; 132
    4ba6:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
    4baa:	8e e0       	ldi	r24, 0x0E	; 14
    4bac:	0e 94 28 25 	call	0x4a50	; 0x4a50 <MCP2515_u8ReadRegister>
    4bb0:	82 95       	swap	r24
    4bb2:	86 95       	lsr	r24
    4bb4:	87 70       	andi	r24, 0x07	; 7
    4bb6:	84 30       	cpi	r24, 0x04	; 4
    4bb8:	c1 f7       	brne	.-16     	; 0x4baa <MCP2515_voidSendInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), ((1 << 7) | (6 << 3) | (1)), 5);
    4bba:	80 e8       	ldi	r24, 0x80	; 128
    4bbc:	61 eb       	ldi	r22, 0xB1	; 177
    4bbe:	45 e0       	ldi	r20, 0x05	; 5
    4bc0:	0e 94 5f 25 	call	0x4abe	; 0x4abe <MCP2515_voidSetBitTiming>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <MCP2515_voidSetMode>
}
    4bca:	cf 91       	pop	r28
    4bcc:	df 91       	pop	r29
    4bce:	08 95       	ret

00004bd0 <MCP2515_voidSendCANmsg>:



void MCP2515_voidSendCANmsg(MCP2515_CanMessage_t Copy_stMessage)
{
    4bd0:	cf 92       	push	r12
    4bd2:	df 92       	push	r13
    4bd4:	ef 92       	push	r14
    4bd6:	ff 92       	push	r15
    4bd8:	0f 93       	push	r16
    4bda:	1f 93       	push	r17
    4bdc:	df 93       	push	r29
    4bde:	cf 93       	push	r28
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	2f 97       	sbiw	r28, 0x0f	; 15
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	cd bf       	out	0x3d, r28	; 61
    4bf0:	ca 82       	std	Y+2, r12	; 0x02
    4bf2:	db 82       	std	Y+3, r13	; 0x03
    4bf4:	ec 82       	std	Y+4, r14	; 0x04
    4bf6:	fd 82       	std	Y+5, r15	; 0x05
    4bf8:	0e 83       	std	Y+6, r16	; 0x06
    4bfa:	1f 83       	std	Y+7, r17	; 0x07
    4bfc:	28 87       	std	Y+8, r18	; 0x08
    4bfe:	39 87       	std	Y+9, r19	; 0x09
    4c00:	4a 87       	std	Y+10, r20	; 0x0a
    4c02:	5b 87       	std	Y+11, r21	; 0x0b
    4c04:	6c 87       	std	Y+12, r22	; 0x0c
    4c06:	7d 87       	std	Y+13, r23	; 0x0d
    4c08:	8e 87       	std	Y+14, r24	; 0x0e
    4c0a:	9f 87       	std	Y+15, r25	; 0x0f
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	/*Send header and address*/
	SPI_u8Transceive(INST_WRITE);
    4c12:	82 e0       	ldi	r24, 0x02	; 2
    4c14:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(TXB0CTRL);
    4c18:	80 e3       	ldi	r24, 0x30	; 48
    4c1a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	/*Setup message priority*/
	SPI_u8Transceive(3);
    4c1e:	83 e0       	ldi	r24, 0x03	; 3
    4c20:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	/* Setup standard or extended identifier */
	SPI_u8Transceive((uint8)(Copy_stMessage.id >> 3));
    4c24:	8a 81       	ldd	r24, Y+2	; 0x02
    4c26:	9b 81       	ldd	r25, Y+3	; 0x03
    4c28:	ac 81       	ldd	r26, Y+4	; 0x04
    4c2a:	bd 81       	ldd	r27, Y+5	; 0x05
    4c2c:	68 94       	set
    4c2e:	12 f8       	bld	r1, 2
    4c30:	b6 95       	lsr	r27
    4c32:	a7 95       	ror	r26
    4c34:	97 95       	ror	r25
    4c36:	87 95       	ror	r24
    4c38:	16 94       	lsr	r1
    4c3a:	d1 f7       	brne	.-12     	; 0x4c30 <MCP2515_voidSendCANmsg+0x60>
    4c3c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive((uint8)(Copy_stMessage.id << 5));
    4c40:	8a 81       	ldd	r24, Y+2	; 0x02
    4c42:	9b 81       	ldd	r25, Y+3	; 0x03
    4c44:	ac 81       	ldd	r26, Y+4	; 0x04
    4c46:	bd 81       	ldd	r27, Y+5	; 0x05
    4c48:	82 95       	swap	r24
    4c4a:	88 0f       	add	r24, r24
    4c4c:	80 7e       	andi	r24, 0xE0	; 224
    4c4e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));
    4c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c60:	28 2f       	mov	r18, r24
    4c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c64:	88 2f       	mov	r24, r24
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	00 24       	eor	r0, r0
    4c6a:	96 95       	lsr	r25
    4c6c:	87 95       	ror	r24
    4c6e:	07 94       	ror	r0
    4c70:	96 95       	lsr	r25
    4c72:	87 95       	ror	r24
    4c74:	07 94       	ror	r0
    4c76:	98 2f       	mov	r25, r24
    4c78:	80 2d       	mov	r24, r0
    4c7a:	82 2b       	or	r24, r18
    4c7c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    4c80:	19 82       	std	Y+1, r1	; 0x01
    4c82:	0e c0       	rjmp	.+28     	; 0x4ca0 <MCP2515_voidSendCANmsg+0xd0>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	28 2f       	mov	r18, r24
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	06 96       	adiw	r24, 0x06	; 6
    4c8e:	fc 01       	movw	r30, r24
    4c90:	e2 0f       	add	r30, r18
    4c92:	f3 1f       	adc	r31, r19
    4c94:	80 81       	ld	r24, Z
    4c96:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	8f 5f       	subi	r24, 0xFF	; 255
    4c9e:	89 83       	std	Y+1, r24	; 0x01
    4ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ca2:	89 81       	ldd	r24, Y+1	; 0x01
    4ca4:	89 17       	cp	r24, r25
    4ca6:	70 f3       	brcs	.-36     	; 0x4c84 <MCP2515_voidSendCANmsg+0xb4>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
	}

	/*Release the bus*/
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	/*Send request to send*/
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
	SPI_u8Transceive(INST_RTS_TXB0);
    4cb4:	81 e8       	ldi	r24, 0x81	; 129
    4cb6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
}
    4cc0:	2f 96       	adiw	r28, 0x0f	; 15
    4cc2:	0f b6       	in	r0, 0x3f	; 63
    4cc4:	f8 94       	cli
    4cc6:	de bf       	out	0x3e, r29	; 62
    4cc8:	0f be       	out	0x3f, r0	; 63
    4cca:	cd bf       	out	0x3d, r28	; 61
    4ccc:	cf 91       	pop	r28
    4cce:	df 91       	pop	r29
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	df 90       	pop	r13
    4cda:	cf 90       	pop	r12
    4cdc:	08 95       	ret

00004cde <MCP2515_voidSetRollover>:


void MCP2515_voidSetRollover(uint8 Copy_u8Value)
{
    4cde:	df 93       	push	r29
    4ce0:	cf 93       	push	r28
    4ce2:	0f 92       	push	r0
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(RXB0CTRL, 1 << BUKT, Copy_u8Value << BUKT);
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	98 2f       	mov	r25, r24
    4cee:	99 0f       	add	r25, r25
    4cf0:	99 0f       	add	r25, r25
    4cf2:	80 e6       	ldi	r24, 0x60	; 96
    4cf4:	64 e0       	ldi	r22, 0x04	; 4
    4cf6:	49 2f       	mov	r20, r25
    4cf8:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <MCP2515_voidChangeBits>
}
    4cfc:	0f 90       	pop	r0
    4cfe:	cf 91       	pop	r28
    4d00:	df 91       	pop	r29
    4d02:	08 95       	ret

00004d04 <MCP2515_voidSetMask>:

void MCP2515_voidSetMask(uint8 Copy_u8MaskAddress, uint32 Copy_u32MaskValue, uint8 Copy_u8Extended)
{
    4d04:	df 93       	push	r29
    4d06:	cf 93       	push	r28
    4d08:	00 d0       	rcall	.+0      	; 0x4d0a <MCP2515_voidSetMask+0x6>
    4d0a:	00 d0       	rcall	.+0      	; 0x4d0c <MCP2515_voidSetMask+0x8>
    4d0c:	00 d0       	rcall	.+0      	; 0x4d0e <MCP2515_voidSetMask+0xa>
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
    4d12:	89 83       	std	Y+1, r24	; 0x01
    4d14:	4a 83       	std	Y+2, r20	; 0x02
    4d16:	5b 83       	std	Y+3, r21	; 0x03
    4d18:	6c 83       	std	Y+4, r22	; 0x04
    4d1a:	7d 83       	std	Y+5, r23	; 0x05
    4d1c:	2e 83       	std	Y+6, r18	; 0x06
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    4d24:	82 e0       	ldi	r24, 0x02	; 2
    4d26:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8MaskAddress);
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
    4d2c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	if(Copy_u8Extended)
    4d30:	8e 81       	ldd	r24, Y+6	; 0x06
    4d32:	88 23       	and	r24, r24
    4d34:	09 f4       	brne	.+2      	; 0x4d38 <MCP2515_voidSetMask+0x34>
    4d36:	43 c0       	rjmp	.+134    	; 0x4dbe <MCP2515_voidSetMask+0xba>
	{
		/*Extended Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d3c:	ac 81       	ldd	r26, Y+4	; 0x04
    4d3e:	bd 81       	ldd	r27, Y+5	; 0x05
    4d40:	68 94       	set
    4d42:	12 f8       	bld	r1, 2
    4d44:	b6 95       	lsr	r27
    4d46:	a7 95       	ror	r26
    4d48:	97 95       	ror	r25
    4d4a:	87 95       	ror	r24
    4d4c:	16 94       	lsr	r1
    4d4e:	d1 f7       	brne	.-12     	; 0x4d44 <MCP2515_voidSetMask+0x40>
    4d50:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5) | (1<<3) | (uint32) (Copy_u32MaskValue >> 27));
    4d54:	8a 81       	ldd	r24, Y+2	; 0x02
    4d56:	28 2f       	mov	r18, r24
    4d58:	22 95       	swap	r18
    4d5a:	22 0f       	add	r18, r18
    4d5c:	20 7e       	andi	r18, 0xE0	; 224
    4d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d60:	9b 81       	ldd	r25, Y+3	; 0x03
    4d62:	ac 81       	ldd	r26, Y+4	; 0x04
    4d64:	bd 81       	ldd	r27, Y+5	; 0x05
    4d66:	07 2e       	mov	r0, r23
    4d68:	7b e1       	ldi	r23, 0x1B	; 27
    4d6a:	b6 95       	lsr	r27
    4d6c:	a7 95       	ror	r26
    4d6e:	97 95       	ror	r25
    4d70:	87 95       	ror	r24
    4d72:	7a 95       	dec	r23
    4d74:	d1 f7       	brne	.-12     	; 0x4d6a <MCP2515_voidSetMask+0x66>
    4d76:	70 2d       	mov	r23, r0
    4d78:	82 2b       	or	r24, r18
    4d7a:	88 60       	ori	r24, 0x08	; 8
    4d7c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 19));
    4d80:	8a 81       	ldd	r24, Y+2	; 0x02
    4d82:	9b 81       	ldd	r25, Y+3	; 0x03
    4d84:	ac 81       	ldd	r26, Y+4	; 0x04
    4d86:	bd 81       	ldd	r27, Y+5	; 0x05
    4d88:	07 2e       	mov	r0, r23
    4d8a:	73 e1       	ldi	r23, 0x13	; 19
    4d8c:	b6 95       	lsr	r27
    4d8e:	a7 95       	ror	r26
    4d90:	97 95       	ror	r25
    4d92:	87 95       	ror	r24
    4d94:	7a 95       	dec	r23
    4d96:	d1 f7       	brne	.-12     	; 0x4d8c <MCP2515_voidSetMask+0x88>
    4d98:	70 2d       	mov	r23, r0
    4d9a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 11));
    4d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4da0:	9b 81       	ldd	r25, Y+3	; 0x03
    4da2:	ac 81       	ldd	r26, Y+4	; 0x04
    4da4:	bd 81       	ldd	r27, Y+5	; 0x05
    4da6:	07 2e       	mov	r0, r23
    4da8:	7b e0       	ldi	r23, 0x0B	; 11
    4daa:	b6 95       	lsr	r27
    4dac:	a7 95       	ror	r26
    4dae:	97 95       	ror	r25
    4db0:	87 95       	ror	r24
    4db2:	7a 95       	dec	r23
    4db4:	d1 f7       	brne	.-12     	; 0x4daa <MCP2515_voidSetMask+0xa6>
    4db6:	70 2d       	mov	r23, r0
    4db8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
    4dbc:	14 c0       	rjmp	.+40     	; 0x4de6 <MCP2515_voidSetMask+0xe2>
	}
	else
	{
		/*Standard Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    4dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    4dc2:	ac 81       	ldd	r26, Y+4	; 0x04
    4dc4:	bd 81       	ldd	r27, Y+5	; 0x05
    4dc6:	68 94       	set
    4dc8:	12 f8       	bld	r1, 2
    4dca:	b6 95       	lsr	r27
    4dcc:	a7 95       	ror	r26
    4dce:	97 95       	ror	r25
    4dd0:	87 95       	ror	r24
    4dd2:	16 94       	lsr	r1
    4dd4:	d1 f7       	brne	.-12     	; 0x4dca <MCP2515_voidSetMask+0xc6>
    4dd6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5));
    4dda:	8a 81       	ldd	r24, Y+2	; 0x02
    4ddc:	82 95       	swap	r24
    4dde:	88 0f       	add	r24, r24
    4de0:	80 7e       	andi	r24, 0xE0	; 224
    4de2:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>
}
    4dec:	26 96       	adiw	r28, 0x06	; 6
    4dee:	0f b6       	in	r0, 0x3f	; 63
    4df0:	f8 94       	cli
    4df2:	de bf       	out	0x3e, r29	; 62
    4df4:	0f be       	out	0x3f, r0	; 63
    4df6:	cd bf       	out	0x3d, r28	; 61
    4df8:	cf 91       	pop	r28
    4dfa:	df 91       	pop	r29
    4dfc:	08 95       	ret

00004dfe <MCP2515_voidReceiveInit>:



void MCP2515_voidReceiveInit(void)
{
    4dfe:	df 93       	push	r29
    4e00:	cf 93       	push	r28
    4e02:	cd b7       	in	r28, 0x3d	; 61
    4e04:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    4e06:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    4e0a:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    4e0e:	8f e0       	ldi	r24, 0x0F	; 15
    4e10:	64 e8       	ldi	r22, 0x84	; 132
    4e12:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != MCP2515_MODE_CONFG);
    4e16:	8e e0       	ldi	r24, 0x0E	; 14
    4e18:	0e 94 28 25 	call	0x4a50	; 0x4a50 <MCP2515_u8ReadRegister>
    4e1c:	82 95       	swap	r24
    4e1e:	86 95       	lsr	r24
    4e20:	87 70       	andi	r24, 0x07	; 7
    4e22:	84 30       	cpi	r24, 0x04	; 4
    4e24:	c1 f7       	brne	.-16     	; 0x4e16 <MCP2515_voidReceiveInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), (1 << 7) | (6 << 3) | (1), (5));
    4e26:	80 e8       	ldi	r24, 0x80	; 128
    4e28:	61 eb       	ldi	r22, 0xB1	; 177
    4e2a:	45 e0       	ldi	r20, 0x05	; 5
    4e2c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <MCP2515_voidSetBitTiming>

	//	MCP2515_VidSetBitTiming(0, 0xAC, 0x03);
	/*Accept all messages*/
	MCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1);
    4e30:	80 e2       	ldi	r24, 0x20	; 32
    4e32:	40 e0       	ldi	r20, 0x00	; 0
    4e34:	50 e0       	ldi	r21, 0x00	; 0
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	21 e0       	ldi	r18, 0x01	; 1
    4e3c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <MCP2515_voidSetMask>
	MCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1);
    4e40:	84 e2       	ldi	r24, 0x24	; 36
    4e42:	40 e0       	ldi	r20, 0x00	; 0
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	60 e0       	ldi	r22, 0x00	; 0
    4e48:	70 e0       	ldi	r23, 0x00	; 0
    4e4a:	21 e0       	ldi	r18, 0x01	; 1
    4e4c:	0e 94 82 26 	call	0x4d04	; 0x4d04 <MCP2515_voidSetMask>
	MCP2515_voidSetRollover(1);
    4e50:	81 e0       	ldi	r24, 0x01	; 1
    4e52:	0e 94 6f 26 	call	0x4cde	; 0x4cde <MCP2515_voidSetRollover>

	MCP2515_voidWriteRegister(CANINTE, 1<<RX0IE);
    4e56:	8b e2       	ldi	r24, 0x2B	; 43
    4e58:	61 e0       	ldi	r22, 0x01	; 1
    4e5a:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <MCP2515_voidSetMode>
}
    4e64:	cf 91       	pop	r28
    4e66:	df 91       	pop	r29
    4e68:	08 95       	ret

00004e6a <MCP2515_stReceiveCANmsg>:

uint8 MCP2515_u8ReadBuffer[14];

MCP2515_CanMessage_t MCP2515_stReceiveCANmsg(void)
{
    4e6a:	0f 93       	push	r16
    4e6c:	1f 93       	push	r17
    4e6e:	df 93       	push	r29
    4e70:	cf 93       	push	r28
    4e72:	cd b7       	in	r28, 0x3d	; 61
    4e74:	de b7       	in	r29, 0x3e	; 62
    4e76:	67 97       	sbiw	r28, 0x17	; 23
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	f8 94       	cli
    4e7c:	de bf       	out	0x3e, r29	; 62
    4e7e:	0f be       	out	0x3f, r0	; 63
    4e80:	cd bf       	out	0x3d, r28	; 61
    4e82:	9a 8b       	std	Y+18, r25	; 0x12
    4e84:	89 8b       	std	Y+17, r24	; 0x11
	MCP2515_CanMessage_t Local_stReceive = {0};
    4e86:	8e e0       	ldi	r24, 0x0E	; 14
    4e88:	fe 01       	movw	r30, r28
    4e8a:	33 96       	adiw	r30, 0x03	; 3
    4e8c:	df 01       	movw	r26, r30
    4e8e:	98 2f       	mov	r25, r24
    4e90:	1d 92       	st	X+, r1
    4e92:	9a 95       	dec	r25
    4e94:	e9 f7       	brne	.-6      	; 0x4e90 <MCP2515_stReceiveCANmsg+0x26>
	uint8 Local_u8Counter = 0;
    4e96:	1a 82       	std	Y+2, r1	; 0x02

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    4e9e:	83 e0       	ldi	r24, 0x03	; 3
    4ea0:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    4ea4:	80 e6       	ldi	r24, 0x60	; 96
    4ea6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    4eaa:	1a 82       	std	Y+2, r1	; 0x02
    4eac:	0d c0       	rjmp	.+26     	; 0x4ec8 <MCP2515_stReceiveCANmsg+0x5e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    4eae:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb0:	08 2f       	mov	r16, r24
    4eb2:	10 e0       	ldi	r17, 0x00	; 0
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
    4eba:	f8 01       	movw	r30, r16
    4ebc:	e8 54       	subi	r30, 0x48	; 72
    4ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec0:	80 83       	st	Z, r24

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    4ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec4:	8f 5f       	subi	r24, 0xFF	; 255
    4ec6:	8a 83       	std	Y+2, r24	; 0x02
    4ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eca:	8e 30       	cpi	r24, 0x0E	; 14
    4ecc:	80 f3       	brcs	.-32     	; 0x4eae <MCP2515_stReceiveCANmsg+0x44>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    4ed4:	8c e2       	ldi	r24, 0x2C	; 44
    4ed6:	60 e0       	ldi	r22, 0x00	; 0
    4ed8:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>

	Local_stReceive.id = MCP2515_u8ReadBuffer[1];
    4edc:	80 91 b9 01 	lds	r24, 0x01B9
    4ee0:	88 2f       	mov	r24, r24
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	a0 e0       	ldi	r26, 0x00	; 0
    4ee6:	b0 e0       	ldi	r27, 0x00	; 0
    4ee8:	8b 83       	std	Y+3, r24	; 0x03
    4eea:	9c 83       	std	Y+4, r25	; 0x04
    4eec:	ad 83       	std	Y+5, r26	; 0x05
    4eee:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.id = Local_stReceive.id << 3;
    4ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef4:	ad 81       	ldd	r26, Y+5	; 0x05
    4ef6:	be 81       	ldd	r27, Y+6	; 0x06
    4ef8:	88 0f       	add	r24, r24
    4efa:	99 1f       	adc	r25, r25
    4efc:	aa 1f       	adc	r26, r26
    4efe:	bb 1f       	adc	r27, r27
    4f00:	88 0f       	add	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	aa 1f       	adc	r26, r26
    4f06:	bb 1f       	adc	r27, r27
    4f08:	88 0f       	add	r24, r24
    4f0a:	99 1f       	adc	r25, r25
    4f0c:	aa 1f       	adc	r26, r26
    4f0e:	bb 1f       	adc	r27, r27
    4f10:	8b 83       	std	Y+3, r24	; 0x03
    4f12:	9c 83       	std	Y+4, r25	; 0x04
    4f14:	ad 83       	std	Y+5, r26	; 0x05
    4f16:	be 83       	std	Y+6, r27	; 0x06
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
    4f18:	80 91 ba 01 	lds	r24, 0x01BA
    4f1c:	89 83       	std	Y+1, r24	; 0x01
	Local_stReceive.id |= Local_u8Hegazy >> 5;
    4f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    4f20:	3c 81       	ldd	r19, Y+4	; 0x04
    4f22:	4d 81       	ldd	r20, Y+5	; 0x05
    4f24:	5e 81       	ldd	r21, Y+6	; 0x06
    4f26:	89 81       	ldd	r24, Y+1	; 0x01
    4f28:	82 95       	swap	r24
    4f2a:	86 95       	lsr	r24
    4f2c:	87 70       	andi	r24, 0x07	; 7
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	a0 e0       	ldi	r26, 0x00	; 0
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	82 2b       	or	r24, r18
    4f38:	93 2b       	or	r25, r19
    4f3a:	a4 2b       	or	r26, r20
    4f3c:	b5 2b       	or	r27, r21
    4f3e:	8b 83       	std	Y+3, r24	; 0x03
    4f40:	9c 83       	std	Y+4, r25	; 0x04
    4f42:	ad 83       	std	Y+5, r26	; 0x05
    4f44:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;
    4f46:	80 91 bd 01 	lds	r24, 0x01BD
    4f4a:	8f 70       	andi	r24, 0x0F	; 15
    4f4c:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    4f4e:	1a 82       	std	Y+2, r1	; 0x02
    4f50:	14 c0       	rjmp	.+40     	; 0x4f7a <MCP2515_stReceiveCANmsg+0x110>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
    4f52:	8a 81       	ldd	r24, Y+2	; 0x02
    4f54:	48 2f       	mov	r20, r24
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5a:	88 2f       	mov	r24, r24
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	06 96       	adiw	r24, 0x06	; 6
    4f60:	fc 01       	movw	r30, r24
    4f62:	e8 54       	subi	r30, 0x48	; 72
    4f64:	fe 4f       	sbci	r31, 0xFE	; 254
    4f66:	20 81       	ld	r18, Z
    4f68:	ce 01       	movw	r24, r28
    4f6a:	07 96       	adiw	r24, 0x07	; 7
    4f6c:	fc 01       	movw	r30, r24
    4f6e:	e4 0f       	add	r30, r20
    4f70:	f5 1f       	adc	r31, r21
    4f72:	20 83       	st	Z, r18
	Local_stReceive.id = Local_stReceive.id << 3;
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
	Local_stReceive.id |= Local_u8Hegazy >> 5;
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    4f74:	8a 81       	ldd	r24, Y+2	; 0x02
    4f76:	8f 5f       	subi	r24, 0xFF	; 255
    4f78:	8a 83       	std	Y+2, r24	; 0x02
    4f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f7c:	88 30       	cpi	r24, 0x08	; 8
    4f7e:	48 f3       	brcs	.-46     	; 0x4f52 <MCP2515_stReceiveCANmsg+0xe8>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
	}

	Local_stReceive.properties = GET_BIT(MCP2515_u8ReadBuffer[0],3);
    4f80:	80 91 b8 01 	lds	r24, 0x01B8
    4f84:	86 95       	lsr	r24
    4f86:	86 95       	lsr	r24
    4f88:	86 95       	lsr	r24
    4f8a:	81 70       	andi	r24, 0x01	; 1
    4f8c:	88 8b       	std	Y+16, r24	; 0x10

	return Local_stReceive;
    4f8e:	a9 89       	ldd	r26, Y+17	; 0x11
    4f90:	ba 89       	ldd	r27, Y+18	; 0x12
    4f92:	bc 8b       	std	Y+20, r27	; 0x14
    4f94:	ab 8b       	std	Y+19, r26	; 0x13
    4f96:	fe 01       	movw	r30, r28
    4f98:	33 96       	adiw	r30, 0x03	; 3
    4f9a:	fe 8b       	std	Y+22, r31	; 0x16
    4f9c:	ed 8b       	std	Y+21, r30	; 0x15
    4f9e:	fe e0       	ldi	r31, 0x0E	; 14
    4fa0:	ff 8b       	std	Y+23, r31	; 0x17
    4fa2:	ad 89       	ldd	r26, Y+21	; 0x15
    4fa4:	be 89       	ldd	r27, Y+22	; 0x16
    4fa6:	0c 90       	ld	r0, X
    4fa8:	ed 89       	ldd	r30, Y+21	; 0x15
    4faa:	fe 89       	ldd	r31, Y+22	; 0x16
    4fac:	31 96       	adiw	r30, 0x01	; 1
    4fae:	fe 8b       	std	Y+22, r31	; 0x16
    4fb0:	ed 8b       	std	Y+21, r30	; 0x15
    4fb2:	ab 89       	ldd	r26, Y+19	; 0x13
    4fb4:	bc 89       	ldd	r27, Y+20	; 0x14
    4fb6:	0c 92       	st	X, r0
    4fb8:	eb 89       	ldd	r30, Y+19	; 0x13
    4fba:	fc 89       	ldd	r31, Y+20	; 0x14
    4fbc:	31 96       	adiw	r30, 0x01	; 1
    4fbe:	fc 8b       	std	Y+20, r31	; 0x14
    4fc0:	eb 8b       	std	Y+19, r30	; 0x13
    4fc2:	ff 89       	ldd	r31, Y+23	; 0x17
    4fc4:	f1 50       	subi	r31, 0x01	; 1
    4fc6:	ff 8b       	std	Y+23, r31	; 0x17
    4fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4fca:	88 23       	and	r24, r24
    4fcc:	51 f7       	brne	.-44     	; 0x4fa2 <MCP2515_stReceiveCANmsg+0x138>
}
    4fce:	89 89       	ldd	r24, Y+17	; 0x11
    4fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    4fd2:	67 96       	adiw	r28, 0x17	; 23
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	de bf       	out	0x3e, r29	; 62
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	cd bf       	out	0x3d, r28	; 61
    4fde:	cf 91       	pop	r28
    4fe0:	df 91       	pop	r29
    4fe2:	1f 91       	pop	r17
    4fe4:	0f 91       	pop	r16
    4fe6:	08 95       	ret

00004fe8 <MCP2515_voidReceiveCANmsg2>:

void MCP2515_voidReceiveCANmsg2(void)
{
    4fe8:	0f 93       	push	r16
    4fea:	1f 93       	push	r17
    4fec:	df 93       	push	r29
    4fee:	cf 93       	push	r28
    4ff0:	0f 92       	push	r0
    4ff2:	cd b7       	in	r28, 0x3d	; 61
    4ff4:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
    4ffc:	83 e0       	ldi	r24, 0x03	; 3
    4ffe:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    5002:	80 e6       	ldi	r24, 0x60	; 96
    5004:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    5008:	19 82       	std	Y+1, r1	; 0x01
    500a:	0d c0       	rjmp	.+26     	; 0x5026 <MCP2515_voidReceiveCANmsg2+0x3e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	08 2f       	mov	r16, r24
    5010:	10 e0       	ldi	r17, 0x00	; 0
    5012:	80 e0       	ldi	r24, 0x00	; 0
    5014:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SPI_u8Transceive>
    5018:	f8 01       	movw	r30, r16
    501a:	e8 54       	subi	r30, 0x48	; 72
    501c:	fe 4f       	sbci	r31, 0xFE	; 254
    501e:	80 83       	st	Z, r24
	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	8f 5f       	subi	r24, 0xFF	; 255
    5024:	89 83       	std	Y+1, r24	; 0x01
    5026:	89 81       	ldd	r24, Y+1	; 0x01
    5028:	8e 30       	cpi	r24, 0x0E	; 14
    502a:	80 f3       	brcs	.-32     	; 0x500c <MCP2515_voidReceiveCANmsg2+0x24>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    5032:	8c e2       	ldi	r24, 0x2C	; 44
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	0e 94 44 25 	call	0x4a88	; 0x4a88 <MCP2515_voidWriteRegister>
}
    503a:	0f 90       	pop	r0
    503c:	cf 91       	pop	r28
    503e:	df 91       	pop	r29
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	08 95       	ret

00005046 <voidSendEnablePulse>:

/**
 * @brief Function to send enable pulse into the enable pin of the CLCD.
 */
static void voidSendEnablePulse(void)
{
    5046:	df 93       	push	r29
    5048:	cf 93       	push	r28
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	2e 97       	sbiw	r28, 0x0e	; 14
    5050:	0f b6       	in	r0, 0x3f	; 63
    5052:	f8 94       	cli
    5054:	de bf       	out	0x3e, r29	; 62
    5056:	0f be       	out	0x3f, r0	; 63
    5058:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_HIGH);
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	62 e0       	ldi	r22, 0x02	; 2
    505e:	41 e0       	ldi	r20, 0x01	; 1
    5060:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	a0 e0       	ldi	r26, 0x00	; 0
    506a:	b0 e4       	ldi	r27, 0x40	; 64
    506c:	8b 87       	std	Y+11, r24	; 0x0b
    506e:	9c 87       	std	Y+12, r25	; 0x0c
    5070:	ad 87       	std	Y+13, r26	; 0x0d
    5072:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5074:	6b 85       	ldd	r22, Y+11	; 0x0b
    5076:	7c 85       	ldd	r23, Y+12	; 0x0c
    5078:	8d 85       	ldd	r24, Y+13	; 0x0d
    507a:	9e 85       	ldd	r25, Y+14	; 0x0e
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	4a ef       	ldi	r20, 0xFA	; 250
    5082:	54 e4       	ldi	r21, 0x44	; 68
    5084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	8f 83       	std	Y+7, r24	; 0x07
    508e:	98 87       	std	Y+8, r25	; 0x08
    5090:	a9 87       	std	Y+9, r26	; 0x09
    5092:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5094:	6f 81       	ldd	r22, Y+7	; 0x07
    5096:	78 85       	ldd	r23, Y+8	; 0x08
    5098:	89 85       	ldd	r24, Y+9	; 0x09
    509a:	9a 85       	ldd	r25, Y+10	; 0x0a
    509c:	20 e0       	ldi	r18, 0x00	; 0
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	40 e8       	ldi	r20, 0x80	; 128
    50a2:	5f e3       	ldi	r21, 0x3F	; 63
    50a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50a8:	88 23       	and	r24, r24
    50aa:	2c f4       	brge	.+10     	; 0x50b6 <voidSendEnablePulse+0x70>
		__ticks = 1;
    50ac:	81 e0       	ldi	r24, 0x01	; 1
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	9e 83       	std	Y+6, r25	; 0x06
    50b2:	8d 83       	std	Y+5, r24	; 0x05
    50b4:	3f c0       	rjmp	.+126    	; 0x5134 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    50b6:	6f 81       	ldd	r22, Y+7	; 0x07
    50b8:	78 85       	ldd	r23, Y+8	; 0x08
    50ba:	89 85       	ldd	r24, Y+9	; 0x09
    50bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	3f ef       	ldi	r19, 0xFF	; 255
    50c2:	4f e7       	ldi	r20, 0x7F	; 127
    50c4:	57 e4       	ldi	r21, 0x47	; 71
    50c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50ca:	18 16       	cp	r1, r24
    50cc:	4c f5       	brge	.+82     	; 0x5120 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    50d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 e2       	ldi	r20, 0x20	; 32
    50dc:	51 e4       	ldi	r21, 0x41	; 65
    50de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	bc 01       	movw	r22, r24
    50e8:	cd 01       	movw	r24, r26
    50ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	9e 83       	std	Y+6, r25	; 0x06
    50f4:	8d 83       	std	Y+5, r24	; 0x05
    50f6:	0f c0       	rjmp	.+30     	; 0x5116 <voidSendEnablePulse+0xd0>
    50f8:	88 ec       	ldi	r24, 0xC8	; 200
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	9c 83       	std	Y+4, r25	; 0x04
    50fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5100:	8b 81       	ldd	r24, Y+3	; 0x03
    5102:	9c 81       	ldd	r25, Y+4	; 0x04
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	f1 f7       	brne	.-4      	; 0x5104 <voidSendEnablePulse+0xbe>
    5108:	9c 83       	std	Y+4, r25	; 0x04
    510a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    510c:	8d 81       	ldd	r24, Y+5	; 0x05
    510e:	9e 81       	ldd	r25, Y+6	; 0x06
    5110:	01 97       	sbiw	r24, 0x01	; 1
    5112:	9e 83       	std	Y+6, r25	; 0x06
    5114:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5116:	8d 81       	ldd	r24, Y+5	; 0x05
    5118:	9e 81       	ldd	r25, Y+6	; 0x06
    511a:	00 97       	sbiw	r24, 0x00	; 0
    511c:	69 f7       	brne	.-38     	; 0x50f8 <voidSendEnablePulse+0xb2>
    511e:	14 c0       	rjmp	.+40     	; 0x5148 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5120:	6f 81       	ldd	r22, Y+7	; 0x07
    5122:	78 85       	ldd	r23, Y+8	; 0x08
    5124:	89 85       	ldd	r24, Y+9	; 0x09
    5126:	9a 85       	ldd	r25, Y+10	; 0x0a
    5128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	9e 83       	std	Y+6, r25	; 0x06
    5132:	8d 83       	std	Y+5, r24	; 0x05
    5134:	8d 81       	ldd	r24, Y+5	; 0x05
    5136:	9e 81       	ldd	r25, Y+6	; 0x06
    5138:	9a 83       	std	Y+2, r25	; 0x02
    513a:	89 83       	std	Y+1, r24	; 0x01
    513c:	89 81       	ldd	r24, Y+1	; 0x01
    513e:	9a 81       	ldd	r25, Y+2	; 0x02
    5140:	01 97       	sbiw	r24, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <voidSendEnablePulse+0xfa>
    5144:	9a 83       	std	Y+2, r25	; 0x02
    5146:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_LOW);
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	62 e0       	ldi	r22, 0x02	; 2
    514c:	40 e0       	ldi	r20, 0x00	; 0
    514e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
}
    5152:	2e 96       	adiw	r28, 0x0e	; 14
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	08 95       	ret

00005164 <voidSetLCDHalfDataPort>:
/**
 * @brief Function to set a nipple into the half data port.
 * @param Copy_u8Nipple
 */
static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    5164:	df 93       	push	r29
    5166:	cf 93       	push	r28
    5168:	0f 92       	push	r0
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D4_PIN, GET_BIT(Copy_u8Nipple, 0));
    5170:	89 81       	ldd	r24, Y+1	; 0x01
    5172:	98 2f       	mov	r25, r24
    5174:	91 70       	andi	r25, 0x01	; 1
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	63 e0       	ldi	r22, 0x03	; 3
    517a:	49 2f       	mov	r20, r25
    517c:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D5_PIN, GET_BIT(Copy_u8Nipple, 1));
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	86 95       	lsr	r24
    5184:	98 2f       	mov	r25, r24
    5186:	91 70       	andi	r25, 0x01	; 1
    5188:	80 e0       	ldi	r24, 0x00	; 0
    518a:	64 e0       	ldi	r22, 0x04	; 4
    518c:	49 2f       	mov	r20, r25
    518e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D6_PIN, GET_BIT(Copy_u8Nipple, 2));
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	86 95       	lsr	r24
    5196:	86 95       	lsr	r24
    5198:	98 2f       	mov	r25, r24
    519a:	91 70       	andi	r25, 0x01	; 1
    519c:	80 e0       	ldi	r24, 0x00	; 0
    519e:	65 e0       	ldi	r22, 0x05	; 5
    51a0:	49 2f       	mov	r20, r25
    51a2:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D7_PIN, GET_BIT(Copy_u8Nipple, 3));
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	86 95       	lsr	r24
    51aa:	86 95       	lsr	r24
    51ac:	86 95       	lsr	r24
    51ae:	98 2f       	mov	r25, r24
    51b0:	91 70       	andi	r25, 0x01	; 1
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	66 e0       	ldi	r22, 0x06	; 6
    51b6:	49 2f       	mov	r20, r25
    51b8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
}
    51bc:	0f 90       	pop	r0
    51be:	cf 91       	pop	r28
    51c0:	df 91       	pop	r29
    51c2:	08 95       	ret

000051c4 <CLCD_voidSendCmd>:
/**
 * @brief Function to send command order to the CLCD.
 * @param Copy_u8Cmd Parameter which take the number of the command as 1 byte
 */
void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    51c4:	df 93       	push	r29
    51c6:	cf 93       	push	r28
    51c8:	0f 92       	push	r0
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
    51ce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
    51d0:	80 e0       	ldi	r24, 0x00	; 0
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	40 e0       	ldi	r20, 0x00	; 0
    51d6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	61 e0       	ldi	r22, 0x01	; 1
    51de:	40 e0       	ldi	r20, 0x00	; 0
    51e0:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
    51e6:	82 95       	swap	r24
    51e8:	8f 70       	andi	r24, 0x0F	; 15
    51ea:	0e 94 b2 28 	call	0x5164	; 0x5164 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    51ee:	0e 94 23 28 	call	0x5046	; 0x5046 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	0e 94 b2 28 	call	0x5164	; 0x5164 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    51f8:	0e 94 23 28 	call	0x5046	; 0x5046 <voidSendEnablePulse>

#endif

}
    51fc:	0f 90       	pop	r0
    51fe:	cf 91       	pop	r28
    5200:	df 91       	pop	r29
    5202:	08 95       	ret

00005204 <CLCD_voidSendData>:
/**
 * @brief Function to send data to the CLCD.
 * @param Copy_c8Data Parameter which take 1 byte data to be set.
 */
void CLCD_voidSendData(char Copy_u8Data)
{
    5204:	df 93       	push	r29
    5206:	cf 93       	push	r28
    5208:	0f 92       	push	r0
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
    520e:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	60 e0       	ldi	r22, 0x00	; 0
    5214:	41 e0       	ldi	r20, 0x01	; 1
    5216:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	61 e0       	ldi	r22, 0x01	; 1
    521e:	40 e0       	ldi	r20, 0x00	; 0
    5220:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data >> 4);
    5224:	89 81       	ldd	r24, Y+1	; 0x01
    5226:	82 95       	swap	r24
    5228:	8f 70       	andi	r24, 0x0F	; 15
    522a:	0e 94 b2 28 	call	0x5164	; 0x5164 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    522e:	0e 94 23 28 	call	0x5046	; 0x5046 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data);
    5232:	89 81       	ldd	r24, Y+1	; 0x01
    5234:	0e 94 b2 28 	call	0x5164	; 0x5164 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    5238:	0e 94 23 28 	call	0x5046	; 0x5046 <voidSendEnablePulse>

#endif
}
    523c:	0f 90       	pop	r0
    523e:	cf 91       	pop	r28
    5240:	df 91       	pop	r29
    5242:	08 95       	ret

00005244 <CLCD_voidInit>:

/**
 * @brief Function to initialize the CLCD according to its configurations.
 */
void CLCD_voidInit(void)
{
    5244:	df 93       	push	r29
    5246:	cf 93       	push	r28
    5248:	cd b7       	in	r28, 0x3d	; 61
    524a:	de b7       	in	r29, 0x3e	; 62
    524c:	2f 97       	sbiw	r28, 0x0f	; 15
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	f8 94       	cli
    5252:	de bf       	out	0x3e, r29	; 62
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	cd bf       	out	0x3d, r28	; 61
    5258:	80 e0       	ldi	r24, 0x00	; 0
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	a0 e2       	ldi	r26, 0x20	; 32
    525e:	b2 e4       	ldi	r27, 0x42	; 66
    5260:	8b 87       	std	Y+11, r24	; 0x0b
    5262:	9c 87       	std	Y+12, r25	; 0x0c
    5264:	ad 87       	std	Y+13, r26	; 0x0d
    5266:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5268:	6b 85       	ldd	r22, Y+11	; 0x0b
    526a:	7c 85       	ldd	r23, Y+12	; 0x0c
    526c:	8d 85       	ldd	r24, Y+13	; 0x0d
    526e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	4a ef       	ldi	r20, 0xFA	; 250
    5276:	54 e4       	ldi	r21, 0x44	; 68
    5278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    527c:	dc 01       	movw	r26, r24
    527e:	cb 01       	movw	r24, r22
    5280:	8f 83       	std	Y+7, r24	; 0x07
    5282:	98 87       	std	Y+8, r25	; 0x08
    5284:	a9 87       	std	Y+9, r26	; 0x09
    5286:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5288:	6f 81       	ldd	r22, Y+7	; 0x07
    528a:	78 85       	ldd	r23, Y+8	; 0x08
    528c:	89 85       	ldd	r24, Y+9	; 0x09
    528e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e8       	ldi	r20, 0x80	; 128
    5296:	5f e3       	ldi	r21, 0x3F	; 63
    5298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    529c:	88 23       	and	r24, r24
    529e:	2c f4       	brge	.+10     	; 0x52aa <CLCD_voidInit+0x66>
		__ticks = 1;
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	9e 83       	std	Y+6, r25	; 0x06
    52a6:	8d 83       	std	Y+5, r24	; 0x05
    52a8:	3f c0       	rjmp	.+126    	; 0x5328 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    52aa:	6f 81       	ldd	r22, Y+7	; 0x07
    52ac:	78 85       	ldd	r23, Y+8	; 0x08
    52ae:	89 85       	ldd	r24, Y+9	; 0x09
    52b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	3f ef       	ldi	r19, 0xFF	; 255
    52b6:	4f e7       	ldi	r20, 0x7F	; 127
    52b8:	57 e4       	ldi	r21, 0x47	; 71
    52ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52be:	18 16       	cp	r1, r24
    52c0:	4c f5       	brge	.+82     	; 0x5314 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	30 e0       	ldi	r19, 0x00	; 0
    52ce:	40 e2       	ldi	r20, 0x20	; 32
    52d0:	51 e4       	ldi	r21, 0x41	; 65
    52d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52d6:	dc 01       	movw	r26, r24
    52d8:	cb 01       	movw	r24, r22
    52da:	bc 01       	movw	r22, r24
    52dc:	cd 01       	movw	r24, r26
    52de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	9e 83       	std	Y+6, r25	; 0x06
    52e8:	8d 83       	std	Y+5, r24	; 0x05
    52ea:	0f c0       	rjmp	.+30     	; 0x530a <CLCD_voidInit+0xc6>
    52ec:	88 ec       	ldi	r24, 0xC8	; 200
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	9c 83       	std	Y+4, r25	; 0x04
    52f2:	8b 83       	std	Y+3, r24	; 0x03
    52f4:	8b 81       	ldd	r24, Y+3	; 0x03
    52f6:	9c 81       	ldd	r25, Y+4	; 0x04
    52f8:	01 97       	sbiw	r24, 0x01	; 1
    52fa:	f1 f7       	brne	.-4      	; 0x52f8 <CLCD_voidInit+0xb4>
    52fc:	9c 83       	std	Y+4, r25	; 0x04
    52fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5300:	8d 81       	ldd	r24, Y+5	; 0x05
    5302:	9e 81       	ldd	r25, Y+6	; 0x06
    5304:	01 97       	sbiw	r24, 0x01	; 1
    5306:	9e 83       	std	Y+6, r25	; 0x06
    5308:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    530a:	8d 81       	ldd	r24, Y+5	; 0x05
    530c:	9e 81       	ldd	r25, Y+6	; 0x06
    530e:	00 97       	sbiw	r24, 0x00	; 0
    5310:	69 f7       	brne	.-38     	; 0x52ec <CLCD_voidInit+0xa8>
    5312:	14 c0       	rjmp	.+40     	; 0x533c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5314:	6f 81       	ldd	r22, Y+7	; 0x07
    5316:	78 85       	ldd	r23, Y+8	; 0x08
    5318:	89 85       	ldd	r24, Y+9	; 0x09
    531a:	9a 85       	ldd	r25, Y+10	; 0x0a
    531c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	9e 83       	std	Y+6, r25	; 0x06
    5326:	8d 83       	std	Y+5, r24	; 0x05
    5328:	8d 81       	ldd	r24, Y+5	; 0x05
    532a:	9e 81       	ldd	r25, Y+6	; 0x06
    532c:	9a 83       	std	Y+2, r25	; 0x02
    532e:	89 83       	std	Y+1, r24	; 0x01
    5330:	89 81       	ldd	r24, Y+1	; 0x01
    5332:	9a 81       	ldd	r25, Y+2	; 0x02
    5334:	01 97       	sbiw	r24, 0x01	; 1
    5336:	f1 f7       	brne	.-4      	; 0x5334 <CLCD_voidInit+0xf0>
    5338:	9a 83       	std	Y+2, r25	; 0x02
    533a:	89 83       	std	Y+1, r24	; 0x01

	/*Send the command*/
	CLCD_voidSendCmd(Local_u8Command);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	CLCD_voidSendCmd(0b00100010);
    533c:	82 e2       	ldi	r24, 0x22	; 34
    533e:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>

	/*If the font is configured by 5x11 change it*/
#if CLCD_FONT_SIZE == FONT_5x11
	voidSetLCDHalfDataPort(0b1100);
    5342:	8c e0       	ldi	r24, 0x0C	; 12
    5344:	0e 94 b2 28 	call	0x5164	; 0x5164 <voidSetLCDHalfDataPort>
#else
	voidSetLCDHalfDataPort(0b1000);
#endif

	voidSendEnablePulse();
    5348:	0e 94 23 28 	call	0x5046	; 0x5046 <voidSendEnablePulse>
#endif

	/*Display on/off control: display, cursor and blink (Enable/Disable)*/
	Local_u8Command = 0b00001100;
    534c:	8c e0       	ldi	r24, 0x0C	; 12
    534e:	8f 87       	std	Y+15, r24	; 0x0f
	SET_BIT(Local_u8Command, 1);
#endif
#if CLCD_CURSOR_BLINK == ENABLED
	SET_BIT(Local_u8Command, 0);
#endif
	CLCD_voidSendCmd(Local_u8Command);
    5350:	8f 85       	ldd	r24, Y+15	; 0x0f
    5352:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>

	/*Display Clear command*/
	CLCD_voidSendCmd(0b00000001);
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>

	/*Entry mode set command*/
	CLCD_voidSendCmd(0b00000110);
    535c:	86 e0       	ldi	r24, 0x06	; 6
    535e:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>
}
    5362:	2f 96       	adiw	r28, 0x0f	; 15
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	f8 94       	cli
    5368:	de bf       	out	0x3e, r29	; 62
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	cd bf       	out	0x3d, r28	; 61
    536e:	cf 91       	pop	r28
    5370:	df 91       	pop	r29
    5372:	08 95       	ret

00005374 <CLCD_voidClearDisplay>:

/**
 * @brief Function to clear the display.
 */
void CLCD_voidClearDisplay(void)
{
    5374:	df 93       	push	r29
    5376:	cf 93       	push	r28
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>
}
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <CLCD_u8SendString>:
 * @brief Function to send string to be printed on the CLCD.
 * @param Copy_ch8String Pointer to the string which needed to be printed.
 * @return Error State
 */
uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	00 d0       	rcall	.+0      	; 0x538e <CLCD_u8SendString+0x6>
    538e:	00 d0       	rcall	.+0      	; 0x5390 <CLCD_u8SendString+0x8>
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	9c 83       	std	Y+4, r25	; 0x04
    5396:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    5398:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    539a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    539c:	8b 81       	ldd	r24, Y+3	; 0x03
    539e:	9c 81       	ldd	r25, Y+4	; 0x04
    53a0:	00 97       	sbiw	r24, 0x00	; 0
    53a2:	d9 f0       	breq	.+54     	; 0x53da <CLCD_u8SendString+0x52>
    53a4:	0e c0       	rjmp	.+28     	; 0x53c2 <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
    53a8:	28 2f       	mov	r18, r24
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	8b 81       	ldd	r24, Y+3	; 0x03
    53ae:	9c 81       	ldd	r25, Y+4	; 0x04
    53b0:	fc 01       	movw	r30, r24
    53b2:	e2 0f       	add	r30, r18
    53b4:	f3 1f       	adc	r31, r19
    53b6:	80 81       	ld	r24, Z
    53b8:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
			Local_u8Counter++;
    53bc:	89 81       	ldd	r24, Y+1	; 0x01
    53be:	8f 5f       	subi	r24, 0xFF	; 255
    53c0:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	28 2f       	mov	r18, r24
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ca:	9c 81       	ldd	r25, Y+4	; 0x04
    53cc:	fc 01       	movw	r30, r24
    53ce:	e2 0f       	add	r30, r18
    53d0:	f3 1f       	adc	r31, r19
    53d2:	80 81       	ld	r24, Z
    53d4:	88 23       	and	r24, r24
    53d6:	39 f7       	brne	.-50     	; 0x53a6 <CLCD_u8SendString+0x1e>
    53d8:	02 c0       	rjmp	.+4      	; 0x53de <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    53da:	82 e0       	ldi	r24, 0x02	; 2
    53dc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    53de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	0f 90       	pop	r0
    53e8:	cf 91       	pop	r28
    53ea:	df 91       	pop	r29
    53ec:	08 95       	ret

000053ee <CLCD_voidSendDecimalNumber>:
/**
 * @brief Function to print a decimal number into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	df 93       	push	r29
    53f4:	cf 93       	push	r28
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	60 97       	sbiw	r28, 0x10	; 16
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	6d 87       	std	Y+13, r22	; 0x0d
    5408:	7e 87       	std	Y+14, r23	; 0x0e
    540a:	8f 87       	std	Y+15, r24	; 0x0f
    540c:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    540e:	8a e0       	ldi	r24, 0x0A	; 10
    5410:	fe 01       	movw	r30, r28
    5412:	33 96       	adiw	r30, 0x03	; 3
    5414:	df 01       	movw	r26, r30
    5416:	98 2f       	mov	r25, r24
    5418:	1d 92       	st	X+, r1
    541a:	9a 95       	dec	r25
    541c:	e9 f7       	brne	.-6      	; 0x5418 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    541e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    5420:	8d 85       	ldd	r24, Y+13	; 0x0d
    5422:	9e 85       	ldd	r25, Y+14	; 0x0e
    5424:	af 85       	ldd	r26, Y+15	; 0x0f
    5426:	b8 89       	ldd	r27, Y+16	; 0x10
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	a1 05       	cpc	r26, r1
    542c:	b1 05       	cpc	r27, r1
    542e:	21 f4       	brne	.+8      	; 0x5438 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    5430:	80 e3       	ldi	r24, 0x30	; 48
    5432:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
    5436:	7b c0       	rjmp	.+246    	; 0x552e <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    5438:	8d 85       	ldd	r24, Y+13	; 0x0d
    543a:	9e 85       	ldd	r25, Y+14	; 0x0e
    543c:	af 85       	ldd	r26, Y+15	; 0x0f
    543e:	b8 89       	ldd	r27, Y+16	; 0x10
    5440:	bb 23       	and	r27, r27
    5442:	0c f0       	brlt	.+2      	; 0x5446 <CLCD_voidSendDecimalNumber+0x58>
    5444:	54 c0       	rjmp	.+168    	; 0x54ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    5446:	8d e2       	ldi	r24, 0x2D	; 45
    5448:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    544c:	8d 85       	ldd	r24, Y+13	; 0x0d
    544e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5450:	af 85       	ldd	r26, Y+15	; 0x0f
    5452:	b8 89       	ldd	r27, Y+16	; 0x10
    5454:	b0 95       	com	r27
    5456:	a0 95       	com	r26
    5458:	90 95       	com	r25
    545a:	81 95       	neg	r24
    545c:	9f 4f       	sbci	r25, 0xFF	; 255
    545e:	af 4f       	sbci	r26, 0xFF	; 255
    5460:	bf 4f       	sbci	r27, 0xFF	; 255
    5462:	8d 87       	std	Y+13, r24	; 0x0d
    5464:	9e 87       	std	Y+14, r25	; 0x0e
    5466:	af 87       	std	Y+15, r26	; 0x0f
    5468:	b8 8b       	std	Y+16, r27	; 0x10
    546a:	41 c0       	rjmp	.+130    	; 0x54ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    546c:	8a 81       	ldd	r24, Y+2	; 0x02
    546e:	08 2f       	mov	r16, r24
    5470:	10 e0       	ldi	r17, 0x00	; 0
    5472:	8d 85       	ldd	r24, Y+13	; 0x0d
    5474:	9e 85       	ldd	r25, Y+14	; 0x0e
    5476:	af 85       	ldd	r26, Y+15	; 0x0f
    5478:	b8 89       	ldd	r27, Y+16	; 0x10
    547a:	2a e0       	ldi	r18, 0x0A	; 10
    547c:	30 e0       	ldi	r19, 0x00	; 0
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	bc 01       	movw	r22, r24
    5484:	cd 01       	movw	r24, r26
    5486:	0e 94 9f 2c 	call	0x593e	; 0x593e <__divmodsi4>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	28 2f       	mov	r18, r24
    5490:	ce 01       	movw	r24, r28
    5492:	03 96       	adiw	r24, 0x03	; 3
    5494:	fc 01       	movw	r30, r24
    5496:	e0 0f       	add	r30, r16
    5498:	f1 1f       	adc	r31, r17
    549a:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    549c:	8a 81       	ldd	r24, Y+2	; 0x02
    549e:	48 2f       	mov	r20, r24
    54a0:	50 e0       	ldi	r21, 0x00	; 0
    54a2:	8a 81       	ldd	r24, Y+2	; 0x02
    54a4:	28 2f       	mov	r18, r24
    54a6:	30 e0       	ldi	r19, 0x00	; 0
    54a8:	ce 01       	movw	r24, r28
    54aa:	03 96       	adiw	r24, 0x03	; 3
    54ac:	fc 01       	movw	r30, r24
    54ae:	e2 0f       	add	r30, r18
    54b0:	f3 1f       	adc	r31, r19
    54b2:	80 81       	ld	r24, Z
    54b4:	28 2f       	mov	r18, r24
    54b6:	20 5d       	subi	r18, 0xD0	; 208
    54b8:	ce 01       	movw	r24, r28
    54ba:	03 96       	adiw	r24, 0x03	; 3
    54bc:	fc 01       	movw	r30, r24
    54be:	e4 0f       	add	r30, r20
    54c0:	f5 1f       	adc	r31, r21
    54c2:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    54c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54c8:	af 85       	ldd	r26, Y+15	; 0x0f
    54ca:	b8 89       	ldd	r27, Y+16	; 0x10
    54cc:	2a e0       	ldi	r18, 0x0A	; 10
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	50 e0       	ldi	r21, 0x00	; 0
    54d4:	bc 01       	movw	r22, r24
    54d6:	cd 01       	movw	r24, r26
    54d8:	0e 94 9f 2c 	call	0x593e	; 0x593e <__divmodsi4>
    54dc:	da 01       	movw	r26, r20
    54de:	c9 01       	movw	r24, r18
    54e0:	8d 87       	std	Y+13, r24	; 0x0d
    54e2:	9e 87       	std	Y+14, r25	; 0x0e
    54e4:	af 87       	std	Y+15, r26	; 0x0f
    54e6:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    54e8:	8a 81       	ldd	r24, Y+2	; 0x02
    54ea:	8f 5f       	subi	r24, 0xFF	; 255
    54ec:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    54ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    54f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    54f2:	af 85       	ldd	r26, Y+15	; 0x0f
    54f4:	b8 89       	ldd	r27, Y+16	; 0x10
    54f6:	18 16       	cp	r1, r24
    54f8:	19 06       	cpc	r1, r25
    54fa:	1a 06       	cpc	r1, r26
    54fc:	1b 06       	cpc	r1, r27
    54fe:	0c f4       	brge	.+2      	; 0x5502 <CLCD_voidSendDecimalNumber+0x114>
    5500:	b5 cf       	rjmp	.-150    	; 0x546c <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    5502:	8a 81       	ldd	r24, Y+2	; 0x02
    5504:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	88 2f       	mov	r24, r24
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	9c 01       	movw	r18, r24
    550e:	21 50       	subi	r18, 0x01	; 1
    5510:	30 40       	sbci	r19, 0x00	; 0
    5512:	ce 01       	movw	r24, r28
    5514:	03 96       	adiw	r24, 0x03	; 3
    5516:	fc 01       	movw	r30, r24
    5518:	e2 0f       	add	r30, r18
    551a:	f3 1f       	adc	r31, r19
    551c:	80 81       	ld	r24, Z
    551e:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
			Local_u8PrintCounter--;
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	81 50       	subi	r24, 0x01	; 1
    5526:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	88 23       	and	r24, r24
    552c:	61 f7       	brne	.-40     	; 0x5506 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    552e:	60 96       	adiw	r28, 0x10	; 16
    5530:	0f b6       	in	r0, 0x3f	; 63
    5532:	f8 94       	cli
    5534:	de bf       	out	0x3e, r29	; 62
    5536:	0f be       	out	0x3f, r0	; 63
    5538:	cd bf       	out	0x3d, r28	; 61
    553a:	cf 91       	pop	r28
    553c:	df 91       	pop	r29
    553e:	1f 91       	pop	r17
    5540:	0f 91       	pop	r16
    5542:	08 95       	ret

00005544 <CLCD_voidSendBinaryNumber>:
/**
 * @brief Function that takes decimal number and print its binary representation into the CLCD.
 * @param Copy_s16Number Number wanted to be printed.
 */
void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    5544:	df 93       	push	r29
    5546:	cf 93       	push	r28
    5548:	cd b7       	in	r28, 0x3d	; 61
    554a:	de b7       	in	r29, 0x3e	; 62
    554c:	a4 97       	sbiw	r28, 0x24	; 36
    554e:	0f b6       	in	r0, 0x3f	; 63
    5550:	f8 94       	cli
    5552:	de bf       	out	0x3e, r29	; 62
    5554:	0f be       	out	0x3f, r0	; 63
    5556:	cd bf       	out	0x3d, r28	; 61
    5558:	9c a3       	std	Y+36, r25	; 0x24
    555a:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    555c:	80 e2       	ldi	r24, 0x20	; 32
    555e:	fe 01       	movw	r30, r28
    5560:	33 96       	adiw	r30, 0x03	; 3
    5562:	df 01       	movw	r26, r30
    5564:	98 2f       	mov	r25, r24
    5566:	1d 92       	st	X+, r1
    5568:	9a 95       	dec	r25
    556a:	e9 f7       	brne	.-6      	; 0x5566 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    556c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    556e:	80 e6       	ldi	r24, 0x60	; 96
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	0e 94 c4 29 	call	0x5388	; 0x5388 <CLCD_u8SendString>

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    5576:	1a 82       	std	Y+2, r1	; 0x02
    5578:	23 c0       	rjmp	.+70     	; 0x55c0 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    557a:	8b a1       	ldd	r24, Y+35	; 0x23
    557c:	9c a1       	ldd	r25, Y+36	; 0x24
    557e:	81 70       	andi	r24, 0x01	; 1
    5580:	90 70       	andi	r25, 0x00	; 0
    5582:	88 23       	and	r24, r24
    5584:	59 f0       	breq	.+22     	; 0x559c <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    5586:	8a 81       	ldd	r24, Y+2	; 0x02
    5588:	28 2f       	mov	r18, r24
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	ce 01       	movw	r24, r28
    558e:	03 96       	adiw	r24, 0x03	; 3
    5590:	fc 01       	movw	r30, r24
    5592:	e2 0f       	add	r30, r18
    5594:	f3 1f       	adc	r31, r19
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	80 83       	st	Z, r24
    559a:	09 c0       	rjmp	.+18     	; 0x55ae <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    559c:	8a 81       	ldd	r24, Y+2	; 0x02
    559e:	28 2f       	mov	r18, r24
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	ce 01       	movw	r24, r28
    55a4:	03 96       	adiw	r24, 0x03	; 3
    55a6:	fc 01       	movw	r30, r24
    55a8:	e2 0f       	add	r30, r18
    55aa:	f3 1f       	adc	r31, r19
    55ac:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    55ae:	8b a1       	ldd	r24, Y+35	; 0x23
    55b0:	9c a1       	ldd	r25, Y+36	; 0x24
    55b2:	95 95       	asr	r25
    55b4:	87 95       	ror	r24
    55b6:	9c a3       	std	Y+36, r25	; 0x24
    55b8:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	8f 5f       	subi	r24, 0xFF	; 255
    55be:	8a 83       	std	Y+2, r24	; 0x02
    55c0:	8a 81       	ldd	r24, Y+2	; 0x02
    55c2:	80 31       	cpi	r24, 0x10	; 16
    55c4:	d0 f2       	brcs	.-76     	; 0x557a <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	61 e0       	ldi	r22, 0x01	; 1
    55ca:	0e 94 cf 2b 	call	0x579e	; 0x579e <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    55ce:	80 e1       	ldi	r24, 0x10	; 16
    55d0:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    55d2:	89 81       	ldd	r24, Y+1	; 0x01
    55d4:	88 2f       	mov	r24, r24
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	9c 01       	movw	r18, r24
    55da:	21 50       	subi	r18, 0x01	; 1
    55dc:	30 40       	sbci	r19, 0x00	; 0
    55de:	ce 01       	movw	r24, r28
    55e0:	03 96       	adiw	r24, 0x03	; 3
    55e2:	fc 01       	movw	r30, r24
    55e4:	e2 0f       	add	r30, r18
    55e6:	f3 1f       	adc	r31, r19
    55e8:	80 81       	ld	r24, Z
    55ea:	88 23       	and	r24, r24
    55ec:	21 f4       	brne	.+8      	; 0x55f6 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    55ee:	80 e3       	ldi	r24, 0x30	; 48
    55f0:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
    55f4:	03 c0       	rjmp	.+6      	; 0x55fc <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    55f6:	81 e3       	ldi	r24, 0x31	; 49
    55f8:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    55fc:	89 81       	ldd	r24, Y+1	; 0x01
    55fe:	81 50       	subi	r24, 0x01	; 1
    5600:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	88 23       	and	r24, r24
    5606:	29 f7       	brne	.-54     	; 0x55d2 <CLCD_voidSendBinaryNumber+0x8e>
}
    5608:	a4 96       	adiw	r28, 0x24	; 36
    560a:	0f b6       	in	r0, 0x3f	; 63
    560c:	f8 94       	cli
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	cd bf       	out	0x3d, r28	; 61
    5614:	cf 91       	pop	r28
    5616:	df 91       	pop	r29
    5618:	08 95       	ret

0000561a <CLCD_voidSendHexaNumber>:
/**
 * @brief Function that takes decimal number and print its hexadecimal representation into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    561a:	df 93       	push	r29
    561c:	cf 93       	push	r28
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	a5 97       	sbiw	r28, 0x25	; 37
    5624:	0f b6       	in	r0, 0x3f	; 63
    5626:	f8 94       	cli
    5628:	de bf       	out	0x3e, r29	; 62
    562a:	0f be       	out	0x3f, r0	; 63
    562c:	cd bf       	out	0x3d, r28	; 61
    562e:	6d 8f       	std	Y+29, r22	; 0x1d
    5630:	7e 8f       	std	Y+30, r23	; 0x1e
    5632:	8f 8f       	std	Y+31, r24	; 0x1f
    5634:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    5636:	ce 01       	movw	r24, r28
    5638:	05 96       	adiw	r24, 0x05	; 5
    563a:	9a a3       	std	Y+34, r25	; 0x22
    563c:	89 a3       	std	Y+33, r24	; 0x21
    563e:	e2 e7       	ldi	r30, 0x72	; 114
    5640:	f1 e0       	ldi	r31, 0x01	; 1
    5642:	fc a3       	std	Y+36, r31	; 0x24
    5644:	eb a3       	std	Y+35, r30	; 0x23
    5646:	f0 e1       	ldi	r31, 0x10	; 16
    5648:	fd a3       	std	Y+37, r31	; 0x25
    564a:	eb a1       	ldd	r30, Y+35	; 0x23
    564c:	fc a1       	ldd	r31, Y+36	; 0x24
    564e:	00 80       	ld	r0, Z
    5650:	8b a1       	ldd	r24, Y+35	; 0x23
    5652:	9c a1       	ldd	r25, Y+36	; 0x24
    5654:	01 96       	adiw	r24, 0x01	; 1
    5656:	9c a3       	std	Y+36, r25	; 0x24
    5658:	8b a3       	std	Y+35, r24	; 0x23
    565a:	e9 a1       	ldd	r30, Y+33	; 0x21
    565c:	fa a1       	ldd	r31, Y+34	; 0x22
    565e:	00 82       	st	Z, r0
    5660:	89 a1       	ldd	r24, Y+33	; 0x21
    5662:	9a a1       	ldd	r25, Y+34	; 0x22
    5664:	01 96       	adiw	r24, 0x01	; 1
    5666:	9a a3       	std	Y+34, r25	; 0x22
    5668:	89 a3       	std	Y+33, r24	; 0x21
    566a:	9d a1       	ldd	r25, Y+37	; 0x25
    566c:	91 50       	subi	r25, 0x01	; 1
    566e:	9d a3       	std	Y+37, r25	; 0x25
    5670:	ed a1       	ldd	r30, Y+37	; 0x25
    5672:	ee 23       	and	r30, r30
    5674:	51 f7       	brne	.-44     	; 0x564a <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    5676:	1b 82       	std	Y+3, r1	; 0x03
    5678:	20 c0       	rjmp	.+64     	; 0x56ba <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    567a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    567c:	8f 70       	andi	r24, 0x0F	; 15
    567e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    5680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5684:	af 8d       	ldd	r26, Y+31	; 0x1f
    5686:	b8 a1       	ldd	r27, Y+32	; 0x20
    5688:	68 94       	set
    568a:	13 f8       	bld	r1, 3
    568c:	b5 95       	asr	r27
    568e:	a7 95       	ror	r26
    5690:	97 95       	ror	r25
    5692:	87 95       	ror	r24
    5694:	16 94       	lsr	r1
    5696:	d1 f7       	brne	.-12     	; 0x568c <CLCD_voidSendHexaNumber+0x72>
    5698:	8d 8f       	std	Y+29, r24	; 0x1d
    569a:	9e 8f       	std	Y+30, r25	; 0x1e
    569c:	af 8f       	std	Y+31, r26	; 0x1f
    569e:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    56a0:	8b 81       	ldd	r24, Y+3	; 0x03
    56a2:	28 2f       	mov	r18, r24
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	ce 01       	movw	r24, r28
    56a8:	45 96       	adiw	r24, 0x15	; 21
    56aa:	fc 01       	movw	r30, r24
    56ac:	e2 0f       	add	r30, r18
    56ae:	f3 1f       	adc	r31, r19
    56b0:	8a 81       	ldd	r24, Y+2	; 0x02
    56b2:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	8f 5f       	subi	r24, 0xFF	; 255
    56b8:	8b 83       	std	Y+3, r24	; 0x03
    56ba:	8b 81       	ldd	r24, Y+3	; 0x03
    56bc:	88 30       	cpi	r24, 0x08	; 8
    56be:	e8 f2       	brcs	.-70     	; 0x567a <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    56c0:	83 e6       	ldi	r24, 0x63	; 99
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	0e 94 c4 29 	call	0x5388	; 0x5388 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    56c8:	87 e0       	ldi	r24, 0x07	; 7
    56ca:	8c 83       	std	Y+4, r24	; 0x04
    56cc:	1a c0       	rjmp	.+52     	; 0x5702 <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    56ce:	8c 81       	ldd	r24, Y+4	; 0x04
    56d0:	28 2f       	mov	r18, r24
    56d2:	33 27       	eor	r19, r19
    56d4:	27 fd       	sbrc	r18, 7
    56d6:	30 95       	com	r19
    56d8:	ce 01       	movw	r24, r28
    56da:	45 96       	adiw	r24, 0x15	; 21
    56dc:	fc 01       	movw	r30, r24
    56de:	e2 0f       	add	r30, r18
    56e0:	f3 1f       	adc	r31, r19
    56e2:	80 81       	ld	r24, Z
    56e4:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	28 2f       	mov	r18, r24
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	ce 01       	movw	r24, r28
    56ee:	05 96       	adiw	r24, 0x05	; 5
    56f0:	fc 01       	movw	r30, r24
    56f2:	e2 0f       	add	r30, r18
    56f4:	f3 1f       	adc	r31, r19
    56f6:	80 81       	ld	r24, Z
    56f8:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    56fc:	8c 81       	ldd	r24, Y+4	; 0x04
    56fe:	81 50       	subi	r24, 0x01	; 1
    5700:	8c 83       	std	Y+4, r24	; 0x04
    5702:	8c 81       	ldd	r24, Y+4	; 0x04
    5704:	88 23       	and	r24, r24
    5706:	1c f7       	brge	.-58     	; 0x56ce <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    5708:	a5 96       	adiw	r28, 0x25	; 37
    570a:	0f b6       	in	r0, 0x3f	; 63
    570c:	f8 94       	cli
    570e:	de bf       	out	0x3e, r29	; 62
    5710:	0f be       	out	0x3f, r0	; 63
    5712:	cd bf       	out	0x3d, r28	; 61
    5714:	cf 91       	pop	r28
    5716:	df 91       	pop	r29
    5718:	08 95       	ret

0000571a <CLCD_voidSendSpecialCharacter>:
 * @param Copy_u8PatternNum Number that represent the memory location of the special character.
 * @param Copy_u8XPos X position to print the special character.
 * @param Copy_u8YPos Y position to print the special character.
 */
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8PatternArr, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    571a:	df 93       	push	r29
    571c:	cf 93       	push	r28
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	27 97       	sbiw	r28, 0x07	; 7
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	cd bf       	out	0x3d, r28	; 61
    572e:	9c 83       	std	Y+4, r25	; 0x04
    5730:	8b 83       	std	Y+3, r24	; 0x03
    5732:	6d 83       	std	Y+5, r22	; 0x05
    5734:	4e 83       	std	Y+6, r20	; 0x06
    5736:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    5738:	8d 81       	ldd	r24, Y+5	; 0x05
    573a:	88 2f       	mov	r24, r24
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	88 0f       	add	r24, r24
    5740:	99 1f       	adc	r25, r25
    5742:	88 0f       	add	r24, r24
    5744:	99 1f       	adc	r25, r25
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    574c:	8a 81       	ldd	r24, Y+2	; 0x02
    574e:	80 64       	ori	r24, 0x40	; 64
    5750:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    5752:	8a 81       	ldd	r24, Y+2	; 0x02
    5754:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    5758:	19 82       	std	Y+1, r1	; 0x01
    575a:	0e c0       	rjmp	.+28     	; 0x5778 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
    575c:	89 81       	ldd	r24, Y+1	; 0x01
    575e:	28 2f       	mov	r18, r24
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	8b 81       	ldd	r24, Y+3	; 0x03
    5764:	9c 81       	ldd	r25, Y+4	; 0x04
    5766:	fc 01       	movw	r30, r24
    5768:	e2 0f       	add	r30, r18
    576a:	f3 1f       	adc	r31, r19
    576c:	80 81       	ld	r24, Z
    576e:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    5772:	89 81       	ldd	r24, Y+1	; 0x01
    5774:	8f 5f       	subi	r24, 0xFF	; 255
    5776:	89 83       	std	Y+1, r24	; 0x01
    5778:	89 81       	ldd	r24, Y+1	; 0x01
    577a:	88 30       	cpi	r24, 0x08	; 8
    577c:	78 f3       	brcs	.-34     	; 0x575c <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    577e:	8e 81       	ldd	r24, Y+6	; 0x06
    5780:	6f 81       	ldd	r22, Y+7	; 0x07
    5782:	0e 94 cf 2b 	call	0x579e	; 0x579e <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    5786:	8d 81       	ldd	r24, Y+5	; 0x05
    5788:	0e 94 02 29 	call	0x5204	; 0x5204 <CLCD_voidSendData>
}
    578c:	27 96       	adiw	r28, 0x07	; 7
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	f8 94       	cli
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	cf 91       	pop	r28
    579a:	df 91       	pop	r29
    579c:	08 95       	ret

0000579e <CLCD_u8GoToXY>:
 * @param Copy_u8XPos X position of the new particular position.
 * @param Copy_u8YPos Y position of the new particular position.
 * @return Error state.
 */
uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	00 d0       	rcall	.+0      	; 0x57a4 <CLCD_u8GoToXY+0x6>
    57a4:	00 d0       	rcall	.+0      	; 0x57a6 <CLCD_u8GoToXY+0x8>
    57a6:	cd b7       	in	r28, 0x3d	; 61
    57a8:	de b7       	in	r29, 0x3e	; 62
    57aa:	8b 83       	std	Y+3, r24	; 0x03
    57ac:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    57ae:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    57b0:	8c 81       	ldd	r24, Y+4	; 0x04
    57b2:	88 23       	and	r24, r24
    57b4:	19 f4       	brne	.+6      	; 0x57bc <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = 0x00 + Copy_u8XPos;
    57b6:	8b 81       	ldd	r24, Y+3	; 0x03
    57b8:	89 83       	std	Y+1, r24	; 0x01
    57ba:	09 c0       	rjmp	.+18     	; 0x57ce <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    57bc:	8c 81       	ldd	r24, Y+4	; 0x04
    57be:	81 30       	cpi	r24, 0x01	; 1
    57c0:	21 f4       	brne	.+8      	; 0x57ca <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    57c2:	8b 81       	ldd	r24, Y+3	; 0x03
    57c4:	80 5c       	subi	r24, 0xC0	; 192
    57c6:	89 83       	std	Y+1, r24	; 0x01
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    57ce:	89 81       	ldd	r24, Y+1	; 0x01
    57d0:	80 68       	ori	r24, 0x80	; 128
    57d2:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    57d4:	89 81       	ldd	r24, Y+1	; 0x01
    57d6:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    57da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	cf 91       	pop	r28
    57e6:	df 91       	pop	r29
    57e8:	08 95       	ret

000057ea <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    57ea:	af 92       	push	r10
    57ec:	bf 92       	push	r11
    57ee:	cf 92       	push	r12
    57f0:	df 92       	push	r13
    57f2:	ef 92       	push	r14
    57f4:	ff 92       	push	r15
    57f6:	0f 93       	push	r16
    57f8:	1f 93       	push	r17
    57fa:	df 93       	push	r29
    57fc:	cf 93       	push	r28
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
    5802:	64 97       	sbiw	r28, 0x14	; 20
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	6d 83       	std	Y+5, r22	; 0x05
    5810:	7e 83       	std	Y+6, r23	; 0x06
    5812:	8f 83       	std	Y+7, r24	; 0x07
    5814:	98 87       	std	Y+8, r25	; 0x08
    5816:	29 87       	std	Y+9, r18	; 0x09
    5818:	3a 87       	std	Y+10, r19	; 0x0a
    581a:	4b 87       	std	Y+11, r20	; 0x0b
    581c:	5c 87       	std	Y+12, r21	; 0x0c
    581e:	ed 86       	std	Y+13, r14	; 0x0d
    5820:	fe 86       	std	Y+14, r15	; 0x0e
    5822:	0f 87       	std	Y+15, r16	; 0x0f
    5824:	18 8b       	std	Y+16, r17	; 0x10
    5826:	a9 8a       	std	Y+17, r10	; 0x11
    5828:	ba 8a       	std	Y+18, r11	; 0x12
    582a:	cb 8a       	std	Y+19, r12	; 0x13
    582c:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    582e:	19 82       	std	Y+1, r1	; 0x01
    5830:	1a 82       	std	Y+2, r1	; 0x02
    5832:	1b 82       	std	Y+3, r1	; 0x03
    5834:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    5836:	29 89       	ldd	r18, Y+17	; 0x11
    5838:	3a 89       	ldd	r19, Y+18	; 0x12
    583a:	4b 89       	ldd	r20, Y+19	; 0x13
    583c:	5c 89       	ldd	r21, Y+20	; 0x14
    583e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5840:	9e 85       	ldd	r25, Y+14	; 0x0e
    5842:	af 85       	ldd	r26, Y+15	; 0x0f
    5844:	b8 89       	ldd	r27, Y+16	; 0x10
    5846:	79 01       	movw	r14, r18
    5848:	8a 01       	movw	r16, r20
    584a:	e8 1a       	sub	r14, r24
    584c:	f9 0a       	sbc	r15, r25
    584e:	0a 0b       	sbc	r16, r26
    5850:	1b 0b       	sbc	r17, r27
    5852:	29 a1       	ldd	r18, Y+33	; 0x21
    5854:	3a a1       	ldd	r19, Y+34	; 0x22
    5856:	4b a1       	ldd	r20, Y+35	; 0x23
    5858:	5c a1       	ldd	r21, Y+36	; 0x24
    585a:	8d 81       	ldd	r24, Y+5	; 0x05
    585c:	9e 81       	ldd	r25, Y+6	; 0x06
    585e:	af 81       	ldd	r26, Y+7	; 0x07
    5860:	b8 85       	ldd	r27, Y+8	; 0x08
    5862:	28 1b       	sub	r18, r24
    5864:	39 0b       	sbc	r19, r25
    5866:	4a 0b       	sbc	r20, r26
    5868:	5b 0b       	sbc	r21, r27
    586a:	c8 01       	movw	r24, r16
    586c:	b7 01       	movw	r22, r14
    586e:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsi3>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	89 83       	std	Y+1, r24	; 0x01
    5878:	9a 83       	std	Y+2, r25	; 0x02
    587a:	ab 83       	std	Y+3, r26	; 0x03
    587c:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    587e:	29 85       	ldd	r18, Y+9	; 0x09
    5880:	3a 85       	ldd	r19, Y+10	; 0x0a
    5882:	4b 85       	ldd	r20, Y+11	; 0x0b
    5884:	5c 85       	ldd	r21, Y+12	; 0x0c
    5886:	8d 81       	ldd	r24, Y+5	; 0x05
    5888:	9e 81       	ldd	r25, Y+6	; 0x06
    588a:	af 81       	ldd	r26, Y+7	; 0x07
    588c:	b8 85       	ldd	r27, Y+8	; 0x08
    588e:	28 1b       	sub	r18, r24
    5890:	39 0b       	sbc	r19, r25
    5892:	4a 0b       	sbc	r20, r26
    5894:	5b 0b       	sbc	r21, r27
    5896:	89 81       	ldd	r24, Y+1	; 0x01
    5898:	9a 81       	ldd	r25, Y+2	; 0x02
    589a:	ab 81       	ldd	r26, Y+3	; 0x03
    589c:	bc 81       	ldd	r27, Y+4	; 0x04
    589e:	bc 01       	movw	r22, r24
    58a0:	cd 01       	movw	r24, r26
    58a2:	0e 94 9f 2c 	call	0x593e	; 0x593e <__divmodsi4>
    58a6:	da 01       	movw	r26, r20
    58a8:	c9 01       	movw	r24, r18
    58aa:	89 83       	std	Y+1, r24	; 0x01
    58ac:	9a 83       	std	Y+2, r25	; 0x02
    58ae:	ab 83       	std	Y+3, r26	; 0x03
    58b0:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    58b2:	29 81       	ldd	r18, Y+1	; 0x01
    58b4:	3a 81       	ldd	r19, Y+2	; 0x02
    58b6:	4b 81       	ldd	r20, Y+3	; 0x03
    58b8:	5c 81       	ldd	r21, Y+4	; 0x04
    58ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    58bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    58be:	af 85       	ldd	r26, Y+15	; 0x0f
    58c0:	b8 89       	ldd	r27, Y+16	; 0x10
    58c2:	82 0f       	add	r24, r18
    58c4:	93 1f       	adc	r25, r19
    58c6:	a4 1f       	adc	r26, r20
    58c8:	b5 1f       	adc	r27, r21
    58ca:	89 83       	std	Y+1, r24	; 0x01
    58cc:	9a 83       	std	Y+2, r25	; 0x02
    58ce:	ab 83       	std	Y+3, r26	; 0x03
    58d0:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    58d2:	89 81       	ldd	r24, Y+1	; 0x01
    58d4:	9a 81       	ldd	r25, Y+2	; 0x02
    58d6:	ab 81       	ldd	r26, Y+3	; 0x03
    58d8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	64 96       	adiw	r28, 0x14	; 20
    58e0:	0f b6       	in	r0, 0x3f	; 63
    58e2:	f8 94       	cli
    58e4:	de bf       	out	0x3e, r29	; 62
    58e6:	0f be       	out	0x3f, r0	; 63
    58e8:	cd bf       	out	0x3d, r28	; 61
    58ea:	cf 91       	pop	r28
    58ec:	df 91       	pop	r29
    58ee:	1f 91       	pop	r17
    58f0:	0f 91       	pop	r16
    58f2:	ff 90       	pop	r15
    58f4:	ef 90       	pop	r14
    58f6:	df 90       	pop	r13
    58f8:	cf 90       	pop	r12
    58fa:	bf 90       	pop	r11
    58fc:	af 90       	pop	r10
    58fe:	08 95       	ret

00005900 <__mulsi3>:
    5900:	62 9f       	mul	r22, r18
    5902:	d0 01       	movw	r26, r0
    5904:	73 9f       	mul	r23, r19
    5906:	f0 01       	movw	r30, r0
    5908:	82 9f       	mul	r24, r18
    590a:	e0 0d       	add	r30, r0
    590c:	f1 1d       	adc	r31, r1
    590e:	64 9f       	mul	r22, r20
    5910:	e0 0d       	add	r30, r0
    5912:	f1 1d       	adc	r31, r1
    5914:	92 9f       	mul	r25, r18
    5916:	f0 0d       	add	r31, r0
    5918:	83 9f       	mul	r24, r19
    591a:	f0 0d       	add	r31, r0
    591c:	74 9f       	mul	r23, r20
    591e:	f0 0d       	add	r31, r0
    5920:	65 9f       	mul	r22, r21
    5922:	f0 0d       	add	r31, r0
    5924:	99 27       	eor	r25, r25
    5926:	72 9f       	mul	r23, r18
    5928:	b0 0d       	add	r27, r0
    592a:	e1 1d       	adc	r30, r1
    592c:	f9 1f       	adc	r31, r25
    592e:	63 9f       	mul	r22, r19
    5930:	b0 0d       	add	r27, r0
    5932:	e1 1d       	adc	r30, r1
    5934:	f9 1f       	adc	r31, r25
    5936:	bd 01       	movw	r22, r26
    5938:	cf 01       	movw	r24, r30
    593a:	11 24       	eor	r1, r1
    593c:	08 95       	ret

0000593e <__divmodsi4>:
    593e:	97 fb       	bst	r25, 7
    5940:	09 2e       	mov	r0, r25
    5942:	05 26       	eor	r0, r21
    5944:	0e d0       	rcall	.+28     	; 0x5962 <__divmodsi4_neg1>
    5946:	57 fd       	sbrc	r21, 7
    5948:	04 d0       	rcall	.+8      	; 0x5952 <__divmodsi4_neg2>
    594a:	14 d0       	rcall	.+40     	; 0x5974 <__udivmodsi4>
    594c:	0a d0       	rcall	.+20     	; 0x5962 <__divmodsi4_neg1>
    594e:	00 1c       	adc	r0, r0
    5950:	38 f4       	brcc	.+14     	; 0x5960 <__divmodsi4_exit>

00005952 <__divmodsi4_neg2>:
    5952:	50 95       	com	r21
    5954:	40 95       	com	r20
    5956:	30 95       	com	r19
    5958:	21 95       	neg	r18
    595a:	3f 4f       	sbci	r19, 0xFF	; 255
    595c:	4f 4f       	sbci	r20, 0xFF	; 255
    595e:	5f 4f       	sbci	r21, 0xFF	; 255

00005960 <__divmodsi4_exit>:
    5960:	08 95       	ret

00005962 <__divmodsi4_neg1>:
    5962:	f6 f7       	brtc	.-4      	; 0x5960 <__divmodsi4_exit>
    5964:	90 95       	com	r25
    5966:	80 95       	com	r24
    5968:	70 95       	com	r23
    596a:	61 95       	neg	r22
    596c:	7f 4f       	sbci	r23, 0xFF	; 255
    596e:	8f 4f       	sbci	r24, 0xFF	; 255
    5970:	9f 4f       	sbci	r25, 0xFF	; 255
    5972:	08 95       	ret

00005974 <__udivmodsi4>:
    5974:	a1 e2       	ldi	r26, 0x21	; 33
    5976:	1a 2e       	mov	r1, r26
    5978:	aa 1b       	sub	r26, r26
    597a:	bb 1b       	sub	r27, r27
    597c:	fd 01       	movw	r30, r26
    597e:	0d c0       	rjmp	.+26     	; 0x599a <__udivmodsi4_ep>

00005980 <__udivmodsi4_loop>:
    5980:	aa 1f       	adc	r26, r26
    5982:	bb 1f       	adc	r27, r27
    5984:	ee 1f       	adc	r30, r30
    5986:	ff 1f       	adc	r31, r31
    5988:	a2 17       	cp	r26, r18
    598a:	b3 07       	cpc	r27, r19
    598c:	e4 07       	cpc	r30, r20
    598e:	f5 07       	cpc	r31, r21
    5990:	20 f0       	brcs	.+8      	; 0x599a <__udivmodsi4_ep>
    5992:	a2 1b       	sub	r26, r18
    5994:	b3 0b       	sbc	r27, r19
    5996:	e4 0b       	sbc	r30, r20
    5998:	f5 0b       	sbc	r31, r21

0000599a <__udivmodsi4_ep>:
    599a:	66 1f       	adc	r22, r22
    599c:	77 1f       	adc	r23, r23
    599e:	88 1f       	adc	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	1a 94       	dec	r1
    59a4:	69 f7       	brne	.-38     	; 0x5980 <__udivmodsi4_loop>
    59a6:	60 95       	com	r22
    59a8:	70 95       	com	r23
    59aa:	80 95       	com	r24
    59ac:	90 95       	com	r25
    59ae:	9b 01       	movw	r18, r22
    59b0:	ac 01       	movw	r20, r24
    59b2:	bd 01       	movw	r22, r26
    59b4:	cf 01       	movw	r24, r30
    59b6:	08 95       	ret

000059b8 <__prologue_saves__>:
    59b8:	2f 92       	push	r2
    59ba:	3f 92       	push	r3
    59bc:	4f 92       	push	r4
    59be:	5f 92       	push	r5
    59c0:	6f 92       	push	r6
    59c2:	7f 92       	push	r7
    59c4:	8f 92       	push	r8
    59c6:	9f 92       	push	r9
    59c8:	af 92       	push	r10
    59ca:	bf 92       	push	r11
    59cc:	cf 92       	push	r12
    59ce:	df 92       	push	r13
    59d0:	ef 92       	push	r14
    59d2:	ff 92       	push	r15
    59d4:	0f 93       	push	r16
    59d6:	1f 93       	push	r17
    59d8:	cf 93       	push	r28
    59da:	df 93       	push	r29
    59dc:	cd b7       	in	r28, 0x3d	; 61
    59de:	de b7       	in	r29, 0x3e	; 62
    59e0:	ca 1b       	sub	r28, r26
    59e2:	db 0b       	sbc	r29, r27
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	f8 94       	cli
    59e8:	de bf       	out	0x3e, r29	; 62
    59ea:	0f be       	out	0x3f, r0	; 63
    59ec:	cd bf       	out	0x3d, r28	; 61
    59ee:	09 94       	ijmp

000059f0 <__epilogue_restores__>:
    59f0:	2a 88       	ldd	r2, Y+18	; 0x12
    59f2:	39 88       	ldd	r3, Y+17	; 0x11
    59f4:	48 88       	ldd	r4, Y+16	; 0x10
    59f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    59f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    59fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    59fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    59fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a00:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a02:	b9 84       	ldd	r11, Y+9	; 0x09
    5a04:	c8 84       	ldd	r12, Y+8	; 0x08
    5a06:	df 80       	ldd	r13, Y+7	; 0x07
    5a08:	ee 80       	ldd	r14, Y+6	; 0x06
    5a0a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a0c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a0e:	1b 81       	ldd	r17, Y+3	; 0x03
    5a10:	aa 81       	ldd	r26, Y+2	; 0x02
    5a12:	b9 81       	ldd	r27, Y+1	; 0x01
    5a14:	ce 0f       	add	r28, r30
    5a16:	d1 1d       	adc	r29, r1
    5a18:	0f b6       	in	r0, 0x3f	; 63
    5a1a:	f8 94       	cli
    5a1c:	de bf       	out	0x3e, r29	; 62
    5a1e:	0f be       	out	0x3f, r0	; 63
    5a20:	cd bf       	out	0x3d, r28	; 61
    5a22:	ed 01       	movw	r28, r26
    5a24:	08 95       	ret

00005a26 <_exit>:
    5a26:	f8 94       	cli

00005a28 <__stop_program>:
    5a28:	ff cf       	rjmp	.-2      	; 0x5a28 <__stop_program>
